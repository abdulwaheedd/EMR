var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var DashboardUrlForm = /** @class */ (function (_super) {
            __extends(DashboardUrlForm, _super);
            function DashboardUrlForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!DashboardUrlForm.init) {
                    DashboardUrlForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.BooleanEditor;
                    Q.initFormType(DashboardUrlForm, [
                        'Url', w0,
                        'Active', w1
                    ]);
                }
                return _this;
            }
            DashboardUrlForm.formKey = 'Administration.DashboardUrl';
            return DashboardUrlForm;
        }(Serenity.PrefixedContext));
        Administration.DashboardUrlForm = DashboardUrlForm;
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var DashboardUrlRow;
        (function (DashboardUrlRow) {
            DashboardUrlRow.idProperty = 'Id';
            DashboardUrlRow.nameProperty = 'Url';
            DashboardUrlRow.localTextPrefix = 'Administration.DashboardUrl';
        })(DashboardUrlRow = Administration.DashboardUrlRow || (Administration.DashboardUrlRow = {}));
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var DashboardUrlService;
        (function (DashboardUrlService) {
            DashboardUrlService.baseUrl = 'Administration/DashboardUrl';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                DashboardUrlService[x] = function (r, s, o) {
                    return Q.serviceRequest(DashboardUrlService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(DashboardUrlService = Administration.DashboardUrlService || (Administration.DashboardUrlService = {}));
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var LanguageForm = /** @class */ (function (_super) {
            __extends(LanguageForm, _super);
            function LanguageForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!LanguageForm.init) {
                    LanguageForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(LanguageForm, [
                        'LanguageId', w0,
                        'LanguageName', w0
                    ]);
                }
                return _this;
            }
            LanguageForm.formKey = 'Administration.Language';
            return LanguageForm;
        }(Serenity.PrefixedContext));
        Administration.LanguageForm = LanguageForm;
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var LanguageRow;
        (function (LanguageRow) {
            LanguageRow.idProperty = 'Id';
            LanguageRow.nameProperty = 'LanguageName';
            LanguageRow.localTextPrefix = 'Administration.Language';
            LanguageRow.lookupKey = 'Administration.Language';
            function getLookup() {
                return Q.getLookup('Administration.Language');
            }
            LanguageRow.getLookup = getLookup;
        })(LanguageRow = Administration.LanguageRow || (Administration.LanguageRow = {}));
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var LanguageService;
        (function (LanguageService) {
            LanguageService.baseUrl = 'Administration/Language';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                LanguageService[x] = function (r, s, o) {
                    return Q.serviceRequest(LanguageService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(LanguageService = Administration.LanguageService || (Administration.LanguageService = {}));
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var ModulesForm = /** @class */ (function (_super) {
            __extends(ModulesForm, _super);
            function ModulesForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ModulesForm.init) {
                    ModulesForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(ModulesForm, [
                        'ModuleName', w0,
                        'ModuleDescription', w0
                    ]);
                }
                return _this;
            }
            ModulesForm.formKey = 'Administration.Modules';
            return ModulesForm;
        }(Serenity.PrefixedContext));
        Administration.ModulesForm = ModulesForm;
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var ModulesRow;
        (function (ModulesRow) {
            ModulesRow.idProperty = 'ModuleId';
            ModulesRow.nameProperty = 'ModuleName';
            ModulesRow.localTextPrefix = 'Administration.Modules';
            ModulesRow.lookupKey = 'Administration.Modules';
            function getLookup() {
                return Q.getLookup('Administration.Modules');
            }
            ModulesRow.getLookup = getLookup;
        })(ModulesRow = Administration.ModulesRow || (Administration.ModulesRow = {}));
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var ModulesService;
        (function (ModulesService) {
            ModulesService.baseUrl = 'Administration/Modules';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ModulesService[x] = function (r, s, o) {
                    return Q.serviceRequest(ModulesService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(ModulesService = Administration.ModulesService || (Administration.ModulesService = {}));
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var RoleForm = /** @class */ (function (_super) {
            __extends(RoleForm, _super);
            function RoleForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!RoleForm.init) {
                    RoleForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(RoleForm, [
                        'RoleName', w0
                    ]);
                }
                return _this;
            }
            RoleForm.formKey = 'Administration.Role';
            return RoleForm;
        }(Serenity.PrefixedContext));
        Administration.RoleForm = RoleForm;
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var RolePermissionRow;
        (function (RolePermissionRow) {
            RolePermissionRow.idProperty = 'RolePermissionId';
            RolePermissionRow.nameProperty = 'PermissionKey';
            RolePermissionRow.localTextPrefix = 'Administration.RolePermission';
        })(RolePermissionRow = Administration.RolePermissionRow || (Administration.RolePermissionRow = {}));
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var RolePermissionService;
        (function (RolePermissionService) {
            RolePermissionService.baseUrl = 'Administration/RolePermission';
            [
                'Update',
                'List'
            ].forEach(function (x) {
                RolePermissionService[x] = function (r, s, o) {
                    return Q.serviceRequest(RolePermissionService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(RolePermissionService = Administration.RolePermissionService || (Administration.RolePermissionService = {}));
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var RoleRow;
        (function (RoleRow) {
            RoleRow.idProperty = 'RoleId';
            RoleRow.nameProperty = 'RoleName';
            RoleRow.localTextPrefix = 'Administration.Role';
            RoleRow.lookupKey = 'Administration.Role';
            function getLookup() {
                return Q.getLookup('Administration.Role');
            }
            RoleRow.getLookup = getLookup;
        })(RoleRow = Administration.RoleRow || (Administration.RoleRow = {}));
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var RoleService;
        (function (RoleService) {
            RoleService.baseUrl = 'Administration/Role';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                RoleService[x] = function (r, s, o) {
                    return Q.serviceRequest(RoleService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(RoleService = Administration.RoleService || (Administration.RoleService = {}));
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var TenantForm = /** @class */ (function (_super) {
            __extends(TenantForm, _super);
            function TenantForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TenantForm.init) {
                    TenantForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    Q.initFormType(TenantForm, [
                        'TenantName', w0,
                        'FacilityId', w1
                    ]);
                }
                return _this;
            }
            TenantForm.formKey = 'Administration.Tenant';
            return TenantForm;
        }(Serenity.PrefixedContext));
        Administration.TenantForm = TenantForm;
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var TenantRow;
        (function (TenantRow) {
            TenantRow.idProperty = 'TenantId';
            TenantRow.nameProperty = 'TenantName';
            TenantRow.localTextPrefix = 'Administration.Tenant';
            TenantRow.lookupKey = 'Administration.Tenant';
            function getLookup() {
                return Q.getLookup('Administration.Tenant');
            }
            TenantRow.getLookup = getLookup;
        })(TenantRow = Administration.TenantRow || (Administration.TenantRow = {}));
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var TenantService;
        (function (TenantService) {
            TenantService.baseUrl = 'Administration/Tenant';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TenantService[x] = function (r, s, o) {
                    return Q.serviceRequest(TenantService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TenantService = Administration.TenantService || (Administration.TenantService = {}));
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var TranslationService;
        (function (TranslationService) {
            TranslationService.baseUrl = 'Administration/Translation';
            [
                'List',
                'Update'
            ].forEach(function (x) {
                TranslationService[x] = function (r, s, o) {
                    return Q.serviceRequest(TranslationService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TranslationService = Administration.TranslationService || (Administration.TranslationService = {}));
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var UserForm = /** @class */ (function (_super) {
            __extends(UserForm, _super);
            function UserForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!UserForm.init) {
                    UserForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.EmailEditor;
                    var w2 = s.ImageUploadEditor;
                    var w3 = s.PasswordEditor;
                    var w4 = s.LookupEditor;
                    Q.initFormType(UserForm, [
                        'Username', w0,
                        'DisplayName', w0,
                        'Email', w1,
                        'UserImage', w2,
                        'Password', w3,
                        'PasswordConfirm', w3,
                        'Source', w0,
                        'TenantId', w4
                    ]);
                }
                return _this;
            }
            UserForm.formKey = 'Administration.User';
            return UserForm;
        }(Serenity.PrefixedContext));
        Administration.UserForm = UserForm;
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var UserPermissionRow;
        (function (UserPermissionRow) {
            UserPermissionRow.idProperty = 'UserPermissionId';
            UserPermissionRow.nameProperty = 'PermissionKey';
            UserPermissionRow.localTextPrefix = 'Administration.UserPermission';
        })(UserPermissionRow = Administration.UserPermissionRow || (Administration.UserPermissionRow = {}));
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var UserPermissionService;
        (function (UserPermissionService) {
            UserPermissionService.baseUrl = 'Administration/UserPermission';
            [
                'Update',
                'List',
                'ListRolePermissions',
                'ListPermissionKeys'
            ].forEach(function (x) {
                UserPermissionService[x] = function (r, s, o) {
                    return Q.serviceRequest(UserPermissionService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(UserPermissionService = Administration.UserPermissionService || (Administration.UserPermissionService = {}));
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var UserRoleRow;
        (function (UserRoleRow) {
            UserRoleRow.idProperty = 'UserRoleId';
            UserRoleRow.localTextPrefix = 'Administration.UserRole';
        })(UserRoleRow = Administration.UserRoleRow || (Administration.UserRoleRow = {}));
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var UserRoleService;
        (function (UserRoleService) {
            UserRoleService.baseUrl = 'Administration/UserRole';
            [
                'Update',
                'List'
            ].forEach(function (x) {
                UserRoleService[x] = function (r, s, o) {
                    return Q.serviceRequest(UserRoleService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(UserRoleService = Administration.UserRoleService || (Administration.UserRoleService = {}));
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var UserRow;
        (function (UserRow) {
            UserRow.idProperty = 'UserId';
            UserRow.isActiveProperty = 'IsActive';
            UserRow.nameProperty = 'Username';
            UserRow.localTextPrefix = 'Administration.User';
            UserRow.lookupKey = 'Administration.User';
            function getLookup() {
                return Q.getLookup('Administration.User');
            }
            UserRow.getLookup = getLookup;
        })(UserRow = Administration.UserRow || (Administration.UserRow = {}));
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var UserService;
        (function (UserService) {
            UserService.baseUrl = 'Administration/User';
            [
                'Create',
                'Update',
                'Delete',
                'Undelete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                UserService[x] = function (r, s, o) {
                    return Q.serviceRequest(UserService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(UserService = Administration.UserService || (Administration.UserService = {}));
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Common;
    (function (Common) {
        var UserPreferenceRow;
        (function (UserPreferenceRow) {
            UserPreferenceRow.idProperty = 'UserPreferenceId';
            UserPreferenceRow.nameProperty = 'Name';
            UserPreferenceRow.localTextPrefix = 'Common.UserPreference';
        })(UserPreferenceRow = Common.UserPreferenceRow || (Common.UserPreferenceRow = {}));
    })(Common = EMR.Common || (EMR.Common = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Common;
    (function (Common) {
        var UserPreferenceService;
        (function (UserPreferenceService) {
            UserPreferenceService.baseUrl = 'Common/UserPreference';
            [
                'Update',
                'Retrieve'
            ].forEach(function (x) {
                UserPreferenceService[x] = function (r, s, o) {
                    return Q.serviceRequest(UserPreferenceService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(UserPreferenceService = Common.UserPreferenceService || (Common.UserPreferenceService = {}));
    })(Common = EMR.Common || (EMR.Common = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var BloodStatusForm = /** @class */ (function (_super) {
            __extends(BloodStatusForm, _super);
            function BloodStatusForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!BloodStatusForm.init) {
                    BloodStatusForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(BloodStatusForm, [
                        'Bloodstatus', w0
                    ]);
                }
                return _this;
            }
            BloodStatusForm.formKey = 'Configs.BloodStatus';
            return BloodStatusForm;
        }(Serenity.PrefixedContext));
        Configs.BloodStatusForm = BloodStatusForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var BloodStatusRow;
        (function (BloodStatusRow) {
            BloodStatusRow.idProperty = 'BId';
            BloodStatusRow.nameProperty = 'Bloodstatus';
            BloodStatusRow.localTextPrefix = 'Configs.BloodStatus';
            BloodStatusRow.lookupKey = 'Configs.LkpBloodStatus';
            function getLookup() {
                return Q.getLookup('Configs.LkpBloodStatus');
            }
            BloodStatusRow.getLookup = getLookup;
        })(BloodStatusRow = Configs.BloodStatusRow || (Configs.BloodStatusRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var BloodStatusService;
        (function (BloodStatusService) {
            BloodStatusService.baseUrl = 'Configs/BloodStatus';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                BloodStatusService[x] = function (r, s, o) {
                    return Q.serviceRequest(BloodStatusService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(BloodStatusService = Configs.BloodStatusService || (Configs.BloodStatusService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var CaretypesForm = /** @class */ (function (_super) {
            __extends(CaretypesForm, _super);
            function CaretypesForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!CaretypesForm.init) {
                    CaretypesForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(CaretypesForm, [
                        'Caretype', w0
                    ]);
                }
                return _this;
            }
            CaretypesForm.formKey = 'Configs.Caretypes';
            return CaretypesForm;
        }(Serenity.PrefixedContext));
        Configs.CaretypesForm = CaretypesForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var CaretypesRow;
        (function (CaretypesRow) {
            CaretypesRow.idProperty = 'Id';
            CaretypesRow.nameProperty = 'Caretype';
            CaretypesRow.localTextPrefix = 'Configs.Caretypes';
            CaretypesRow.lookupKey = 'Configs.lkpCaretypes';
            function getLookup() {
                return Q.getLookup('Configs.lkpCaretypes');
            }
            CaretypesRow.getLookup = getLookup;
        })(CaretypesRow = Configs.CaretypesRow || (Configs.CaretypesRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var CaretypesService;
        (function (CaretypesService) {
            CaretypesService.baseUrl = 'Configs/Caretypes';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CaretypesService[x] = function (r, s, o) {
                    return Q.serviceRequest(CaretypesService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(CaretypesService = Configs.CaretypesService || (Configs.CaretypesService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var CountriesForm = /** @class */ (function (_super) {
            __extends(CountriesForm, _super);
            function CountriesForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!CountriesForm.init) {
                    CountriesForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.DecimalEditor;
                    Q.initFormType(CountriesForm, [
                        'Country', w0,
                        'Region', w0,
                        'Population', w1,
                        'Area', w1,
                        'PopDensity', w1,
                        'CoastlineRatio', w1,
                        'NetMigration', w1,
                        'InfantMortality1000', w1,
                        'Gdp', w1,
                        'LiteracyPerc', w1,
                        'Phones', w1,
                        'Arable', w1,
                        'Crops', w1,
                        'Other', w1,
                        'Climate', w1,
                        'Birthrate', w1,
                        'Deathrate', w1,
                        'Agriculture', w1,
                        'Industry', w1,
                        'Service', w1
                    ]);
                }
                return _this;
            }
            CountriesForm.formKey = 'Configs.Countries';
            return CountriesForm;
        }(Serenity.PrefixedContext));
        Configs.CountriesForm = CountriesForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var CountriesRow;
        (function (CountriesRow) {
            CountriesRow.idProperty = 'CountryId';
            CountriesRow.nameProperty = 'Country';
            CountriesRow.localTextPrefix = 'Configs.Countries';
            CountriesRow.lookupKey = 'Configs.Countries';
            function getLookup() {
                return Q.getLookup('Configs.Countries');
            }
            CountriesRow.getLookup = getLookup;
        })(CountriesRow = Configs.CountriesRow || (Configs.CountriesRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var CountriesService;
        (function (CountriesService) {
            CountriesService.baseUrl = 'Configs/Countries';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CountriesService[x] = function (r, s, o) {
                    return Q.serviceRequest(CountriesService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(CountriesService = Configs.CountriesService || (Configs.CountriesService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var CyclesForm = /** @class */ (function (_super) {
            __extends(CyclesForm, _super);
            function CyclesForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!CyclesForm.init) {
                    CyclesForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(CyclesForm, [
                        'Cyclename', w0,
                        'Cycledescription', w0
                    ]);
                }
                return _this;
            }
            CyclesForm.formKey = 'Configs.Cycles';
            return CyclesForm;
        }(Serenity.PrefixedContext));
        Configs.CyclesForm = CyclesForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var CyclesRow;
        (function (CyclesRow) {
            CyclesRow.idProperty = 'CycleId';
            CyclesRow.nameProperty = 'Cyclename';
            CyclesRow.localTextPrefix = 'Configs.Cycles';
            CyclesRow.lookupKey = 'Configs.lkpCycles';
            function getLookup() {
                return Q.getLookup('Configs.lkpCycles');
            }
            CyclesRow.getLookup = getLookup;
        })(CyclesRow = Configs.CyclesRow || (Configs.CyclesRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var CyclesService;
        (function (CyclesService) {
            CyclesService.baseUrl = 'Configs/Cycles';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CyclesService[x] = function (r, s, o) {
                    return Q.serviceRequest(CyclesService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(CyclesService = Configs.CyclesService || (Configs.CyclesService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var EthnicityForm = /** @class */ (function (_super) {
            __extends(EthnicityForm, _super);
            function EthnicityForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!EthnicityForm.init) {
                    EthnicityForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(EthnicityForm, [
                        'EthnicityName', w0
                    ]);
                }
                return _this;
            }
            EthnicityForm.formKey = 'Configs.Ethnicity';
            return EthnicityForm;
        }(Serenity.PrefixedContext));
        Configs.EthnicityForm = EthnicityForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var EthnicityRow;
        (function (EthnicityRow) {
            EthnicityRow.idProperty = 'EthnicityId';
            EthnicityRow.nameProperty = 'EthnicityName';
            EthnicityRow.localTextPrefix = 'Configs.Ethnicity';
            EthnicityRow.lookupKey = 'Configs.LkpEthnicity';
            function getLookup() {
                return Q.getLookup('Configs.LkpEthnicity');
            }
            EthnicityRow.getLookup = getLookup;
        })(EthnicityRow = Configs.EthnicityRow || (Configs.EthnicityRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var EthnicityService;
        (function (EthnicityService) {
            EthnicityService.baseUrl = 'Configs/Ethnicity';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                EthnicityService[x] = function (r, s, o) {
                    return Q.serviceRequest(EthnicityService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(EthnicityService = Configs.EthnicityService || (Configs.EthnicityService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpFormForm = /** @class */ (function (_super) {
            __extends(LkpFormForm, _super);
            function LkpFormForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!LkpFormForm.init) {
                    LkpFormForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(LkpFormForm, [
                        'FormName', w0
                    ]);
                }
                return _this;
            }
            LkpFormForm.formKey = 'Configs.LkpForm';
            return LkpFormForm;
        }(Serenity.PrefixedContext));
        Configs.LkpFormForm = LkpFormForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpFormRow;
        (function (LkpFormRow) {
            LkpFormRow.idProperty = 'FormId';
            LkpFormRow.nameProperty = 'FormName';
            LkpFormRow.localTextPrefix = 'Configs.LkpForm';
            LkpFormRow.lookupKey = 'Configs.lkpForm';
            function getLookup() {
                return Q.getLookup('Configs.lkpForm');
            }
            LkpFormRow.getLookup = getLookup;
        })(LkpFormRow = Configs.LkpFormRow || (Configs.LkpFormRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpFormService;
        (function (LkpFormService) {
            LkpFormService.baseUrl = 'Configs/LkpForm';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                LkpFormService[x] = function (r, s, o) {
                    return Q.serviceRequest(LkpFormService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(LkpFormService = Configs.LkpFormService || (Configs.LkpFormService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpHistoryForm = /** @class */ (function (_super) {
            __extends(LkpHistoryForm, _super);
            function LkpHistoryForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!LkpHistoryForm.init) {
                    LkpHistoryForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(LkpHistoryForm, [
                        'HistoryName', w0
                    ]);
                }
                return _this;
            }
            LkpHistoryForm.formKey = 'Configs.LkpHistory';
            return LkpHistoryForm;
        }(Serenity.PrefixedContext));
        Configs.LkpHistoryForm = LkpHistoryForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpHistoryRow;
        (function (LkpHistoryRow) {
            LkpHistoryRow.idProperty = 'HistoryId';
            LkpHistoryRow.nameProperty = 'HistoryName';
            LkpHistoryRow.localTextPrefix = 'Configs.LkpHistory';
            LkpHistoryRow.lookupKey = 'Configs.lkpHistory';
            function getLookup() {
                return Q.getLookup('Configs.lkpHistory');
            }
            LkpHistoryRow.getLookup = getLookup;
        })(LkpHistoryRow = Configs.LkpHistoryRow || (Configs.LkpHistoryRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpHistoryService;
        (function (LkpHistoryService) {
            LkpHistoryService.baseUrl = 'Configs/LkpHistory';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                LkpHistoryService[x] = function (r, s, o) {
                    return Q.serviceRequest(LkpHistoryService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(LkpHistoryService = Configs.LkpHistoryService || (Configs.LkpHistoryService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpImagingForm = /** @class */ (function (_super) {
            __extends(LkpImagingForm, _super);
            function LkpImagingForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!LkpImagingForm.init) {
                    LkpImagingForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.HtmlNoteContentEditor;
                    Q.initFormType(LkpImagingForm, [
                        'ImagingName', w0,
                        'Note', w1
                    ]);
                }
                return _this;
            }
            LkpImagingForm.formKey = 'Configs.LkpImaging';
            return LkpImagingForm;
        }(Serenity.PrefixedContext));
        Configs.LkpImagingForm = LkpImagingForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpImagingRow;
        (function (LkpImagingRow) {
            LkpImagingRow.idProperty = 'ImagingId';
            LkpImagingRow.nameProperty = 'ImagingName';
            LkpImagingRow.localTextPrefix = 'Configs.LkpImaging';
            LkpImagingRow.lookupKey = 'Configs.LkpImaging';
            function getLookup() {
                return Q.getLookup('Configs.LkpImaging');
            }
            LkpImagingRow.getLookup = getLookup;
        })(LkpImagingRow = Configs.LkpImagingRow || (Configs.LkpImagingRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpImagingService;
        (function (LkpImagingService) {
            LkpImagingService.baseUrl = 'Configs/LkpImaging';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                LkpImagingService[x] = function (r, s, o) {
                    return Q.serviceRequest(LkpImagingService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(LkpImagingService = Configs.LkpImagingService || (Configs.LkpImagingService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpLabTestForm = /** @class */ (function (_super) {
            __extends(LkpLabTestForm, _super);
            function LkpLabTestForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!LkpLabTestForm.init) {
                    LkpLabTestForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.DecimalEditor;
                    Q.initFormType(LkpLabTestForm, [
                        'LabTestName', w0,
                        'SubTypeTestId', w1,
                        'NormalRange', w0,
                        'TestPrice', w2,
                        'Unit', w0
                    ]);
                }
                return _this;
            }
            LkpLabTestForm.formKey = 'Configs.LkpLabTest';
            return LkpLabTestForm;
        }(Serenity.PrefixedContext));
        Configs.LkpLabTestForm = LkpLabTestForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpLabTestRow;
        (function (LkpLabTestRow) {
            LkpLabTestRow.idProperty = 'LabTestId';
            LkpLabTestRow.nameProperty = 'LabTestName';
            LkpLabTestRow.localTextPrefix = 'Configs.LkpLabTest';
            LkpLabTestRow.lookupKey = 'Configs.lkpLabTest';
            function getLookup() {
                return Q.getLookup('Configs.lkpLabTest');
            }
            LkpLabTestRow.getLookup = getLookup;
        })(LkpLabTestRow = Configs.LkpLabTestRow || (Configs.LkpLabTestRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpLabTestService;
        (function (LkpLabTestService) {
            LkpLabTestService.baseUrl = 'Configs/LkpLabTest';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                LkpLabTestService[x] = function (r, s, o) {
                    return Q.serviceRequest(LkpLabTestService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(LkpLabTestService = Configs.LkpLabTestService || (Configs.LkpLabTestService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpLosstypesForm = /** @class */ (function (_super) {
            __extends(LkpLosstypesForm, _super);
            function LkpLosstypesForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!LkpLosstypesForm.init) {
                    LkpLosstypesForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(LkpLosstypesForm, [
                        'Name', w0
                    ]);
                }
                return _this;
            }
            LkpLosstypesForm.formKey = 'Configs.LkpLosstypes';
            return LkpLosstypesForm;
        }(Serenity.PrefixedContext));
        Configs.LkpLosstypesForm = LkpLosstypesForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpLosstypesRow;
        (function (LkpLosstypesRow) {
            LkpLosstypesRow.idProperty = 'LosstypeId';
            LkpLosstypesRow.nameProperty = 'Name';
            LkpLosstypesRow.localTextPrefix = 'Configs.LkpLosstypes';
            LkpLosstypesRow.lookupKey = 'Configs.lkpLosstypes';
            function getLookup() {
                return Q.getLookup('Configs.lkpLosstypes');
            }
            LkpLosstypesRow.getLookup = getLookup;
        })(LkpLosstypesRow = Configs.LkpLosstypesRow || (Configs.LkpLosstypesRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpLosstypesService;
        (function (LkpLosstypesService) {
            LkpLosstypesService.baseUrl = 'Configs/LkpLosstypes';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                LkpLosstypesService[x] = function (r, s, o) {
                    return Q.serviceRequest(LkpLosstypesService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(LkpLosstypesService = Configs.LkpLosstypesService || (Configs.LkpLosstypesService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpManufacturerForm = /** @class */ (function (_super) {
            __extends(LkpManufacturerForm, _super);
            function LkpManufacturerForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!LkpManufacturerForm.init) {
                    LkpManufacturerForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.URLEditor;
                    Q.initFormType(LkpManufacturerForm, [
                        'ManufacturerName', w0,
                        'ManufacturerType', w0,
                        'CountryId', w1,
                        'Website', w2,
                        'Email', w0,
                        'CellPhoneNo', w0
                    ]);
                }
                return _this;
            }
            LkpManufacturerForm.formKey = 'Configs.LkpManufacturer';
            return LkpManufacturerForm;
        }(Serenity.PrefixedContext));
        Configs.LkpManufacturerForm = LkpManufacturerForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpManufacturerRow;
        (function (LkpManufacturerRow) {
            LkpManufacturerRow.idProperty = 'ManufacturerId';
            LkpManufacturerRow.nameProperty = 'ManufacturerName';
            LkpManufacturerRow.localTextPrefix = 'Configs.LkpManufacturer';
            LkpManufacturerRow.lookupKey = 'Configs.lkpManufacturer';
            function getLookup() {
                return Q.getLookup('Configs.lkpManufacturer');
            }
            LkpManufacturerRow.getLookup = getLookup;
        })(LkpManufacturerRow = Configs.LkpManufacturerRow || (Configs.LkpManufacturerRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpManufacturerService;
        (function (LkpManufacturerService) {
            LkpManufacturerService.baseUrl = 'Configs/LkpManufacturer';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                LkpManufacturerService[x] = function (r, s, o) {
                    return Q.serviceRequest(LkpManufacturerService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(LkpManufacturerService = Configs.LkpManufacturerService || (Configs.LkpManufacturerService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpPatientTypeForm = /** @class */ (function (_super) {
            __extends(LkpPatientTypeForm, _super);
            function LkpPatientTypeForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!LkpPatientTypeForm.init) {
                    LkpPatientTypeForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(LkpPatientTypeForm, [
                        'TypeNameEn', w0,
                        'TypeNameDari', w0,
                        'TypeNamePashto', w0
                    ]);
                }
                return _this;
            }
            LkpPatientTypeForm.formKey = 'Configs.LkpPatientType';
            return LkpPatientTypeForm;
        }(Serenity.PrefixedContext));
        Configs.LkpPatientTypeForm = LkpPatientTypeForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpPatientTypeRow;
        (function (LkpPatientTypeRow) {
            LkpPatientTypeRow.idProperty = 'TypeId';
            LkpPatientTypeRow.nameProperty = 'TypeNameEn';
            LkpPatientTypeRow.localTextPrefix = 'Configs.LkpPatientType';
            LkpPatientTypeRow.lookupKey = 'Configs.LkpPatientType';
            function getLookup() {
                return Q.getLookup('Configs.LkpPatientType');
            }
            LkpPatientTypeRow.getLookup = getLookup;
        })(LkpPatientTypeRow = Configs.LkpPatientTypeRow || (Configs.LkpPatientTypeRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpPatientTypeService;
        (function (LkpPatientTypeService) {
            LkpPatientTypeService.baseUrl = 'Configs/LkpPatientType';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                LkpPatientTypeService[x] = function (r, s, o) {
                    return Q.serviceRequest(LkpPatientTypeService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(LkpPatientTypeService = Configs.LkpPatientTypeService || (Configs.LkpPatientTypeService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpPhysExamGroupForm = /** @class */ (function (_super) {
            __extends(LkpPhysExamGroupForm, _super);
            function LkpPhysExamGroupForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!LkpPhysExamGroupForm.init) {
                    LkpPhysExamGroupForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(LkpPhysExamGroupForm, [
                        'GroupName', w0
                    ]);
                }
                return _this;
            }
            LkpPhysExamGroupForm.formKey = 'Configs.LkpPhysExamGroup';
            return LkpPhysExamGroupForm;
        }(Serenity.PrefixedContext));
        Configs.LkpPhysExamGroupForm = LkpPhysExamGroupForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpPhysExamGroupRow;
        (function (LkpPhysExamGroupRow) {
            LkpPhysExamGroupRow.idProperty = 'GroupId';
            LkpPhysExamGroupRow.nameProperty = 'GroupName';
            LkpPhysExamGroupRow.localTextPrefix = 'Configs.LkpPhysExamGroup';
            LkpPhysExamGroupRow.lookupKey = 'Configs.LkpPhysExamGroup';
            function getLookup() {
                return Q.getLookup('Configs.LkpPhysExamGroup');
            }
            LkpPhysExamGroupRow.getLookup = getLookup;
        })(LkpPhysExamGroupRow = Configs.LkpPhysExamGroupRow || (Configs.LkpPhysExamGroupRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpPhysExamGroupService;
        (function (LkpPhysExamGroupService) {
            LkpPhysExamGroupService.baseUrl = 'Configs/LkpPhysExamGroup';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                LkpPhysExamGroupService[x] = function (r, s, o) {
                    return Q.serviceRequest(LkpPhysExamGroupService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(LkpPhysExamGroupService = Configs.LkpPhysExamGroupService || (Configs.LkpPhysExamGroupService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpPhysExamsForm = /** @class */ (function (_super) {
            __extends(LkpPhysExamsForm, _super);
            function LkpPhysExamsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!LkpPhysExamsForm.init) {
                    LkpPhysExamsForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    var w1 = s.StringEditor;
                    Q.initFormType(LkpPhysExamsForm, [
                        'GroupId', w0,
                        'PhysExamName', w1
                    ]);
                }
                return _this;
            }
            LkpPhysExamsForm.formKey = 'Configs.LkpPhysExams';
            return LkpPhysExamsForm;
        }(Serenity.PrefixedContext));
        Configs.LkpPhysExamsForm = LkpPhysExamsForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpPhysExamsRow;
        (function (LkpPhysExamsRow) {
            LkpPhysExamsRow.idProperty = 'PhysExamId';
            LkpPhysExamsRow.nameProperty = 'GroupEamName';
            LkpPhysExamsRow.localTextPrefix = 'Configs.LkpPhysExams';
            LkpPhysExamsRow.lookupKey = 'Configs.lkpPhysExams';
            function getLookup() {
                return Q.getLookup('Configs.lkpPhysExams');
            }
            LkpPhysExamsRow.getLookup = getLookup;
        })(LkpPhysExamsRow = Configs.LkpPhysExamsRow || (Configs.LkpPhysExamsRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpPhysExamsService;
        (function (LkpPhysExamsService) {
            LkpPhysExamsService.baseUrl = 'Configs/LkpPhysExams';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                LkpPhysExamsService[x] = function (r, s, o) {
                    return Q.serviceRequest(LkpPhysExamsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(LkpPhysExamsService = Configs.LkpPhysExamsService || (Configs.LkpPhysExamsService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpRecommandsForm = /** @class */ (function (_super) {
            __extends(LkpRecommandsForm, _super);
            function LkpRecommandsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!LkpRecommandsForm.init) {
                    LkpRecommandsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(LkpRecommandsForm, [
                        'RecommandName', w0
                    ]);
                }
                return _this;
            }
            LkpRecommandsForm.formKey = 'Configs.LkpRecommands';
            return LkpRecommandsForm;
        }(Serenity.PrefixedContext));
        Configs.LkpRecommandsForm = LkpRecommandsForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpRecommandsRow;
        (function (LkpRecommandsRow) {
            LkpRecommandsRow.idProperty = 'RecomId';
            LkpRecommandsRow.nameProperty = 'RecommandName';
            LkpRecommandsRow.localTextPrefix = 'Configs.LkpRecommands';
            LkpRecommandsRow.lookupKey = 'Configs.lkpRecommands';
            function getLookup() {
                return Q.getLookup('Configs.lkpRecommands');
            }
            LkpRecommandsRow.getLookup = getLookup;
        })(LkpRecommandsRow = Configs.LkpRecommandsRow || (Configs.LkpRecommandsRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpRecommandsService;
        (function (LkpRecommandsService) {
            LkpRecommandsService.baseUrl = 'Configs/LkpRecommands';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                LkpRecommandsService[x] = function (r, s, o) {
                    return Q.serviceRequest(LkpRecommandsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(LkpRecommandsService = Configs.LkpRecommandsService || (Configs.LkpRecommandsService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpTestTypesForm = /** @class */ (function (_super) {
            __extends(LkpTestTypesForm, _super);
            function LkpTestTypesForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!LkpTestTypesForm.init) {
                    LkpTestTypesForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(LkpTestTypesForm, [
                        'TestTypeName', w0
                    ]);
                }
                return _this;
            }
            LkpTestTypesForm.formKey = 'Configs.LkpTestTypes';
            return LkpTestTypesForm;
        }(Serenity.PrefixedContext));
        Configs.LkpTestTypesForm = LkpTestTypesForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpTestTypesRow;
        (function (LkpTestTypesRow) {
            LkpTestTypesRow.idProperty = 'TestTypeId';
            LkpTestTypesRow.nameProperty = 'TestTypeName';
            LkpTestTypesRow.localTextPrefix = 'Configs.LkpTestTypes';
            LkpTestTypesRow.lookupKey = 'Configs.LkpTestTypes';
            function getLookup() {
                return Q.getLookup('Configs.LkpTestTypes');
            }
            LkpTestTypesRow.getLookup = getLookup;
        })(LkpTestTypesRow = Configs.LkpTestTypesRow || (Configs.LkpTestTypesRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpTestTypesService;
        (function (LkpTestTypesService) {
            LkpTestTypesService.baseUrl = 'Configs/LkpTestTypes';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                LkpTestTypesService[x] = function (r, s, o) {
                    return Q.serviceRequest(LkpTestTypesService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(LkpTestTypesService = Configs.LkpTestTypesService || (Configs.LkpTestTypesService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpUnitForm = /** @class */ (function (_super) {
            __extends(LkpUnitForm, _super);
            function LkpUnitForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!LkpUnitForm.init) {
                    LkpUnitForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(LkpUnitForm, [
                        'UnitName', w0
                    ]);
                }
                return _this;
            }
            LkpUnitForm.formKey = 'Configs.LkpUnit';
            return LkpUnitForm;
        }(Serenity.PrefixedContext));
        Configs.LkpUnitForm = LkpUnitForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpUnitRow;
        (function (LkpUnitRow) {
            LkpUnitRow.idProperty = 'UnitId';
            LkpUnitRow.nameProperty = 'UnitName';
            LkpUnitRow.localTextPrefix = 'Configs.LkpUnit';
            LkpUnitRow.lookupKey = 'Configs.lkpUnit';
            function getLookup() {
                return Q.getLookup('Configs.lkpUnit');
            }
            LkpUnitRow.getLookup = getLookup;
        })(LkpUnitRow = Configs.LkpUnitRow || (Configs.LkpUnitRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpUnitService;
        (function (LkpUnitService) {
            LkpUnitService.baseUrl = 'Configs/LkpUnit';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                LkpUnitService[x] = function (r, s, o) {
                    return Q.serviceRequest(LkpUnitService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(LkpUnitService = Configs.LkpUnitService || (Configs.LkpUnitService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpVendorForm = /** @class */ (function (_super) {
            __extends(LkpVendorForm, _super);
            function LkpVendorForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!LkpVendorForm.init) {
                    LkpVendorForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.IntegerEditor;
                    var w2 = s.MaskedEditor;
                    Q.initFormType(LkpVendorForm, [
                        'VendorName', w0,
                        'VendorType', w0,
                        'VendorRegNo', w1,
                        'Email', w0,
                        'CellPhoneNo', w2
                    ]);
                }
                return _this;
            }
            LkpVendorForm.formKey = 'Configs.LkpVendor';
            return LkpVendorForm;
        }(Serenity.PrefixedContext));
        Configs.LkpVendorForm = LkpVendorForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpVendorRow;
        (function (LkpVendorRow) {
            LkpVendorRow.idProperty = 'VendorId';
            LkpVendorRow.nameProperty = 'VendorName';
            LkpVendorRow.localTextPrefix = 'Configs.LkpVendor';
            LkpVendorRow.lookupKey = 'Configs.lkpVendor';
            function getLookup() {
                return Q.getLookup('Configs.lkpVendor');
            }
            LkpVendorRow.getLookup = getLookup;
        })(LkpVendorRow = Configs.LkpVendorRow || (Configs.LkpVendorRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpVendorService;
        (function (LkpVendorService) {
            LkpVendorService.baseUrl = 'Configs/LkpVendor';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                LkpVendorService[x] = function (r, s, o) {
                    return Q.serviceRequest(LkpVendorService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(LkpVendorService = Configs.LkpVendorService || (Configs.LkpVendorService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var StagesForm = /** @class */ (function (_super) {
            __extends(StagesForm, _super);
            function StagesForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!StagesForm.init) {
                    StagesForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(StagesForm, [
                        'Stagename', w0
                    ]);
                }
                return _this;
            }
            StagesForm.formKey = 'Configs.Stages';
            return StagesForm;
        }(Serenity.PrefixedContext));
        Configs.StagesForm = StagesForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var StagesRow;
        (function (StagesRow) {
            StagesRow.idProperty = 'StageId';
            StagesRow.nameProperty = 'Stagename';
            StagesRow.localTextPrefix = 'Configs.Stages';
            StagesRow.lookupKey = 'Configs.Stages';
            function getLookup() {
                return Q.getLookup('Configs.Stages');
            }
            StagesRow.getLookup = getLookup;
        })(StagesRow = Configs.StagesRow || (Configs.StagesRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var StagesService;
        (function (StagesService) {
            StagesService.baseUrl = 'Configs/Stages';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                StagesService[x] = function (r, s, o) {
                    return Q.serviceRequest(StagesService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(StagesService = Configs.StagesService || (Configs.StagesService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblAbortionTypeForm = /** @class */ (function (_super) {
            __extends(TblAbortionTypeForm, _super);
            function TblAbortionTypeForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblAbortionTypeForm.init) {
                    TblAbortionTypeForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(TblAbortionTypeForm, [
                        'AbortionTypeDari', w0,
                        'AbortionTypePashto', w0,
                        'AbortionTypeEn', w0
                    ]);
                }
                return _this;
            }
            TblAbortionTypeForm.formKey = 'Configs.TblAbortionType';
            return TblAbortionTypeForm;
        }(Serenity.PrefixedContext));
        Configs.TblAbortionTypeForm = TblAbortionTypeForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblAbortionTypeRow;
        (function (TblAbortionTypeRow) {
            TblAbortionTypeRow.idProperty = 'AbortionId';
            TblAbortionTypeRow.nameProperty = 'AbortionTypeDari';
            TblAbortionTypeRow.localTextPrefix = 'Configs.TblAbortionType';
            TblAbortionTypeRow.lookupKey = 'Configs.TblAbortionType';
            function getLookup() {
                return Q.getLookup('Configs.TblAbortionType');
            }
            TblAbortionTypeRow.getLookup = getLookup;
        })(TblAbortionTypeRow = Configs.TblAbortionTypeRow || (Configs.TblAbortionTypeRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblAbortionTypeService;
        (function (TblAbortionTypeService) {
            TblAbortionTypeService.baseUrl = 'Configs/TblAbortionType';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblAbortionTypeService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblAbortionTypeService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblAbortionTypeService = Configs.TblAbortionTypeService || (Configs.TblAbortionTypeService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblAgeTypesForm = /** @class */ (function (_super) {
            __extends(TblAgeTypesForm, _super);
            function TblAgeTypesForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblAgeTypesForm.init) {
                    TblAgeTypesForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(TblAgeTypesForm, [
                        'AgeTypeNameEn', w0,
                        'AgeTypeNameDari', w0,
                        'AgeTypeNamePashto', w0
                    ]);
                }
                return _this;
            }
            TblAgeTypesForm.formKey = 'Configs.TblAgeTypes';
            return TblAgeTypesForm;
        }(Serenity.PrefixedContext));
        Configs.TblAgeTypesForm = TblAgeTypesForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblAgeTypesRow;
        (function (TblAgeTypesRow) {
            TblAgeTypesRow.idProperty = 'AgetypeId';
            TblAgeTypesRow.nameProperty = 'AgeTypeName';
            TblAgeTypesRow.localTextPrefix = 'Configs.TblAgeTypes';
            TblAgeTypesRow.lookupKey = 'Configs.TblAgeTypes';
            function getLookup() {
                return Q.getLookup('Configs.TblAgeTypes');
            }
            TblAgeTypesRow.getLookup = getLookup;
        })(TblAgeTypesRow = Configs.TblAgeTypesRow || (Configs.TblAgeTypesRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblAgeTypesService;
        (function (TblAgeTypesService) {
            TblAgeTypesService.baseUrl = 'Configs/TblAgeTypes';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblAgeTypesService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblAgeTypesService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblAgeTypesService = Configs.TblAgeTypesService || (Configs.TblAgeTypesService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblBloodGroupForm = /** @class */ (function (_super) {
            __extends(TblBloodGroupForm, _super);
            function TblBloodGroupForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblBloodGroupForm.init) {
                    TblBloodGroupForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(TblBloodGroupForm, [
                        'BloodGroup', w0
                    ]);
                }
                return _this;
            }
            TblBloodGroupForm.formKey = 'Configs.TblBloodGroup';
            return TblBloodGroupForm;
        }(Serenity.PrefixedContext));
        Configs.TblBloodGroupForm = TblBloodGroupForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblBloodGroupRow;
        (function (TblBloodGroupRow) {
            TblBloodGroupRow.idProperty = 'BloodGroupId';
            TblBloodGroupRow.nameProperty = 'BloodGroup';
            TblBloodGroupRow.localTextPrefix = 'Configs.TblBloodGroup';
            TblBloodGroupRow.lookupKey = 'Configs.TblBloodGroup';
            function getLookup() {
                return Q.getLookup('Configs.TblBloodGroup');
            }
            TblBloodGroupRow.getLookup = getLookup;
        })(TblBloodGroupRow = Configs.TblBloodGroupRow || (Configs.TblBloodGroupRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblBloodGroupService;
        (function (TblBloodGroupService) {
            TblBloodGroupService.baseUrl = 'Configs/TblBloodGroup';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblBloodGroupService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblBloodGroupService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblBloodGroupService = Configs.TblBloodGroupService || (Configs.TblBloodGroupService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblCaseTypesForm = /** @class */ (function (_super) {
            __extends(TblCaseTypesForm, _super);
            function TblCaseTypesForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblCaseTypesForm.init) {
                    TblCaseTypesForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(TblCaseTypesForm, [
                        'CasetypeEn', w0,
                        'CasetypeDari', w0,
                        'CasetypePashto', w0
                    ]);
                }
                return _this;
            }
            TblCaseTypesForm.formKey = 'Configs.TblCaseTypes';
            return TblCaseTypesForm;
        }(Serenity.PrefixedContext));
        Configs.TblCaseTypesForm = TblCaseTypesForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblCaseTypesRow;
        (function (TblCaseTypesRow) {
            TblCaseTypesRow.idProperty = 'CaseId';
            TblCaseTypesRow.nameProperty = 'CaseTypeName';
            TblCaseTypesRow.localTextPrefix = 'Configs.TblCaseTypes';
            TblCaseTypesRow.lookupKey = 'Configs.TblCaseTypes';
            function getLookup() {
                return Q.getLookup('Configs.TblCaseTypes');
            }
            TblCaseTypesRow.getLookup = getLookup;
        })(TblCaseTypesRow = Configs.TblCaseTypesRow || (Configs.TblCaseTypesRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblCaseTypesService;
        (function (TblCaseTypesService) {
            TblCaseTypesService.baseUrl = 'Configs/TblCaseTypes';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblCaseTypesService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblCaseTypesService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblCaseTypesService = Configs.TblCaseTypesService || (Configs.TblCaseTypesService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblChildForm = /** @class */ (function (_super) {
            __extends(TblChildForm, _super);
            function TblChildForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblChildForm.init) {
                    TblChildForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(TblChildForm, [
                        'ChildDari', w0,
                        'ChildPashto', w0,
                        'ChildEn', w0
                    ]);
                }
                return _this;
            }
            TblChildForm.formKey = 'Configs.TblChild';
            return TblChildForm;
        }(Serenity.PrefixedContext));
        Configs.TblChildForm = TblChildForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblChildRow;
        (function (TblChildRow) {
            TblChildRow.idProperty = 'ChildId';
            TblChildRow.nameProperty = 'NbChild';
            TblChildRow.localTextPrefix = 'Configs.TblChild';
            TblChildRow.lookupKey = 'Configs.TblChild';
            function getLookup() {
                return Q.getLookup('Configs.TblChild');
            }
            TblChildRow.getLookup = getLookup;
        })(TblChildRow = Configs.TblChildRow || (Configs.TblChildRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblChildService;
        (function (TblChildService) {
            TblChildService.baseUrl = 'Configs/TblChild';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblChildService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblChildService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblChildService = Configs.TblChildService || (Configs.TblChildService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblDeptForm = /** @class */ (function (_super) {
            __extends(TblDeptForm, _super);
            function TblDeptForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblDeptForm.init) {
                    TblDeptForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(TblDeptForm, [
                        'DeptName', w0,
                        'DeptNameD', w0
                    ]);
                }
                return _this;
            }
            TblDeptForm.formKey = 'Configs.TblDept';
            return TblDeptForm;
        }(Serenity.PrefixedContext));
        Configs.TblDeptForm = TblDeptForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblDeptRow;
        (function (TblDeptRow) {
            TblDeptRow.idProperty = 'DpId';
            TblDeptRow.nameProperty = 'DeptName';
            TblDeptRow.localTextPrefix = 'Configs.TblDept';
            TblDeptRow.lookupKey = 'Configs.TblDept';
            function getLookup() {
                return Q.getLookup('Configs.TblDept');
            }
            TblDeptRow.getLookup = getLookup;
        })(TblDeptRow = Configs.TblDeptRow || (Configs.TblDeptRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblDeptService;
        (function (TblDeptService) {
            TblDeptService.baseUrl = 'Configs/TblDept';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblDeptService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblDeptService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblDeptService = Configs.TblDeptService || (Configs.TblDeptService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblDiagnosisForm = /** @class */ (function (_super) {
            __extends(TblDiagnosisForm, _super);
            function TblDiagnosisForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblDiagnosisForm.init) {
                    TblDiagnosisForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(TblDiagnosisForm, [
                        'DiagnosisDari', w0,
                        'DiagnosisPashto', w0,
                        'DiagnosisEn', w0
                    ]);
                }
                return _this;
            }
            TblDiagnosisForm.formKey = 'Configs.TblDiagnosis';
            return TblDiagnosisForm;
        }(Serenity.PrefixedContext));
        Configs.TblDiagnosisForm = TblDiagnosisForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblDiagnosisRow;
        (function (TblDiagnosisRow) {
            TblDiagnosisRow.idProperty = 'DiagnosisId';
            TblDiagnosisRow.nameProperty = 'DiagNosis';
            TblDiagnosisRow.localTextPrefix = 'Configs.TblDiagnosis';
            TblDiagnosisRow.lookupKey = 'Configs.TblDiagnosis';
            function getLookup() {
                return Q.getLookup('Configs.TblDiagnosis');
            }
            TblDiagnosisRow.getLookup = getLookup;
        })(TblDiagnosisRow = Configs.TblDiagnosisRow || (Configs.TblDiagnosisRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblDiagnosisService;
        (function (TblDiagnosisService) {
            TblDiagnosisService.baseUrl = 'Configs/TblDiagnosis';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblDiagnosisService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblDiagnosisService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblDiagnosisService = Configs.TblDiagnosisService || (Configs.TblDiagnosisService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblDiseasesCategoryForm = /** @class */ (function (_super) {
            __extends(TblDiseasesCategoryForm, _super);
            function TblDiseasesCategoryForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblDiseasesCategoryForm.init) {
                    TblDiseasesCategoryForm.init = true;
                    var s = Serenity;
                    var w0 = s.IntegerEditor;
                    var w1 = s.StringEditor;
                    Q.initFormType(TblDiseasesCategoryForm, [
                        'Wardid', w0,
                        'DiseasesCategory', w1,
                        'DiseasesCatDari', w1,
                        'DiseasesCatPashto', w1
                    ]);
                }
                return _this;
            }
            TblDiseasesCategoryForm.formKey = 'Configs.TblDiseasesCategory';
            return TblDiseasesCategoryForm;
        }(Serenity.PrefixedContext));
        Configs.TblDiseasesCategoryForm = TblDiseasesCategoryForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblDiseasesCategoryRow;
        (function (TblDiseasesCategoryRow) {
            TblDiseasesCategoryRow.idProperty = 'Id';
            TblDiseasesCategoryRow.nameProperty = 'DiseasesCategory';
            TblDiseasesCategoryRow.localTextPrefix = 'Configs.TblDiseasesCategory';
        })(TblDiseasesCategoryRow = Configs.TblDiseasesCategoryRow || (Configs.TblDiseasesCategoryRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblDiseasesCategoryService;
        (function (TblDiseasesCategoryService) {
            TblDiseasesCategoryService.baseUrl = 'Configs/TblDiseasesCategory';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblDiseasesCategoryService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblDiseasesCategoryService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblDiseasesCategoryService = Configs.TblDiseasesCategoryService || (Configs.TblDiseasesCategoryService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblEducationForm = /** @class */ (function (_super) {
            __extends(TblEducationForm, _super);
            function TblEducationForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblEducationForm.init) {
                    TblEducationForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(TblEducationForm, [
                        'EducationDari', w0,
                        'EducationEng', w0
                    ]);
                }
                return _this;
            }
            TblEducationForm.formKey = 'Configs.TblEducation';
            return TblEducationForm;
        }(Serenity.PrefixedContext));
        Configs.TblEducationForm = TblEducationForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblEducationRow;
        (function (TblEducationRow) {
            TblEducationRow.idProperty = 'Eid';
            TblEducationRow.nameProperty = 'EducationName';
            TblEducationRow.localTextPrefix = 'Configs.TblEducation';
            TblEducationRow.lookupKey = 'Configs.TblEducation';
            function getLookup() {
                return Q.getLookup('Configs.TblEducation');
            }
            TblEducationRow.getLookup = getLookup;
        })(TblEducationRow = Configs.TblEducationRow || (Configs.TblEducationRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblEducationService;
        (function (TblEducationService) {
            TblEducationService.baseUrl = 'Configs/TblEducation';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblEducationService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblEducationService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblEducationService = Configs.TblEducationService || (Configs.TblEducationService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblExaminationsDetailsForm = /** @class */ (function (_super) {
            __extends(TblExaminationsDetailsForm, _super);
            function TblExaminationsDetailsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblExaminationsDetailsForm.init) {
                    TblExaminationsDetailsForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    var w1 = s.StringEditor;
                    Q.initFormType(TblExaminationsDetailsForm, [
                        'DpId', w0,
                        'EdName', w1
                    ]);
                }
                return _this;
            }
            TblExaminationsDetailsForm.formKey = 'Configs.TblExaminationsDetails';
            return TblExaminationsDetailsForm;
        }(Serenity.PrefixedContext));
        Configs.TblExaminationsDetailsForm = TblExaminationsDetailsForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblExaminationsDetailsRow;
        (function (TblExaminationsDetailsRow) {
            TblExaminationsDetailsRow.idProperty = 'Edid';
            TblExaminationsDetailsRow.nameProperty = 'EdName';
            TblExaminationsDetailsRow.localTextPrefix = 'Configs.TblExaminationsDetails';
            TblExaminationsDetailsRow.lookupKey = 'Configs.TblExaminationsDetails';
            function getLookup() {
                return Q.getLookup('Configs.TblExaminationsDetails');
            }
            TblExaminationsDetailsRow.getLookup = getLookup;
        })(TblExaminationsDetailsRow = Configs.TblExaminationsDetailsRow || (Configs.TblExaminationsDetailsRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblExaminationsDetailsService;
        (function (TblExaminationsDetailsService) {
            TblExaminationsDetailsService.baseUrl = 'Configs/TblExaminationsDetails';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblExaminationsDetailsService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblExaminationsDetailsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblExaminationsDetailsService = Configs.TblExaminationsDetailsService || (Configs.TblExaminationsDetailsService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblGenderForm = /** @class */ (function (_super) {
            __extends(TblGenderForm, _super);
            function TblGenderForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblGenderForm.init) {
                    TblGenderForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(TblGenderForm, [
                        'GenderEng', w0,
                        'GenderDa', w0,
                        'GenderPs', w0
                    ]);
                }
                return _this;
            }
            TblGenderForm.formKey = 'Configs.TblGender';
            return TblGenderForm;
        }(Serenity.PrefixedContext));
        Configs.TblGenderForm = TblGenderForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblGenderRow;
        (function (TblGenderRow) {
            TblGenderRow.idProperty = 'GenderId';
            TblGenderRow.nameProperty = 'Gender';
            TblGenderRow.localTextPrefix = 'Configs.TblGender';
            TblGenderRow.lookupKey = 'Conigs.TblGender';
            function getLookup() {
                return Q.getLookup('Conigs.TblGender');
            }
            TblGenderRow.getLookup = getLookup;
        })(TblGenderRow = Configs.TblGenderRow || (Configs.TblGenderRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblGenderService;
        (function (TblGenderService) {
            TblGenderService.baseUrl = 'Configs/TblGender';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblGenderService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblGenderService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblGenderService = Configs.TblGenderService || (Configs.TblGenderService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblMaritalStatusForm = /** @class */ (function (_super) {
            __extends(TblMaritalStatusForm, _super);
            function TblMaritalStatusForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblMaritalStatusForm.init) {
                    TblMaritalStatusForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(TblMaritalStatusForm, [
                        'PatMaritalStatusEng', w0,
                        'PatMaritalStatusDari', w0
                    ]);
                }
                return _this;
            }
            TblMaritalStatusForm.formKey = 'Configs.TblMaritalStatus';
            return TblMaritalStatusForm;
        }(Serenity.PrefixedContext));
        Configs.TblMaritalStatusForm = TblMaritalStatusForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblMaritalStatusRow;
        (function (TblMaritalStatusRow) {
            TblMaritalStatusRow.idProperty = 'MariId';
            TblMaritalStatusRow.nameProperty = 'MaritalStatus';
            TblMaritalStatusRow.localTextPrefix = 'Configs.TblMaritalStatus';
            TblMaritalStatusRow.lookupKey = 'Configs.TblMaritalStatus';
            function getLookup() {
                return Q.getLookup('Configs.TblMaritalStatus');
            }
            TblMaritalStatusRow.getLookup = getLookup;
        })(TblMaritalStatusRow = Configs.TblMaritalStatusRow || (Configs.TblMaritalStatusRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblMaritalStatusService;
        (function (TblMaritalStatusService) {
            TblMaritalStatusService.baseUrl = 'Configs/TblMaritalStatus';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblMaritalStatusService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblMaritalStatusService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblMaritalStatusService = Configs.TblMaritalStatusService || (Configs.TblMaritalStatusService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblNbResultForm = /** @class */ (function (_super) {
            __extends(TblNbResultForm, _super);
            function TblNbResultForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblNbResultForm.init) {
                    TblNbResultForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(TblNbResultForm, [
                        'NbResultDari', w0,
                        'NbResultPashto', w0,
                        'NbResultEn', w0
                    ]);
                }
                return _this;
            }
            TblNbResultForm.formKey = 'Configs.TblNbResult';
            return TblNbResultForm;
        }(Serenity.PrefixedContext));
        Configs.TblNbResultForm = TblNbResultForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblNbResultRow;
        (function (TblNbResultRow) {
            TblNbResultRow.idProperty = 'NbResultId';
            TblNbResultRow.nameProperty = 'NbResult';
            TblNbResultRow.localTextPrefix = 'Configs.TblNbResult';
            TblNbResultRow.lookupKey = 'Configs.TblNbResult';
            function getLookup() {
                return Q.getLookup('Configs.TblNbResult');
            }
            TblNbResultRow.getLookup = getLookup;
        })(TblNbResultRow = Configs.TblNbResultRow || (Configs.TblNbResultRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblNbResultService;
        (function (TblNbResultService) {
            TblNbResultService.baseUrl = 'Configs/TblNbResult';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblNbResultService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblNbResultService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblNbResultService = Configs.TblNbResultService || (Configs.TblNbResultService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblNbstatusForm = /** @class */ (function (_super) {
            __extends(TblNbstatusForm, _super);
            function TblNbstatusForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblNbstatusForm.init) {
                    TblNbstatusForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(TblNbstatusForm, [
                        'NbstatusDari', w0,
                        'NbstatusPashto', w0,
                        'NbstatusEng', w0
                    ]);
                }
                return _this;
            }
            TblNbstatusForm.formKey = 'Configs.TblNbstatus';
            return TblNbstatusForm;
        }(Serenity.PrefixedContext));
        Configs.TblNbstatusForm = TblNbstatusForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblNbstatusRow;
        (function (TblNbstatusRow) {
            TblNbstatusRow.idProperty = 'NbstatusId';
            TblNbstatusRow.nameProperty = 'NbStatus';
            TblNbstatusRow.localTextPrefix = 'Configs.TblNbstatus';
            TblNbstatusRow.lookupKey = 'Configs.TblNbstatus';
            function getLookup() {
                return Q.getLookup('Configs.TblNbstatus');
            }
            TblNbstatusRow.getLookup = getLookup;
        })(TblNbstatusRow = Configs.TblNbstatusRow || (Configs.TblNbstatusRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblNbstatusService;
        (function (TblNbstatusService) {
            TblNbstatusService.baseUrl = 'Configs/TblNbstatus';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblNbstatusService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblNbstatusService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblNbstatusService = Configs.TblNbstatusService || (Configs.TblNbstatusService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblNbWeightForm = /** @class */ (function (_super) {
            __extends(TblNbWeightForm, _super);
            function TblNbWeightForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblNbWeightForm.init) {
                    TblNbWeightForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(TblNbWeightForm, [
                        'NbWeightDari', w0,
                        'NbWeightPashto', w0,
                        'NbWeightEn', w0
                    ]);
                }
                return _this;
            }
            TblNbWeightForm.formKey = 'Configs.TblNbWeight';
            return TblNbWeightForm;
        }(Serenity.PrefixedContext));
        Configs.TblNbWeightForm = TblNbWeightForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblNbWeightRow;
        (function (TblNbWeightRow) {
            TblNbWeightRow.idProperty = 'NbWeightId';
            TblNbWeightRow.nameProperty = 'NbWeight';
            TblNbWeightRow.localTextPrefix = 'Configs.TblNbWeight';
            TblNbWeightRow.lookupKey = 'Configs.TblNbWeight';
            function getLookup() {
                return Q.getLookup('Configs.TblNbWeight');
            }
            TblNbWeightRow.getLookup = getLookup;
        })(TblNbWeightRow = Configs.TblNbWeightRow || (Configs.TblNbWeightRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblNbWeightService;
        (function (TblNbWeightService) {
            TblNbWeightService.baseUrl = 'Configs/TblNbWeight';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblNbWeightService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblNbWeightService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblNbWeightService = Configs.TblNbWeightService || (Configs.TblNbWeightService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblOccupationForm = /** @class */ (function (_super) {
            __extends(TblOccupationForm, _super);
            function TblOccupationForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblOccupationForm.init) {
                    TblOccupationForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(TblOccupationForm, [
                        'OccupationEng', w0,
                        'OccupationDari', w0
                    ]);
                }
                return _this;
            }
            TblOccupationForm.formKey = 'Configs.TblOccupation';
            return TblOccupationForm;
        }(Serenity.PrefixedContext));
        Configs.TblOccupationForm = TblOccupationForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblOccupationRow;
        (function (TblOccupationRow) {
            TblOccupationRow.idProperty = 'Oid';
            TblOccupationRow.nameProperty = 'OccupationName';
            TblOccupationRow.localTextPrefix = 'Configs.TblOccupation';
            TblOccupationRow.lookupKey = 'Configs.TblOccupation';
            function getLookup() {
                return Q.getLookup('Configs.TblOccupation');
            }
            TblOccupationRow.getLookup = getLookup;
        })(TblOccupationRow = Configs.TblOccupationRow || (Configs.TblOccupationRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblOccupationService;
        (function (TblOccupationService) {
            TblOccupationService.baseUrl = 'Configs/TblOccupation';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblOccupationService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblOccupationService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblOccupationService = Configs.TblOccupationService || (Configs.TblOccupationService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblOutcomesMotherForm = /** @class */ (function (_super) {
            __extends(TblOutcomesMotherForm, _super);
            function TblOutcomesMotherForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblOutcomesMotherForm.init) {
                    TblOutcomesMotherForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(TblOutcomesMotherForm, [
                        'OutcomeEng', w0,
                        'OutcomeDari', w0
                    ]);
                }
                return _this;
            }
            TblOutcomesMotherForm.formKey = 'Configs.TblOutcomesMother';
            return TblOutcomesMotherForm;
        }(Serenity.PrefixedContext));
        Configs.TblOutcomesMotherForm = TblOutcomesMotherForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblOutcomesMotherRow;
        (function (TblOutcomesMotherRow) {
            TblOutcomesMotherRow.idProperty = 'OutcomeId';
            TblOutcomesMotherRow.nameProperty = 'OutcomeName';
            TblOutcomesMotherRow.localTextPrefix = 'Configs.TblOutcomesMother';
            TblOutcomesMotherRow.lookupKey = 'Configs.TblOutcomesMother';
            function getLookup() {
                return Q.getLookup('Configs.TblOutcomesMother');
            }
            TblOutcomesMotherRow.getLookup = getLookup;
        })(TblOutcomesMotherRow = Configs.TblOutcomesMotherRow || (Configs.TblOutcomesMotherRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblOutcomesMotherService;
        (function (TblOutcomesMotherService) {
            TblOutcomesMotherService.baseUrl = 'Configs/TblOutcomesMother';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblOutcomesMotherService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblOutcomesMotherService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblOutcomesMotherService = Configs.TblOutcomesMotherService || (Configs.TblOutcomesMotherService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblPositionsForm = /** @class */ (function (_super) {
            __extends(TblPositionsForm, _super);
            function TblPositionsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblPositionsForm.init) {
                    TblPositionsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.IntegerEditor;
                    var w2 = s.DateEditor;
                    Q.initFormType(TblPositionsForm, [
                        'EmpId', w0,
                        'DeptId', w1,
                        'ProId', w1,
                        'PosDate', w2,
                        'PosDateH', w0,
                        'UserName', w0,
                        'LastUpdated', w2,
                        'TenantId', w1
                    ]);
                }
                return _this;
            }
            TblPositionsForm.formKey = 'Configs.TblPositions';
            return TblPositionsForm;
        }(Serenity.PrefixedContext));
        Configs.TblPositionsForm = TblPositionsForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblPositionsRow;
        (function (TblPositionsRow) {
            TblPositionsRow.idProperty = 'PosId';
            TblPositionsRow.nameProperty = 'EmpId';
            TblPositionsRow.localTextPrefix = 'Configs.TblPositions';
        })(TblPositionsRow = Configs.TblPositionsRow || (Configs.TblPositionsRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblPositionsService;
        (function (TblPositionsService) {
            TblPositionsService.baseUrl = 'Configs/TblPositions';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblPositionsService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblPositionsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblPositionsService = Configs.TblPositionsService || (Configs.TblPositionsService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblProfessionsForm = /** @class */ (function (_super) {
            __extends(TblProfessionsForm, _super);
            function TblProfessionsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblProfessionsForm.init) {
                    TblProfessionsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(TblProfessionsForm, [
                        'ProName', w0,
                        'ProNameD', w0
                    ]);
                }
                return _this;
            }
            TblProfessionsForm.formKey = 'Configs.TblProfessions';
            return TblProfessionsForm;
        }(Serenity.PrefixedContext));
        Configs.TblProfessionsForm = TblProfessionsForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblProfessionsRow;
        (function (TblProfessionsRow) {
            TblProfessionsRow.idProperty = 'ProId';
            TblProfessionsRow.nameProperty = 'ProName';
            TblProfessionsRow.localTextPrefix = 'Configs.TblProfessions';
        })(TblProfessionsRow = Configs.TblProfessionsRow || (Configs.TblProfessionsRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblProfessionsService;
        (function (TblProfessionsService) {
            TblProfessionsService.baseUrl = 'Configs/TblProfessions';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblProfessionsService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblProfessionsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblProfessionsService = Configs.TblProfessionsService || (Configs.TblProfessionsService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblRelationForm = /** @class */ (function (_super) {
            __extends(TblRelationForm, _super);
            function TblRelationForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblRelationForm.init) {
                    TblRelationForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(TblRelationForm, [
                        'RelationNameEng', w0,
                        'RelationName', w0
                    ]);
                }
                return _this;
            }
            TblRelationForm.formKey = 'Configs.TblRelation';
            return TblRelationForm;
        }(Serenity.PrefixedContext));
        Configs.TblRelationForm = TblRelationForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblRelationRow;
        (function (TblRelationRow) {
            TblRelationRow.idProperty = 'RelationId';
            TblRelationRow.nameProperty = 'Relation';
            TblRelationRow.localTextPrefix = 'Configs.TblRelation';
            TblRelationRow.lookupKey = 'Configs.TblRelation';
            function getLookup() {
                return Q.getLookup('Configs.TblRelation');
            }
            TblRelationRow.getLookup = getLookup;
        })(TblRelationRow = Configs.TblRelationRow || (Configs.TblRelationRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblRelationService;
        (function (TblRelationService) {
            TblRelationService.baseUrl = 'Configs/TblRelation';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblRelationService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblRelationService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblRelationService = Configs.TblRelationService || (Configs.TblRelationService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblWardDiseaseRow;
        (function (TblWardDiseaseRow) {
            TblWardDiseaseRow.idProperty = 'WId';
            TblWardDiseaseRow.nameProperty = 'DiseaseDariName';
            TblWardDiseaseRow.localTextPrefix = 'Configs.TblWardDisease';
            TblWardDiseaseRow.lookupKey = 'Configs.TblWardDisease';
            function getLookup() {
                return Q.getLookup('Configs.TblWardDisease');
            }
            TblWardDiseaseRow.getLookup = getLookup;
        })(TblWardDiseaseRow = Configs.TblWardDiseaseRow || (Configs.TblWardDiseaseRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblWardDiseasesForm = /** @class */ (function (_super) {
            __extends(TblWardDiseasesForm, _super);
            function TblWardDiseasesForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblWardDiseasesForm.init) {
                    TblWardDiseasesForm.init = true;
                    var s = Serenity;
                    var w0 = s.IntegerEditor;
                    var w1 = s.StringEditor;
                    var w2 = s.LookupEditor;
                    var w3 = s.DecimalEditor;
                    Q.initFormType(TblWardDiseasesForm, [
                        'WardCode', w0,
                        'DiseasesCategory', w1,
                        'DiseasesCat', w0,
                        'DiseasesName', w1,
                        'DiseaseDariName', w1,
                        'WvId', w2,
                        'DiseasesCode', w1,
                        'HmirCode', w1,
                        'HmirCodeId', w3,
                        'Status', w3
                    ]);
                }
                return _this;
            }
            TblWardDiseasesForm.formKey = 'Configs.TblWardDiseases';
            return TblWardDiseasesForm;
        }(Serenity.PrefixedContext));
        Configs.TblWardDiseasesForm = TblWardDiseasesForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblWardDiseasesRow;
        (function (TblWardDiseasesRow) {
            TblWardDiseasesRow.idProperty = 'WId';
            TblWardDiseasesRow.nameProperty = 'DiseaseName';
            TblWardDiseasesRow.localTextPrefix = 'Configs.TblWardDiseases';
            TblWardDiseasesRow.lookupKey = 'Configs.TblWardDiseases';
            function getLookup() {
                return Q.getLookup('Configs.TblWardDiseases');
            }
            TblWardDiseasesRow.getLookup = getLookup;
        })(TblWardDiseasesRow = Configs.TblWardDiseasesRow || (Configs.TblWardDiseasesRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblWardDiseasesService;
        (function (TblWardDiseasesService) {
            TblWardDiseasesService.baseUrl = 'Configs/TblWardDiseases';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblWardDiseasesService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblWardDiseasesService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblWardDiseasesService = Configs.TblWardDiseasesService || (Configs.TblWardDiseasesService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblWardForm = /** @class */ (function (_super) {
            __extends(TblWardForm, _super);
            function TblWardForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblWardForm.init) {
                    TblWardForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.IntegerEditor;
                    Q.initFormType(TblWardForm, [
                        'WardName', w0,
                        'WardNameD', w0,
                        'WardNumBeds', w1
                    ]);
                }
                return _this;
            }
            TblWardForm.formKey = 'Configs.TblWard';
            return TblWardForm;
        }(Serenity.PrefixedContext));
        Configs.TblWardForm = TblWardForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblWardRow;
        (function (TblWardRow) {
            TblWardRow.idProperty = 'WardId';
            TblWardRow.nameProperty = 'Ward';
            TblWardRow.localTextPrefix = 'Configs.TblWard';
            TblWardRow.lookupKey = 'Configs.TblWard';
            function getLookup() {
                return Q.getLookup('Configs.TblWard');
            }
            TblWardRow.getLookup = getLookup;
        })(TblWardRow = Configs.TblWardRow || (Configs.TblWardRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblWardService;
        (function (TblWardService) {
            TblWardService.baseUrl = 'Configs/TblWard';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblWardService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblWardService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblWardService = Configs.TblWardService || (Configs.TblWardService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblWrdVarForm = /** @class */ (function (_super) {
            __extends(TblWrdVarForm, _super);
            function TblWrdVarForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblWrdVarForm.init) {
                    TblWrdVarForm.init = true;
                    var s = Serenity;
                    var w0 = s.IntegerEditor;
                    var w1 = s.StringEditor;
                    Q.initFormType(TblWrdVarForm, [
                        'Wrdid', w0,
                        'DiagnTreatComp', w0,
                        'VarNameEnglish', w1,
                        'VarNameDari', w1,
                        'VarNamePashto', w1,
                        'VarSpecification', w1
                    ]);
                }
                return _this;
            }
            TblWrdVarForm.formKey = 'Configs.TblWrdVar';
            return TblWrdVarForm;
        }(Serenity.PrefixedContext));
        Configs.TblWrdVarForm = TblWrdVarForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblWrdVarRow;
        (function (TblWrdVarRow) {
            TblWrdVarRow.idProperty = 'Wvid';
            TblWrdVarRow.nameProperty = 'WwardDiseaseName';
            TblWrdVarRow.localTextPrefix = 'Configs.TblWrdVar';
            TblWrdVarRow.lookupKey = 'Configs.TblWrdVar';
            function getLookup() {
                return Q.getLookup('Configs.TblWrdVar');
            }
            TblWrdVarRow.getLookup = getLookup;
        })(TblWrdVarRow = Configs.TblWrdVarRow || (Configs.TblWrdVarRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblWrdVarService;
        (function (TblWrdVarService) {
            TblWrdVarService.baseUrl = 'Configs/TblWrdVar';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblWrdVarService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblWrdVarService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblWrdVarService = Configs.TblWrdVarService || (Configs.TblWrdVarService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TopographyMainForm = /** @class */ (function (_super) {
            __extends(TopographyMainForm, _super);
            function TopographyMainForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TopographyMainForm.init) {
                    TopographyMainForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(TopographyMainForm, [
                        'TopographyMName', w0,
                        'Icd0Code', w0
                    ]);
                }
                return _this;
            }
            TopographyMainForm.formKey = 'Configs.TopographyMain';
            return TopographyMainForm;
        }(Serenity.PrefixedContext));
        Configs.TopographyMainForm = TopographyMainForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TopographyMainRow;
        (function (TopographyMainRow) {
            TopographyMainRow.idProperty = 'TopomainId';
            TopographyMainRow.nameProperty = 'TopographyMName';
            TopographyMainRow.localTextPrefix = 'Configs.TopographyMain';
            TopographyMainRow.lookupKey = 'Configs.TopographyMain';
            function getLookup() {
                return Q.getLookup('Configs.TopographyMain');
            }
            TopographyMainRow.getLookup = getLookup;
        })(TopographyMainRow = Configs.TopographyMainRow || (Configs.TopographyMainRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TopographyMainService;
        (function (TopographyMainService) {
            TopographyMainService.baseUrl = 'Configs/TopographyMain';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TopographyMainService[x] = function (r, s, o) {
                    return Q.serviceRequest(TopographyMainService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TopographyMainService = Configs.TopographyMainService || (Configs.TopographyMainService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TopographySubForm = /** @class */ (function (_super) {
            __extends(TopographySubForm, _super);
            function TopographySubForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TopographySubForm.init) {
                    TopographySubForm.init = true;
                    var s = Serenity;
                    var w0 = s.IntegerEditor;
                    var w1 = s.StringEditor;
                    var w2 = s.LookupEditor;
                    Q.initFormType(TopographySubForm, [
                        'Icd0Code', w0,
                        'TopographySName', w1,
                        'TopomainId', w2
                    ]);
                }
                return _this;
            }
            TopographySubForm.formKey = 'Configs.TopographySub';
            return TopographySubForm;
        }(Serenity.PrefixedContext));
        Configs.TopographySubForm = TopographySubForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TopographySubRow;
        (function (TopographySubRow) {
            TopographySubRow.idProperty = 'ToposubId';
            TopographySubRow.nameProperty = 'TopographySName';
            TopographySubRow.localTextPrefix = 'Configs.TopographySub';
            TopographySubRow.lookupKey = 'Configs.TopographySub';
            function getLookup() {
                return Q.getLookup('Configs.TopographySub');
            }
            TopographySubRow.getLookup = getLookup;
        })(TopographySubRow = Configs.TopographySubRow || (Configs.TopographySubRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TopographySubService;
        (function (TopographySubService) {
            TopographySubService.baseUrl = 'Configs/TopographySub';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TopographySubService[x] = function (r, s, o) {
                    return Q.serviceRequest(TopographySubService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TopographySubService = Configs.TopographySubService || (Configs.TopographySubService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TypeofvisitForm = /** @class */ (function (_super) {
            __extends(TypeofvisitForm, _super);
            function TypeofvisitForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TypeofvisitForm.init) {
                    TypeofvisitForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(TypeofvisitForm, [
                        'TypeOfVisit', w0
                    ]);
                }
                return _this;
            }
            TypeofvisitForm.formKey = 'Configs.Typeofvisit';
            return TypeofvisitForm;
        }(Serenity.PrefixedContext));
        Configs.TypeofvisitForm = TypeofvisitForm;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TypeofvisitRow;
        (function (TypeofvisitRow) {
            TypeofvisitRow.idProperty = 'Id';
            TypeofvisitRow.nameProperty = 'TypeOfVisit';
            TypeofvisitRow.localTextPrefix = 'Configs.Typeofvisit';
            TypeofvisitRow.lookupKey = 'Configs.Typeofvisit';
            function getLookup() {
                return Q.getLookup('Configs.Typeofvisit');
            }
            TypeofvisitRow.getLookup = getLookup;
        })(TypeofvisitRow = Configs.TypeofvisitRow || (Configs.TypeofvisitRow = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TypeofvisitService;
        (function (TypeofvisitService) {
            TypeofvisitService.baseUrl = 'Configs/Typeofvisit';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TypeofvisitService[x] = function (r, s, o) {
                    return Q.serviceRequest(TypeofvisitService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TypeofvisitService = Configs.TypeofvisitService || (Configs.TypeofvisitService = {}));
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var FM;
    (function (FM) {
        var LkpServicesForm = /** @class */ (function (_super) {
            __extends(LkpServicesForm, _super);
            function LkpServicesForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!LkpServicesForm.init) {
                    LkpServicesForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    var w1 = s.StringEditor;
                    var w2 = s.DecimalEditor;
                    var w3 = s.BooleanEditor;
                    Q.initFormType(LkpServicesForm, [
                        'ServiceTypeId', w0,
                        'ServiceDari', w1,
                        'ServicePashto', w1,
                        'ServiceEn', w1,
                        'ServicePrice', w2,
                        'Status', w3
                    ]);
                }
                return _this;
            }
            LkpServicesForm.formKey = 'FM.LkpServices';
            return LkpServicesForm;
        }(Serenity.PrefixedContext));
        FM.LkpServicesForm = LkpServicesForm;
    })(FM = EMR.FM || (EMR.FM = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var FM;
    (function (FM) {
        var LkpServicesRow;
        (function (LkpServicesRow) {
            LkpServicesRow.idProperty = 'ServiceId';
            LkpServicesRow.nameProperty = 'ServiceDari';
            LkpServicesRow.localTextPrefix = 'FM.LkpServices';
            LkpServicesRow.lookupKey = 'FM.LkpServices';
            function getLookup() {
                return Q.getLookup('FM.LkpServices');
            }
            LkpServicesRow.getLookup = getLookup;
        })(LkpServicesRow = FM.LkpServicesRow || (FM.LkpServicesRow = {}));
    })(FM = EMR.FM || (EMR.FM = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var FM;
    (function (FM) {
        var LkpServicesService;
        (function (LkpServicesService) {
            LkpServicesService.baseUrl = 'FM/LkpServices';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                LkpServicesService[x] = function (r, s, o) {
                    return Q.serviceRequest(LkpServicesService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(LkpServicesService = FM.LkpServicesService || (FM.LkpServicesService = {}));
    })(FM = EMR.FM || (EMR.FM = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var FM;
    (function (FM) {
        var LkpServiceTypesForm = /** @class */ (function (_super) {
            __extends(LkpServiceTypesForm, _super);
            function LkpServiceTypesForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!LkpServiceTypesForm.init) {
                    LkpServiceTypesForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    Q.initFormType(LkpServiceTypesForm, [
                        'ServiceTypeDari', w0,
                        'ServiceTypePashto', w0,
                        'ServiceTypeEn', w0
                    ]);
                }
                return _this;
            }
            LkpServiceTypesForm.formKey = 'FM.LkpServiceTypes';
            return LkpServiceTypesForm;
        }(Serenity.PrefixedContext));
        FM.LkpServiceTypesForm = LkpServiceTypesForm;
    })(FM = EMR.FM || (EMR.FM = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var FM;
    (function (FM) {
        var LkpServiceTypesRow;
        (function (LkpServiceTypesRow) {
            LkpServiceTypesRow.idProperty = 'ServiceTypeId';
            LkpServiceTypesRow.nameProperty = 'ServiceTypeDari';
            LkpServiceTypesRow.localTextPrefix = 'FM.LkpServiceTypes';
            LkpServiceTypesRow.lookupKey = 'FM.LkpServiceTypes';
            function getLookup() {
                return Q.getLookup('FM.LkpServiceTypes');
            }
            LkpServiceTypesRow.getLookup = getLookup;
        })(LkpServiceTypesRow = FM.LkpServiceTypesRow || (FM.LkpServiceTypesRow = {}));
    })(FM = EMR.FM || (EMR.FM = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var FM;
    (function (FM) {
        var LkpServiceTypesService;
        (function (LkpServiceTypesService) {
            LkpServiceTypesService.baseUrl = 'FM/LkpServiceTypes';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                LkpServiceTypesService[x] = function (r, s, o) {
                    return Q.serviceRequest(LkpServiceTypesService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(LkpServiceTypesService = FM.LkpServiceTypesService || (FM.LkpServiceTypesService = {}));
    })(FM = EMR.FM || (EMR.FM = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var FM;
    (function (FM) {
        var TblFeePaymentForm = /** @class */ (function (_super) {
            __extends(TblFeePaymentForm, _super);
            function TblFeePaymentForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblFeePaymentForm.init) {
                    TblFeePaymentForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.IntegerEditor;
                    var w2 = s.DateEditor;
                    Q.initFormType(TblFeePaymentForm, [
                        'Mrid', w0,
                        'ServiceId', w1,
                        'ServiceFee', w1,
                        'DateCreated', w2,
                        'Times', w1
                    ]);
                }
                return _this;
            }
            TblFeePaymentForm.formKey = 'FM.TblFeePayment';
            return TblFeePaymentForm;
        }(Serenity.PrefixedContext));
        FM.TblFeePaymentForm = TblFeePaymentForm;
    })(FM = EMR.FM || (EMR.FM = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var FM;
    (function (FM) {
        var TblFeePaymentRow;
        (function (TblFeePaymentRow) {
            TblFeePaymentRow.idProperty = 'FeeId';
            TblFeePaymentRow.localTextPrefix = 'FM.TblFeePayment';
        })(TblFeePaymentRow = FM.TblFeePaymentRow || (FM.TblFeePaymentRow = {}));
    })(FM = EMR.FM || (EMR.FM = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var FM;
    (function (FM) {
        var TblFeePaymentService;
        (function (TblFeePaymentService) {
            TblFeePaymentService.baseUrl = 'FM/TblFeePayment';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblFeePaymentService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblFeePaymentService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblFeePaymentService = FM.TblFeePaymentService || (FM.TblFeePaymentService = {}));
    })(FM = EMR.FM || (EMR.FM = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var FM;
    (function (FM) {
        var TblPrintDetailsForm = /** @class */ (function (_super) {
            __extends(TblPrintDetailsForm, _super);
            function TblPrintDetailsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblPrintDetailsForm.init) {
                    TblPrintDetailsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.DateEditor;
                    Q.initFormType(TblPrintDetailsForm, [
                        'FeeId', w0,
                        'DateTimePrinted', w1,
                        'PrintedBy', w0
                    ]);
                }
                return _this;
            }
            TblPrintDetailsForm.formKey = 'FM.TblPrintDetails';
            return TblPrintDetailsForm;
        }(Serenity.PrefixedContext));
        FM.TblPrintDetailsForm = TblPrintDetailsForm;
    })(FM = EMR.FM || (EMR.FM = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var FM;
    (function (FM) {
        var TblPrintDetailsRow;
        (function (TblPrintDetailsRow) {
            TblPrintDetailsRow.idProperty = 'PrintId';
            TblPrintDetailsRow.nameProperty = 'PrintedBy';
            TblPrintDetailsRow.localTextPrefix = 'FM.TblPrintDetails';
        })(TblPrintDetailsRow = FM.TblPrintDetailsRow || (FM.TblPrintDetailsRow = {}));
    })(FM = EMR.FM || (EMR.FM = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var FM;
    (function (FM) {
        var TblPrintDetailsService;
        (function (TblPrintDetailsService) {
            TblPrintDetailsService.baseUrl = 'FM/TblPrintDetails';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblPrintDetailsService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblPrintDetailsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblPrintDetailsService = FM.TblPrintDetailsService || (FM.TblPrintDetailsService = {}));
    })(FM = EMR.FM || (EMR.FM = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var FM;
    (function (FM) {
        var UserFeePatientsForm = /** @class */ (function (_super) {
            __extends(UserFeePatientsForm, _super);
            function UserFeePatientsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!UserFeePatientsForm.init) {
                    UserFeePatientsForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    var w1 = s.StringEditor;
                    Q.initFormType(UserFeePatientsForm, [
                        'FacilityId', w0,
                        'Mrn', w1,
                        'PatName', w1,
                        'PatFatName', w1,
                        'PatGender', w0,
                        'PatRealationName', w1
                    ]);
                }
                return _this;
            }
            UserFeePatientsForm.formKey = 'FM.UserFeePatients';
            return UserFeePatientsForm;
        }(Serenity.PrefixedContext));
        FM.UserFeePatientsForm = UserFeePatientsForm;
    })(FM = EMR.FM || (EMR.FM = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var FM;
    (function (FM) {
        var UserFeePatientsRow;
        (function (UserFeePatientsRow) {
            UserFeePatientsRow.idProperty = 'Mrid';
            UserFeePatientsRow.nameProperty = 'Mrn';
            UserFeePatientsRow.localTextPrefix = 'FM.UserFeePatients';
        })(UserFeePatientsRow = FM.UserFeePatientsRow || (FM.UserFeePatientsRow = {}));
    })(FM = EMR.FM || (EMR.FM = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var FM;
    (function (FM) {
        var UserFeePatientsService;
        (function (UserFeePatientsService) {
            UserFeePatientsService.baseUrl = 'FM/UserFeePatients';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                UserFeePatientsService[x] = function (r, s, o) {
                    return Q.serviceRequest(UserFeePatientsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(UserFeePatientsService = FM.UserFeePatientsService || (FM.UserFeePatientsService = {}));
    })(FM = EMR.FM || (EMR.FM = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Imaging;
    (function (Imaging) {
        var ImagePatientsForm = /** @class */ (function (_super) {
            __extends(ImagePatientsForm, _super);
            function ImagePatientsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ImagePatientsForm.init) {
                    ImagePatientsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.DateEditor;
                    var w3 = s.IntegerEditor;
                    Q.initFormType(ImagePatientsForm, [
                        'Mrn', w0,
                        'FirstName', w0,
                        'LastName', w0,
                        'FatherName', w0,
                        'GenderId', w1,
                        'DateOfBirth', w2,
                        'AgeInYear', w3,
                        'EthnicityId', w1,
                        'RefertoDoctor', w1
                    ]);
                }
                return _this;
            }
            ImagePatientsForm.formKey = 'Imaging.ImagePatients';
            return ImagePatientsForm;
        }(Serenity.PrefixedContext));
        Imaging.ImagePatientsForm = ImagePatientsForm;
    })(Imaging = EMR.Imaging || (EMR.Imaging = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Imaging;
    (function (Imaging) {
        var ImagePatientsRow;
        (function (ImagePatientsRow) {
            ImagePatientsRow.idProperty = 'Mrid';
            ImagePatientsRow.nameProperty = 'Mrn';
            ImagePatientsRow.localTextPrefix = 'Imaging.ImagePatients';
        })(ImagePatientsRow = Imaging.ImagePatientsRow || (Imaging.ImagePatientsRow = {}));
    })(Imaging = EMR.Imaging || (EMR.Imaging = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Imaging;
    (function (Imaging) {
        var ImagePatientsService;
        (function (ImagePatientsService) {
            ImagePatientsService.baseUrl = 'Imaging/ImagePatients';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ImagePatientsService[x] = function (r, s, o) {
                    return Q.serviceRequest(ImagePatientsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(ImagePatientsService = Imaging.ImagePatientsService || (Imaging.ImagePatientsService = {}));
    })(Imaging = EMR.Imaging || (EMR.Imaging = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Imaging;
    (function (Imaging) {
        var ImagevisitsForm = /** @class */ (function (_super) {
            __extends(ImagevisitsForm, _super);
            function ImagevisitsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ImagevisitsForm.init) {
                    ImagevisitsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.DateEditor;
                    Q.initFormType(ImagevisitsForm, [
                        'Mrid', w0,
                        'MRN', w0,
                        'OccupationId', w1,
                        'MaritalStatusId', w1,
                        'PhoneNumber', w0,
                        'ProvinceId', w1,
                        'DistrictId', w1,
                        'Location', w0,
                        'TypeofvisitId', w1,
                        'DateOfVisit', w2,
                        'CycleId', w1
                    ]);
                }
                return _this;
            }
            ImagevisitsForm.formKey = 'Imaging.Imagevisits';
            return ImagevisitsForm;
        }(Serenity.PrefixedContext));
        Imaging.ImagevisitsForm = ImagevisitsForm;
    })(Imaging = EMR.Imaging || (EMR.Imaging = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Imaging;
    (function (Imaging) {
        var ImagevisitsRow;
        (function (ImagevisitsRow) {
            ImagevisitsRow.idProperty = 'VisitId';
            ImagevisitsRow.nameProperty = 'PhoneNumber';
            ImagevisitsRow.localTextPrefix = 'Imaging.Imagevisits';
        })(ImagevisitsRow = Imaging.ImagevisitsRow || (Imaging.ImagevisitsRow = {}));
    })(Imaging = EMR.Imaging || (EMR.Imaging = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Imaging;
    (function (Imaging) {
        var ImagevisitsService;
        (function (ImagevisitsService) {
            ImagevisitsService.baseUrl = 'Imaging/Imagevisits';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ImagevisitsService[x] = function (r, s, o) {
                    return Q.serviceRequest(ImagevisitsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(ImagevisitsService = Imaging.ImagevisitsService || (Imaging.ImagevisitsService = {}));
    })(Imaging = EMR.Imaging || (EMR.Imaging = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Imaging;
    (function (Imaging) {
        var ImgImagingsForm = /** @class */ (function (_super) {
            __extends(ImgImagingsForm, _super);
            function ImgImagingsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ImgImagingsForm.init) {
                    ImgImagingsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.MultipleImageUploadEditor;
                    var w3 = s.HtmlReportContentEditor;
                    Q.initFormType(ImgImagingsForm, [
                        'VisitId', w0,
                        'ImagingId', w1,
                        'TestImage', w2,
                        'Note', w3
                    ]);
                }
                return _this;
            }
            ImgImagingsForm.formKey = 'Imaging.ImgImagings';
            return ImgImagingsForm;
        }(Serenity.PrefixedContext));
        Imaging.ImgImagingsForm = ImgImagingsForm;
    })(Imaging = EMR.Imaging || (EMR.Imaging = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Imaging;
    (function (Imaging) {
        var ImgImagingsRow;
        (function (ImgImagingsRow) {
            ImgImagingsRow.idProperty = 'Id';
            ImgImagingsRow.nameProperty = 'TestImage';
            ImgImagingsRow.localTextPrefix = 'Imaging.ImgImagings';
        })(ImgImagingsRow = Imaging.ImgImagingsRow || (Imaging.ImgImagingsRow = {}));
    })(Imaging = EMR.Imaging || (EMR.Imaging = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Imaging;
    (function (Imaging) {
        var ImgImagingsService;
        (function (ImgImagingsService) {
            ImgImagingsService.baseUrl = 'Imaging/ImgImagings';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ImgImagingsService[x] = function (r, s, o) {
                    return Q.serviceRequest(ImgImagingsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(ImgImagingsService = Imaging.ImgImagingsService || (Imaging.ImgImagingsService = {}));
    })(Imaging = EMR.Imaging || (EMR.Imaging = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var LabTest;
    (function (LabTest) {
        var LabPatientsForm = /** @class */ (function (_super) {
            __extends(LabPatientsForm, _super);
            function LabPatientsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!LabPatientsForm.init) {
                    LabPatientsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.DateEditor;
                    var w3 = s.IntegerEditor;
                    Q.initFormType(LabPatientsForm, [
                        'Mrn', w0,
                        'FirstName', w0,
                        'LastName', w0,
                        'FatherName', w0,
                        'GenderId', w1,
                        'DateOfBirth', w2,
                        'AgeInYear', w3,
                        'EthnicityId', w1,
                        'RefertoDoctor', w1
                    ]);
                }
                return _this;
            }
            LabPatientsForm.formKey = 'LabTest.LabPatients';
            return LabPatientsForm;
        }(Serenity.PrefixedContext));
        LabTest.LabPatientsForm = LabPatientsForm;
    })(LabTest = EMR.LabTest || (EMR.LabTest = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var LabTest;
    (function (LabTest) {
        var LabPatientsRow;
        (function (LabPatientsRow) {
            LabPatientsRow.idProperty = 'Mrid';
            LabPatientsRow.nameProperty = 'Mrn';
            LabPatientsRow.localTextPrefix = 'LabTest.LabPatients';
        })(LabPatientsRow = LabTest.LabPatientsRow || (LabTest.LabPatientsRow = {}));
    })(LabTest = EMR.LabTest || (EMR.LabTest = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var LabTest;
    (function (LabTest) {
        var LabPatientsService;
        (function (LabPatientsService) {
            LabPatientsService.baseUrl = 'LabTest/LabPatients';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                LabPatientsService[x] = function (r, s, o) {
                    return Q.serviceRequest(LabPatientsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(LabPatientsService = LabTest.LabPatientsService || (LabTest.LabPatientsService = {}));
    })(LabTest = EMR.LabTest || (EMR.LabTest = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var LabTest;
    (function (LabTest) {
        var LabTestsForm = /** @class */ (function (_super) {
            __extends(LabTestsForm, _super);
            function LabTestsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!LabTestsForm.init) {
                    LabTestsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.DateTimeEditor;
                    var w3 = EMR.Common.ShamsiDatePickerEditor;
                    Q.initFormType(LabTestsForm, [
                        'VisitId', w0,
                        'TestTypeId', w1,
                        'LabTestId', w1,
                        'NormalRange', w0,
                        'Unit', w0,
                        'Result', w0,
                        'LabDateTime', w2,
                        'SlabDate', w3
                    ]);
                }
                return _this;
            }
            LabTestsForm.formKey = 'LabTest.LabTests';
            return LabTestsForm;
        }(Serenity.PrefixedContext));
        LabTest.LabTestsForm = LabTestsForm;
    })(LabTest = EMR.LabTest || (EMR.LabTest = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var LabTest;
    (function (LabTest) {
        var LabTestsRow;
        (function (LabTestsRow) {
            LabTestsRow.idProperty = 'Id';
            LabTestsRow.nameProperty = 'Result';
            LabTestsRow.localTextPrefix = 'LabTest.LabTests';
        })(LabTestsRow = LabTest.LabTestsRow || (LabTest.LabTestsRow = {}));
    })(LabTest = EMR.LabTest || (EMR.LabTest = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var LabTest;
    (function (LabTest) {
        var LabTestsService;
        (function (LabTestsService) {
            LabTestsService.baseUrl = 'LabTest/LabTests';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                LabTestsService[x] = function (r, s, o) {
                    return Q.serviceRequest(LabTestsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(LabTestsService = LabTest.LabTestsService || (LabTest.LabTestsService = {}));
    })(LabTest = EMR.LabTest || (EMR.LabTest = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var LabTest;
    (function (LabTest) {
        var LabvisitsForm = /** @class */ (function (_super) {
            __extends(LabvisitsForm, _super);
            function LabvisitsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!LabvisitsForm.init) {
                    LabvisitsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.DateEditor;
                    Q.initFormType(LabvisitsForm, [
                        'Mrid', w0,
                        'MRN', w0,
                        'OccupationId', w1,
                        'MaritalStatusId', w1,
                        'PhoneNumber', w0,
                        'ProvinceId', w1,
                        'DistrictId', w1,
                        'Location', w0,
                        'TypeofvisitId', w1,
                        'DateOfVisit', w2,
                        'CycleId', w1
                    ]);
                }
                return _this;
            }
            LabvisitsForm.formKey = 'LabTest.Labvisits';
            return LabvisitsForm;
        }(Serenity.PrefixedContext));
        LabTest.LabvisitsForm = LabvisitsForm;
    })(LabTest = EMR.LabTest || (EMR.LabTest = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var LabTest;
    (function (LabTest) {
        var LabvisitsRow;
        (function (LabvisitsRow) {
            LabvisitsRow.idProperty = 'VisitId';
            LabvisitsRow.nameProperty = 'PhoneNumber';
            LabvisitsRow.localTextPrefix = 'LabTest.Labvisits';
        })(LabvisitsRow = LabTest.LabvisitsRow || (LabTest.LabvisitsRow = {}));
    })(LabTest = EMR.LabTest || (EMR.LabTest = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var LabTest;
    (function (LabTest) {
        var LabvisitsService;
        (function (LabvisitsService) {
            LabvisitsService.baseUrl = 'LabTest/Labvisits';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                LabvisitsService[x] = function (r, s, o) {
                    return Q.serviceRequest(LabvisitsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(LabvisitsService = LabTest.LabvisitsService || (LabTest.LabvisitsService = {}));
    })(LabTest = EMR.LabTest || (EMR.LabTest = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Locations;
    (function (Locations) {
        var DistrictsForm = /** @class */ (function (_super) {
            __extends(DistrictsForm, _super);
            function DistrictsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!DistrictsForm.init) {
                    DistrictsForm.init = true;
                    var s = Serenity;
                    var w0 = s.IntegerEditor;
                    var w1 = s.StringEditor;
                    var w2 = s.LookupEditor;
                    Q.initFormType(DistrictsForm, [
                        'DistrictId', w0,
                        'DistrictEng', w1,
                        'DistrictDari', w1,
                        'DistrictPashto', w1,
                        'ProvinceId', w2
                    ]);
                }
                return _this;
            }
            DistrictsForm.formKey = 'Locations.Districts';
            return DistrictsForm;
        }(Serenity.PrefixedContext));
        Locations.DistrictsForm = DistrictsForm;
    })(Locations = EMR.Locations || (EMR.Locations = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Locations;
    (function (Locations) {
        var DistrictsRow;
        (function (DistrictsRow) {
            DistrictsRow.idProperty = 'DistrictId';
            DistrictsRow.nameProperty = 'DistrictName';
            DistrictsRow.localTextPrefix = 'Locations.Districts';
            DistrictsRow.lookupKey = 'Locations.Districts';
            function getLookup() {
                return Q.getLookup('Locations.Districts');
            }
            DistrictsRow.getLookup = getLookup;
        })(DistrictsRow = Locations.DistrictsRow || (Locations.DistrictsRow = {}));
    })(Locations = EMR.Locations || (EMR.Locations = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Locations;
    (function (Locations) {
        var DistrictsService;
        (function (DistrictsService) {
            DistrictsService.baseUrl = 'Locations/Districts';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                DistrictsService[x] = function (r, s, o) {
                    return Q.serviceRequest(DistrictsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(DistrictsService = Locations.DistrictsService || (Locations.DistrictsService = {}));
    })(Locations = EMR.Locations || (EMR.Locations = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Locations;
    (function (Locations) {
        var FacilityInfoForm = /** @class */ (function (_super) {
            __extends(FacilityInfoForm, _super);
            function FacilityInfoForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!FacilityInfoForm.init) {
                    FacilityInfoForm.init = true;
                    var s = Serenity;
                    var w0 = s.IntegerEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.StringEditor;
                    var w3 = s.DecimalEditor;
                    Q.initFormType(FacilityInfoForm, [
                        'FacilityId', w0,
                        'DistrictId', w1,
                        'FacilityName', w2,
                        'FacilityNameDari', w2,
                        'FacilityNamePashto', w2,
                        'FacilityType', w1,
                        'ViliCode', w2,
                        'GrantId', w2,
                        'Lat', w3,
                        'Lon', w3,
                        'Implementer', w2,
                        'TenantId', w1
                    ]);
                }
                return _this;
            }
            FacilityInfoForm.formKey = 'Locations.FacilityInfo';
            return FacilityInfoForm;
        }(Serenity.PrefixedContext));
        Locations.FacilityInfoForm = FacilityInfoForm;
    })(Locations = EMR.Locations || (EMR.Locations = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Locations;
    (function (Locations) {
        var FacilityInfoReferRow;
        (function (FacilityInfoReferRow) {
            FacilityInfoReferRow.idProperty = 'FacilityId';
            FacilityInfoReferRow.nameProperty = 'FacilityFullName';
            FacilityInfoReferRow.localTextPrefix = 'Locations.FacilityInfoRefer';
            FacilityInfoReferRow.lookupKey = 'Locations.FacilityInfoRefer';
            function getLookup() {
                return Q.getLookup('Locations.FacilityInfoRefer');
            }
            FacilityInfoReferRow.getLookup = getLookup;
        })(FacilityInfoReferRow = Locations.FacilityInfoReferRow || (Locations.FacilityInfoReferRow = {}));
    })(Locations = EMR.Locations || (EMR.Locations = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Locations;
    (function (Locations) {
        var FacilityInfoRow;
        (function (FacilityInfoRow) {
            FacilityInfoRow.idProperty = 'FacilityId';
            FacilityInfoRow.nameProperty = 'FacilityFullName';
            FacilityInfoRow.localTextPrefix = 'Locations.FacilityInfo';
            FacilityInfoRow.lookupKey = 'Locations.FacilityInfo';
            function getLookup() {
                return Q.getLookup('Locations.FacilityInfo');
            }
            FacilityInfoRow.getLookup = getLookup;
        })(FacilityInfoRow = Locations.FacilityInfoRow || (Locations.FacilityInfoRow = {}));
    })(Locations = EMR.Locations || (EMR.Locations = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Locations;
    (function (Locations) {
        var FacilityInfoService;
        (function (FacilityInfoService) {
            FacilityInfoService.baseUrl = 'Locations/FacilityInfo';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                FacilityInfoService[x] = function (r, s, o) {
                    return Q.serviceRequest(FacilityInfoService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(FacilityInfoService = Locations.FacilityInfoService || (Locations.FacilityInfoService = {}));
    })(Locations = EMR.Locations || (EMR.Locations = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Locations;
    (function (Locations) {
        var FacilityTypesForm = /** @class */ (function (_super) {
            __extends(FacilityTypesForm, _super);
            function FacilityTypesForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!FacilityTypesForm.init) {
                    FacilityTypesForm.init = true;
                    var s = Serenity;
                    var w0 = s.IntegerEditor;
                    var w1 = s.StringEditor;
                    Q.initFormType(FacilityTypesForm, [
                        'FacTypeCode', w0,
                        'FacType', w1,
                        'FacTypeDari', w1,
                        'FacTypePashto', w1
                    ]);
                }
                return _this;
            }
            FacilityTypesForm.formKey = 'Locations.FacilityTypes';
            return FacilityTypesForm;
        }(Serenity.PrefixedContext));
        Locations.FacilityTypesForm = FacilityTypesForm;
    })(Locations = EMR.Locations || (EMR.Locations = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Locations;
    (function (Locations) {
        var FacilityTypesRow;
        (function (FacilityTypesRow) {
            FacilityTypesRow.idProperty = 'FacTypeCode';
            FacilityTypesRow.nameProperty = 'FacType';
            FacilityTypesRow.localTextPrefix = 'Locations.FacilityTypes';
            FacilityTypesRow.lookupKey = 'Locations.FacilityTypes';
            function getLookup() {
                return Q.getLookup('Locations.FacilityTypes');
            }
            FacilityTypesRow.getLookup = getLookup;
        })(FacilityTypesRow = Locations.FacilityTypesRow || (Locations.FacilityTypesRow = {}));
    })(Locations = EMR.Locations || (EMR.Locations = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Locations;
    (function (Locations) {
        var FacilityTypesService;
        (function (FacilityTypesService) {
            FacilityTypesService.baseUrl = 'Locations/FacilityTypes';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                FacilityTypesService[x] = function (r, s, o) {
                    return Q.serviceRequest(FacilityTypesService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(FacilityTypesService = Locations.FacilityTypesService || (Locations.FacilityTypesService = {}));
    })(Locations = EMR.Locations || (EMR.Locations = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Locations;
    (function (Locations) {
        var ProvincesForm = /** @class */ (function (_super) {
            __extends(ProvincesForm, _super);
            function ProvincesForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ProvincesForm.init) {
                    ProvincesForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.IntegerEditor;
                    Q.initFormType(ProvincesForm, [
                        'ProvinceEng', w0,
                        'ProvinceDari', w0,
                        'ProvincePashto', w0,
                        'ProvPop', w1,
                        'ProvinceAbbrv', w0
                    ]);
                }
                return _this;
            }
            ProvincesForm.formKey = 'Locations.Provinces';
            return ProvincesForm;
        }(Serenity.PrefixedContext));
        Locations.ProvincesForm = ProvincesForm;
    })(Locations = EMR.Locations || (EMR.Locations = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Locations;
    (function (Locations) {
        var ProvincesRow;
        (function (ProvincesRow) {
            ProvincesRow.idProperty = 'ProvinceId';
            ProvincesRow.nameProperty = 'ProvinceName';
            ProvincesRow.localTextPrefix = 'Locations.Provinces';
            ProvincesRow.lookupKey = 'Locations.Provinces';
            function getLookup() {
                return Q.getLookup('Locations.Provinces');
            }
            ProvincesRow.getLookup = getLookup;
        })(ProvincesRow = Locations.ProvincesRow || (Locations.ProvincesRow = {}));
    })(Locations = EMR.Locations || (EMR.Locations = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Locations;
    (function (Locations) {
        var ProvincesService;
        (function (ProvincesService) {
            ProvincesService.baseUrl = 'Locations/Provinces';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ProvincesService[x] = function (r, s, o) {
                    return Q.serviceRequest(ProvincesService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(ProvincesService = Locations.ProvincesService || (Locations.ProvincesService = {}));
    })(Locations = EMR.Locations || (EMR.Locations = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var BloodTransfusionsForm = /** @class */ (function (_super) {
            __extends(BloodTransfusionsForm, _super);
            function BloodTransfusionsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!BloodTransfusionsForm.init) {
                    BloodTransfusionsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.IntegerEditor;
                    var w3 = s.DateTimeEditor;
                    var w4 = EMR.Common.ShamsiDatePickerEditor;
                    Q.initFormType(BloodTransfusionsForm, [
                        'VisitId', w0,
                        'BloodGroupId', w1,
                        'Recomquantity', w2,
                        'Transmitquantity', w2,
                        'BloodstatusId', w1,
                        'RecDateTime', w3,
                        'SRecDate', w0,
                        'TransDateTime', w3,
                        'STransDate', w4
                    ]);
                }
                return _this;
            }
            BloodTransfusionsForm.formKey = 'Medadmins.BloodTransfusions';
            return BloodTransfusionsForm;
        }(Serenity.PrefixedContext));
        Medadmins.BloodTransfusionsForm = BloodTransfusionsForm;
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var BloodTransfusionsRow;
        (function (BloodTransfusionsRow) {
            BloodTransfusionsRow.idProperty = 'TransfusionId';
            BloodTransfusionsRow.nameProperty = 'Bloodstatus';
            BloodTransfusionsRow.localTextPrefix = 'Medadmins.BloodTransfusions';
        })(BloodTransfusionsRow = Medadmins.BloodTransfusionsRow || (Medadmins.BloodTransfusionsRow = {}));
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var BloodTransfusionsService;
        (function (BloodTransfusionsService) {
            BloodTransfusionsService.baseUrl = 'Medadmins/BloodTransfusions';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                BloodTransfusionsService[x] = function (r, s, o) {
                    return Q.serviceRequest(BloodTransfusionsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(BloodTransfusionsService = Medadmins.BloodTransfusionsService || (Medadmins.BloodTransfusionsService = {}));
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var MedadministrationForm = /** @class */ (function (_super) {
            __extends(MedadministrationForm, _super);
            function MedadministrationForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!MedadministrationForm.init) {
                    MedadministrationForm.init = true;
                    var s = Serenity;
                    var w0 = s.IntegerEditor;
                    var w1 = s.StringEditor;
                    var w2 = s.HtmlNoteContentEditor;
                    var w3 = s.DateTimeEditor;
                    var w4 = EMR.Common.ShamsiDatePickerEditor;
                    Q.initFormType(MedadministrationForm, [
                        'OrderId', w0,
                        'Medicine', w1,
                        'Quantity', w0,
                        'Comment', w2,
                        'RecDateTime', w3,
                        'RecSDate', w1,
                        'AppDateTime', w3,
                        'AppSDate', w4
                    ]);
                }
                return _this;
            }
            MedadministrationForm.formKey = 'Medadmins.Medadministration';
            return MedadministrationForm;
        }(Serenity.PrefixedContext));
        Medadmins.MedadministrationForm = MedadministrationForm;
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var MedadministrationRow;
        (function (MedadministrationRow) {
            MedadministrationRow.idProperty = 'MedadminId';
            MedadministrationRow.nameProperty = 'Comment';
            MedadministrationRow.localTextPrefix = 'Medadmins.Medadministration';
        })(MedadministrationRow = Medadmins.MedadministrationRow || (Medadmins.MedadministrationRow = {}));
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var MedadministrationService;
        (function (MedadministrationService) {
            MedadministrationService.baseUrl = 'Medadmins/Medadministration';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                MedadministrationService[x] = function (r, s, o) {
                    return Q.serviceRequest(MedadministrationService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(MedadministrationService = Medadmins.MedadministrationService || (Medadmins.MedadministrationService = {}));
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var MedadminpatientsForm = /** @class */ (function (_super) {
            __extends(MedadminpatientsForm, _super);
            function MedadminpatientsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!MedadminpatientsForm.init) {
                    MedadminpatientsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.DateEditor;
                    var w3 = s.IntegerEditor;
                    Q.initFormType(MedadminpatientsForm, [
                        'Mrn', w0,
                        'FirstName', w0,
                        'LastName', w0,
                        'FatherName', w0,
                        'GenderId', w1,
                        'DateOfBirth', w2,
                        'AgeInYear', w3,
                        'EthnicityId', w1,
                        'RefertoDoctor', w1
                    ]);
                }
                return _this;
            }
            MedadminpatientsForm.formKey = 'Medadmins.Medadminpatients';
            return MedadminpatientsForm;
        }(Serenity.PrefixedContext));
        Medadmins.MedadminpatientsForm = MedadminpatientsForm;
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var MedadminpatientsRow;
        (function (MedadminpatientsRow) {
            MedadminpatientsRow.idProperty = 'Mrid';
            MedadminpatientsRow.nameProperty = 'Mrn';
            MedadminpatientsRow.localTextPrefix = 'Medadmins.Medadminpatients';
        })(MedadminpatientsRow = Medadmins.MedadminpatientsRow || (Medadmins.MedadminpatientsRow = {}));
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var MedadminpatientsService;
        (function (MedadminpatientsService) {
            MedadminpatientsService.baseUrl = 'Medadmins/Medadminpatients';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                MedadminpatientsService[x] = function (r, s, o) {
                    return Q.serviceRequest(MedadminpatientsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(MedadminpatientsService = Medadmins.MedadminpatientsService || (Medadmins.MedadminpatientsService = {}));
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var MedvisitsForm = /** @class */ (function (_super) {
            __extends(MedvisitsForm, _super);
            function MedvisitsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!MedvisitsForm.init) {
                    MedvisitsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.DateEditor;
                    Q.initFormType(MedvisitsForm, [
                        'Mrid', w0,
                        'MRN', w0,
                        'OccupationId', w1,
                        'MaritalStatusId', w1,
                        'PhoneNumber', w0,
                        'ProvinceId', w1,
                        'DistrictId', w1,
                        'Location', w0,
                        'TypeofvisitId', w1,
                        'DateOfVisit', w2,
                        'CycleId', w1
                    ]);
                }
                return _this;
            }
            MedvisitsForm.formKey = 'Medadmins.Medvisits';
            return MedvisitsForm;
        }(Serenity.PrefixedContext));
        Medadmins.MedvisitsForm = MedvisitsForm;
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var MedvisitsRow;
        (function (MedvisitsRow) {
            MedvisitsRow.idProperty = 'VisitId';
            MedvisitsRow.nameProperty = 'PhoneNumber';
            MedvisitsRow.localTextPrefix = 'Medadmins.Medvisits';
        })(MedvisitsRow = Medadmins.MedvisitsRow || (Medadmins.MedvisitsRow = {}));
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var MedvisitsService;
        (function (MedvisitsService) {
            MedvisitsService.baseUrl = 'Medadmins/Medvisits';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                MedvisitsService[x] = function (r, s, o) {
                    return Q.serviceRequest(MedvisitsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(MedvisitsService = Medadmins.MedvisitsService || (Medadmins.MedvisitsService = {}));
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var MPrescriptionsForm = /** @class */ (function (_super) {
            __extends(MPrescriptionsForm, _super);
            function MPrescriptionsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!MPrescriptionsForm.init) {
                    MPrescriptionsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.IntegerEditor;
                    Q.initFormType(MPrescriptionsForm, [
                        'VisitId', w0,
                        'MedicineId', w1,
                        'Quantity', w2,
                        'DailyDose', w0,
                        'Comment', w0
                    ]);
                }
                return _this;
            }
            MPrescriptionsForm.formKey = 'Medadmins.MPrescriptions';
            return MPrescriptionsForm;
        }(Serenity.PrefixedContext));
        Medadmins.MPrescriptionsForm = MPrescriptionsForm;
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var MPrescriptionsRow;
        (function (MPrescriptionsRow) {
            MPrescriptionsRow.idProperty = 'OrderId';
            MPrescriptionsRow.nameProperty = 'DailyDose';
            MPrescriptionsRow.localTextPrefix = 'Medadmins.MPrescriptions';
        })(MPrescriptionsRow = Medadmins.MPrescriptionsRow || (Medadmins.MPrescriptionsRow = {}));
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var MPrescriptionsService;
        (function (MPrescriptionsService) {
            MPrescriptionsService.baseUrl = 'Medadmins/MPrescriptions';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                MPrescriptionsService[x] = function (r, s, o) {
                    return Q.serviceRequest(MPrescriptionsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(MPrescriptionsService = Medadmins.MPrescriptionsService || (Medadmins.MPrescriptionsService = {}));
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var VisitsmedicineForm = /** @class */ (function (_super) {
            __extends(VisitsmedicineForm, _super);
            function VisitsmedicineForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!VisitsmedicineForm.init) {
                    VisitsmedicineForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    Q.initFormType(VisitsmedicineForm, [
                        'VisitId', w0,
                        'Mrid', w1,
                        'Medicine', w0
                    ]);
                }
                return _this;
            }
            VisitsmedicineForm.formKey = 'Medadmins.Visitsmedicine';
            return VisitsmedicineForm;
        }(Serenity.PrefixedContext));
        Medadmins.VisitsmedicineForm = VisitsmedicineForm;
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var VisitsmedicineRow;
        (function (VisitsmedicineRow) {
            VisitsmedicineRow.idProperty = 'OrderId';
            VisitsmedicineRow.nameProperty = 'Medicine';
            VisitsmedicineRow.localTextPrefix = 'Medadmins.Visitsmedicine';
            VisitsmedicineRow.lookupKey = 'Configs.VisitsMedicine';
            function getLookup() {
                return Q.getLookup('Configs.VisitsMedicine');
            }
            VisitsmedicineRow.getLookup = getLookup;
        })(VisitsmedicineRow = Medadmins.VisitsmedicineRow || (Medadmins.VisitsmedicineRow = {}));
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var VisitsmedicineService;
        (function (VisitsmedicineService) {
            VisitsmedicineService.baseUrl = 'Medadmins/Visitsmedicine';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                VisitsmedicineService[x] = function (r, s, o) {
                    return Q.serviceRequest(VisitsmedicineService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(VisitsmedicineService = Medadmins.VisitsmedicineService || (Medadmins.VisitsmedicineService = {}));
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Membership;
    (function (Membership) {
        var ChangePasswordForm = /** @class */ (function (_super) {
            __extends(ChangePasswordForm, _super);
            function ChangePasswordForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ChangePasswordForm.init) {
                    ChangePasswordForm.init = true;
                    var s = Serenity;
                    var w0 = s.PasswordEditor;
                    Q.initFormType(ChangePasswordForm, [
                        'OldPassword', w0,
                        'NewPassword', w0,
                        'ConfirmPassword', w0
                    ]);
                }
                return _this;
            }
            ChangePasswordForm.formKey = 'Membership.ChangePassword';
            return ChangePasswordForm;
        }(Serenity.PrefixedContext));
        Membership.ChangePasswordForm = ChangePasswordForm;
    })(Membership = EMR.Membership || (EMR.Membership = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Membership;
    (function (Membership) {
        var ForgotPasswordForm = /** @class */ (function (_super) {
            __extends(ForgotPasswordForm, _super);
            function ForgotPasswordForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ForgotPasswordForm.init) {
                    ForgotPasswordForm.init = true;
                    var s = Serenity;
                    var w0 = s.EmailEditor;
                    Q.initFormType(ForgotPasswordForm, [
                        'Email', w0
                    ]);
                }
                return _this;
            }
            ForgotPasswordForm.formKey = 'Membership.ForgotPassword';
            return ForgotPasswordForm;
        }(Serenity.PrefixedContext));
        Membership.ForgotPasswordForm = ForgotPasswordForm;
    })(Membership = EMR.Membership || (EMR.Membership = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Membership;
    (function (Membership) {
        var LoginForm = /** @class */ (function (_super) {
            __extends(LoginForm, _super);
            function LoginForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!LoginForm.init) {
                    LoginForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.PasswordEditor;
                    Q.initFormType(LoginForm, [
                        'Username', w0,
                        'Password', w1
                    ]);
                }
                return _this;
            }
            LoginForm.formKey = 'Membership.Login';
            return LoginForm;
        }(Serenity.PrefixedContext));
        Membership.LoginForm = LoginForm;
    })(Membership = EMR.Membership || (EMR.Membership = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Membership;
    (function (Membership) {
        var ResetPasswordForm = /** @class */ (function (_super) {
            __extends(ResetPasswordForm, _super);
            function ResetPasswordForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ResetPasswordForm.init) {
                    ResetPasswordForm.init = true;
                    var s = Serenity;
                    var w0 = s.PasswordEditor;
                    Q.initFormType(ResetPasswordForm, [
                        'NewPassword', w0,
                        'ConfirmPassword', w0
                    ]);
                }
                return _this;
            }
            ResetPasswordForm.formKey = 'Membership.ResetPassword';
            return ResetPasswordForm;
        }(Serenity.PrefixedContext));
        Membership.ResetPasswordForm = ResetPasswordForm;
    })(Membership = EMR.Membership || (EMR.Membership = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Membership;
    (function (Membership) {
        var SignUpForm = /** @class */ (function (_super) {
            __extends(SignUpForm, _super);
            function SignUpForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!SignUpForm.init) {
                    SignUpForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.EmailEditor;
                    var w2 = s.PasswordEditor;
                    Q.initFormType(SignUpForm, [
                        'DisplayName', w0,
                        'Email', w1,
                        'ConfirmEmail', w1,
                        'Password', w2,
                        'ConfirmPassword', w2
                    ]);
                }
                return _this;
            }
            SignUpForm.formKey = 'Membership.SignUp';
            return SignUpForm;
        }(Serenity.PrefixedContext));
        Membership.SignUpForm = SignUpForm;
    })(Membership = EMR.Membership || (EMR.Membership = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var DiagnosisForm = /** @class */ (function (_super) {
            __extends(DiagnosisForm, _super);
            function DiagnosisForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!DiagnosisForm.init) {
                    DiagnosisForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.DateEditor;
                    var w3 = s.HtmlContentEditor;
                    Q.initFormType(DiagnosisForm, [
                        'VisitId', w0,
                        'StageId', w1,
                        'SelfDiagnosisId', w1,
                        'SelfDiagnosisDate', w2,
                        'InitialDiagnosisId', w1,
                        'InitialDiagnosisDate', w2,
                        'TopomainId', w1,
                        'ToposubId', w1,
                        'FinalDiagnosisId', w1,
                        'FinalDiagnosisDate', w2,
                        'ComorbidityId', w1,
                        'Comorbidity2Id', w1,
                        'Comorbidity3Id', w1,
                        'Note', w3
                    ]);
                }
                return _this;
            }
            DiagnosisForm.formKey = 'OPD.Diagnosis';
            return DiagnosisForm;
        }(Serenity.PrefixedContext));
        OPD.DiagnosisForm = DiagnosisForm;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var DiagnosisRow;
        (function (DiagnosisRow) {
            DiagnosisRow.idProperty = 'DiagnosisId';
            DiagnosisRow.localTextPrefix = 'OPD.Diagnosis';
        })(DiagnosisRow = OPD.DiagnosisRow || (OPD.DiagnosisRow = {}));
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var DiagnosisService;
        (function (DiagnosisService) {
            DiagnosisService.baseUrl = 'OPD/Diagnosis';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                DiagnosisService[x] = function (r, s, o) {
                    return Q.serviceRequest(DiagnosisService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(DiagnosisService = OPD.DiagnosisService || (OPD.DiagnosisService = {}));
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var ImagingsForm = /** @class */ (function (_super) {
            __extends(ImagingsForm, _super);
            function ImagingsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ImagingsForm.init) {
                    ImagingsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.MultipleImageUploadEditor;
                    var w3 = s.HtmlReportContentEditor;
                    Q.initFormType(ImagingsForm, [
                        'VisitId', w0,
                        'ImagingId', w1,
                        'TestImage', w2,
                        'Note', w3
                    ]);
                }
                return _this;
            }
            ImagingsForm.formKey = 'OPD.Imagings';
            return ImagingsForm;
        }(Serenity.PrefixedContext));
        OPD.ImagingsForm = ImagingsForm;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var ImagingsRow;
        (function (ImagingsRow) {
            ImagingsRow.idProperty = 'Id';
            ImagingsRow.nameProperty = 'TestImage';
            ImagingsRow.localTextPrefix = 'OPD.Imagings';
        })(ImagingsRow = OPD.ImagingsRow || (OPD.ImagingsRow = {}));
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var ImagingsService;
        (function (ImagingsService) {
            ImagingsService.baseUrl = 'OPD/Imagings';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ImagingsService[x] = function (r, s, o) {
                    return Q.serviceRequest(ImagingsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(ImagingsService = OPD.ImagingsService || (OPD.ImagingsService = {}));
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var LabTestForm = /** @class */ (function (_super) {
            __extends(LabTestForm, _super);
            function LabTestForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!LabTestForm.init) {
                    LabTestForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.DateEditor;
                    Q.initFormType(LabTestForm, [
                        'VisitId', w0,
                        'TestTypeId', w1,
                        'LabTestId', w1,
                        'NormalRange', w0,
                        'Unit', w0,
                        'Result', w0,
                        'LabDateTime', w2,
                        'SlabDate', w0
                    ]);
                }
                return _this;
            }
            LabTestForm.formKey = 'OPD.LabTest';
            return LabTestForm;
        }(Serenity.PrefixedContext));
        OPD.LabTestForm = LabTestForm;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var LabTestRow;
        (function (LabTestRow) {
            LabTestRow.idProperty = 'Id';
            LabTestRow.nameProperty = 'Result';
            LabTestRow.localTextPrefix = 'OPD.LabTest';
        })(LabTestRow = OPD.LabTestRow || (OPD.LabTestRow = {}));
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var LabTestService;
        (function (LabTestService) {
            LabTestService.baseUrl = 'OPD/LabTest';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                LabTestService[x] = function (r, s, o) {
                    return Q.serviceRequest(LabTestService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(LabTestService = OPD.LabTestService || (OPD.LabTestService = {}));
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var OpdBloodTransfusionsForm = /** @class */ (function (_super) {
            __extends(OpdBloodTransfusionsForm, _super);
            function OpdBloodTransfusionsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!OpdBloodTransfusionsForm.init) {
                    OpdBloodTransfusionsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.IntegerEditor;
                    var w3 = s.DateTimeEditor;
                    var w4 = EMR.Common.ShamsiDatePickerEditor;
                    Q.initFormType(OpdBloodTransfusionsForm, [
                        'VisitId', w0,
                        'BloodGroupId', w1,
                        'Recomquantity', w2,
                        'Transmitquantity', w2,
                        'BloodstatusId', w1,
                        'RecDateTime', w3,
                        'SRecDate', w4,
                        'TransDateTime', w3,
                        'STransDate', w0
                    ]);
                }
                return _this;
            }
            OpdBloodTransfusionsForm.formKey = 'OPD.OpdBloodTransfusions';
            return OpdBloodTransfusionsForm;
        }(Serenity.PrefixedContext));
        OPD.OpdBloodTransfusionsForm = OpdBloodTransfusionsForm;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var OpdBloodTransfusionsRow;
        (function (OpdBloodTransfusionsRow) {
            OpdBloodTransfusionsRow.idProperty = 'TransfusionId';
            OpdBloodTransfusionsRow.nameProperty = 'Bloodstatus';
            OpdBloodTransfusionsRow.localTextPrefix = 'Medadmins.OpdBloodTransfusions';
        })(OpdBloodTransfusionsRow = OPD.OpdBloodTransfusionsRow || (OPD.OpdBloodTransfusionsRow = {}));
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var OpdBloodTransfusionsService;
        (function (OpdBloodTransfusionsService) {
            OpdBloodTransfusionsService.baseUrl = 'OPD/OpdBloodTransfusions';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                OpdBloodTransfusionsService[x] = function (r, s, o) {
                    return Q.serviceRequest(OpdBloodTransfusionsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(OpdBloodTransfusionsService = OPD.OpdBloodTransfusionsService || (OPD.OpdBloodTransfusionsService = {}));
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var OpdMedadministrationForm = /** @class */ (function (_super) {
            __extends(OpdMedadministrationForm, _super);
            function OpdMedadministrationForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!OpdMedadministrationForm.init) {
                    OpdMedadministrationForm.init = true;
                    var s = Serenity;
                    var w0 = s.IntegerEditor;
                    var w1 = s.StringEditor;
                    var w2 = s.HtmlNoteContentEditor;
                    var w3 = s.DateTimeEditor;
                    var w4 = EMR.Common.ShamsiDatePickerEditor;
                    Q.initFormType(OpdMedadministrationForm, [
                        'OrderId', w0,
                        'Medicine', w1,
                        'Quantity', w0,
                        'Comment', w2,
                        'RecDateTime', w3,
                        'RecSDate', w4,
                        'AppDateTime', w3,
                        'AppSDate', w1
                    ]);
                }
                return _this;
            }
            OpdMedadministrationForm.formKey = 'OPD.OpdMedadministration';
            return OpdMedadministrationForm;
        }(Serenity.PrefixedContext));
        OPD.OpdMedadministrationForm = OpdMedadministrationForm;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var OpdMedadministrationRow;
        (function (OpdMedadministrationRow) {
            OpdMedadministrationRow.idProperty = 'MedadminId';
            OpdMedadministrationRow.nameProperty = 'Comment';
            OpdMedadministrationRow.localTextPrefix = 'Medadmins.OpdMedadministration';
        })(OpdMedadministrationRow = OPD.OpdMedadministrationRow || (OPD.OpdMedadministrationRow = {}));
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var OpdMedadministrationService;
        (function (OpdMedadministrationService) {
            OpdMedadministrationService.baseUrl = 'OPD/OpdMedadministration';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                OpdMedadministrationService[x] = function (r, s, o) {
                    return Q.serviceRequest(OpdMedadministrationService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(OpdMedadministrationService = OPD.OpdMedadministrationService || (OPD.OpdMedadministrationService = {}));
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var PatientHistoryForm = /** @class */ (function (_super) {
            __extends(PatientHistoryForm, _super);
            function PatientHistoryForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!PatientHistoryForm.init) {
                    PatientHistoryForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.HtmlNoteContentEditor;
                    Q.initFormType(PatientHistoryForm, [
                        'VisitId', w0,
                        'HistoryId', w1,
                        'Note', w2
                    ]);
                }
                return _this;
            }
            PatientHistoryForm.formKey = 'OPD.PatientHistory';
            return PatientHistoryForm;
        }(Serenity.PrefixedContext));
        OPD.PatientHistoryForm = PatientHistoryForm;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var PatientHistoryRow;
        (function (PatientHistoryRow) {
            PatientHistoryRow.idProperty = 'Id';
            PatientHistoryRow.nameProperty = 'Note';
            PatientHistoryRow.localTextPrefix = 'OPD.PatientHistory';
        })(PatientHistoryRow = OPD.PatientHistoryRow || (OPD.PatientHistoryRow = {}));
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var PatientHistoryService;
        (function (PatientHistoryService) {
            PatientHistoryService.baseUrl = 'OPD/PatientHistory';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                PatientHistoryService[x] = function (r, s, o) {
                    return Q.serviceRequest(PatientHistoryService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(PatientHistoryService = OPD.PatientHistoryService || (OPD.PatientHistoryService = {}));
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var PatientsForm = /** @class */ (function (_super) {
            __extends(PatientsForm, _super);
            function PatientsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!PatientsForm.init) {
                    PatientsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.DateEditor;
                    var w3 = s.IntegerEditor;
                    Q.initFormType(PatientsForm, [
                        'Mrn', w0,
                        'FirstName', w0,
                        'LastName', w0,
                        'FatherName', w0,
                        'GenderId', w1,
                        'DateOfBirth', w2,
                        'AgeInYear', w3,
                        'EthnicityId', w1,
                        'RefertoDoctor', w1
                    ]);
                }
                return _this;
            }
            PatientsForm.formKey = 'OPD.Patients';
            return PatientsForm;
        }(Serenity.PrefixedContext));
        OPD.PatientsForm = PatientsForm;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var PatientsRow;
        (function (PatientsRow) {
            PatientsRow.idProperty = 'Mrid';
            PatientsRow.nameProperty = 'Mrn';
            PatientsRow.localTextPrefix = 'OPD.Patients';
            PatientsRow.lookupKey = 'Configs.Outpatients';
            function getLookup() {
                return Q.getLookup('Configs.Outpatients');
            }
            PatientsRow.getLookup = getLookup;
        })(PatientsRow = OPD.PatientsRow || (OPD.PatientsRow = {}));
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var PatientsService;
        (function (PatientsService) {
            PatientsService.baseUrl = 'OPD/Patients';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                PatientsService[x] = function (r, s, o) {
                    return Q.serviceRequest(PatientsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(PatientsService = OPD.PatientsService || (OPD.PatientsService = {}));
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var PhysicalExaminationForm = /** @class */ (function (_super) {
            __extends(PhysicalExaminationForm, _super);
            function PhysicalExaminationForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!PhysicalExaminationForm.init) {
                    PhysicalExaminationForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.HtmlNoteContentEditor;
                    Q.initFormType(PhysicalExaminationForm, [
                        'VisitId', w0,
                        'GroupId', w1,
                        'PhysExamId', w1,
                        'Note', w2
                    ]);
                }
                return _this;
            }
            PhysicalExaminationForm.formKey = 'OPD.PhysicalExamination';
            return PhysicalExaminationForm;
        }(Serenity.PrefixedContext));
        OPD.PhysicalExaminationForm = PhysicalExaminationForm;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var PhysicalExaminationRow;
        (function (PhysicalExaminationRow) {
            PhysicalExaminationRow.idProperty = 'Id';
            PhysicalExaminationRow.nameProperty = 'Note';
            PhysicalExaminationRow.localTextPrefix = 'OPD.PhysicalExamination';
        })(PhysicalExaminationRow = OPD.PhysicalExaminationRow || (OPD.PhysicalExaminationRow = {}));
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var PhysicalExaminationService;
        (function (PhysicalExaminationService) {
            PhysicalExaminationService.baseUrl = 'OPD/PhysicalExamination';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                PhysicalExaminationService[x] = function (r, s, o) {
                    return Q.serviceRequest(PhysicalExaminationService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(PhysicalExaminationService = OPD.PhysicalExaminationService || (OPD.PhysicalExaminationService = {}));
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var PrescriptionsForm = /** @class */ (function (_super) {
            __extends(PrescriptionsForm, _super);
            function PrescriptionsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!PrescriptionsForm.init) {
                    PrescriptionsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.IntegerEditor;
                    Q.initFormType(PrescriptionsForm, [
                        'OrderId', w0,
                        'VisitId', w0,
                        'MedicineId', w1,
                        'Quantity', w2,
                        'DailyDose', w0,
                        'Comment', w0
                    ]);
                }
                return _this;
            }
            PrescriptionsForm.formKey = 'OPD.Prescriptions';
            return PrescriptionsForm;
        }(Serenity.PrefixedContext));
        OPD.PrescriptionsForm = PrescriptionsForm;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var PrescriptionsRow;
        (function (PrescriptionsRow) {
            PrescriptionsRow.idProperty = 'OrderId';
            PrescriptionsRow.nameProperty = 'DailyDose';
            PrescriptionsRow.localTextPrefix = 'OPD.Prescriptions';
        })(PrescriptionsRow = OPD.PrescriptionsRow || (OPD.PrescriptionsRow = {}));
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var PrescriptionsService;
        (function (PrescriptionsService) {
            PrescriptionsService.baseUrl = 'OPD/Prescriptions';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                PrescriptionsService[x] = function (r, s, o) {
                    return Q.serviceRequest(PrescriptionsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(PrescriptionsService = OPD.PrescriptionsService || (OPD.PrescriptionsService = {}));
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var RecommedationsForm = /** @class */ (function (_super) {
            __extends(RecommedationsForm, _super);
            function RecommedationsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!RecommedationsForm.init) {
                    RecommedationsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.HtmlNoteContentEditor;
                    Q.initFormType(RecommedationsForm, [
                        'VisitId', w0,
                        'RecomId', w1,
                        'Note', w2
                    ]);
                }
                return _this;
            }
            RecommedationsForm.formKey = 'OPD.Recommedations';
            return RecommedationsForm;
        }(Serenity.PrefixedContext));
        OPD.RecommedationsForm = RecommedationsForm;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var RecommedationsRow;
        (function (RecommedationsRow) {
            RecommedationsRow.idProperty = 'RecommandationId';
            RecommedationsRow.nameProperty = 'Note';
            RecommedationsRow.localTextPrefix = 'OPD.Recommedations';
        })(RecommedationsRow = OPD.RecommedationsRow || (OPD.RecommedationsRow = {}));
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var RecommedationsService;
        (function (RecommedationsService) {
            RecommedationsService.baseUrl = 'OPD/Recommedations';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                RecommedationsService[x] = function (r, s, o) {
                    return Q.serviceRequest(RecommedationsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(RecommedationsService = OPD.RecommedationsService || (OPD.RecommedationsService = {}));
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var VisitsForm = /** @class */ (function (_super) {
            __extends(VisitsForm, _super);
            function VisitsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!VisitsForm.init) {
                    VisitsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.DateEditor;
                    Q.initFormType(VisitsForm, [
                        'Mrid', w0,
                        'MRN', w0,
                        'OccupationId', w1,
                        'MaritalStatusId', w1,
                        'PhoneNumber', w0,
                        'ProvinceId', w1,
                        'DistrictId', w1,
                        'Location', w0,
                        'TypeofvisitId', w1,
                        'DateOfVisit', w2,
                        'CycleId', w1
                    ]);
                }
                return _this;
            }
            VisitsForm.formKey = 'OPD.Visits';
            return VisitsForm;
        }(Serenity.PrefixedContext));
        OPD.VisitsForm = VisitsForm;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var VisitsRow;
        (function (VisitsRow) {
            VisitsRow.idProperty = 'VisitId';
            VisitsRow.nameProperty = 'PhoneNumber';
            VisitsRow.localTextPrefix = 'OPD.Visits';
        })(VisitsRow = OPD.VisitsRow || (OPD.VisitsRow = {}));
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var VisitsService;
        (function (VisitsService) {
            VisitsService.baseUrl = 'OPD/Visits';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                VisitsService[x] = function (r, s, o) {
                    return Q.serviceRequest(VisitsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(VisitsService = OPD.VisitsService || (OPD.VisitsService = {}));
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var VitalSignsForm = /** @class */ (function (_super) {
            __extends(VitalSignsForm, _super);
            function VitalSignsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!VitalSignsForm.init) {
                    VitalSignsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.IntegerEditor;
                    var w2 = s.DateTimeEditor;
                    var w3 = EMR.Common.ShamsiDatePickerEditor;
                    Q.initFormType(VitalSignsForm, [
                        'VisitId', w0,
                        'Weight', w1,
                        'Height', w1,
                        'Pulse', w1,
                        'Rr', w1,
                        'Temp', w1,
                        'Bp', w0,
                        'Hr', w1,
                        'O2', w1,
                        'Pain', w1,
                        'VitalDateTime', w2,
                        'SVitalDate', w3
                    ]);
                }
                return _this;
            }
            VitalSignsForm.formKey = 'OPD.VitalSigns';
            return VitalSignsForm;
        }(Serenity.PrefixedContext));
        OPD.VitalSignsForm = VitalSignsForm;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var VitalSignsRow;
        (function (VitalSignsRow) {
            VitalSignsRow.idProperty = 'VitalId';
            VitalSignsRow.nameProperty = 'Bp';
            VitalSignsRow.localTextPrefix = 'OPD.VitalSigns';
        })(VitalSignsRow = OPD.VitalSignsRow || (OPD.VitalSignsRow = {}));
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var VitalSignsService;
        (function (VitalSignsService) {
            VitalSignsService.baseUrl = 'OPD/VitalSigns';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                VitalSignsService[x] = function (r, s, o) {
                    return Q.serviceRequest(VitalSignsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(VitalSignsService = OPD.VitalSignsService || (OPD.VitalSignsService = {}));
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var VschedulingForm = /** @class */ (function (_super) {
            __extends(VschedulingForm, _super);
            function VschedulingForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!VschedulingForm.init) {
                    VschedulingForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.DateEditor;
                    var w3 = EMR.Common.ShamsiDatePickerEditor;
                    var w4 = s.HtmlNoteContentEditor;
                    Q.initFormType(VschedulingForm, [
                        'VisitId', w0,
                        'CycleId', w1,
                        'PlanDate', w2,
                        'SPlanDate', w3,
                        'Comment', w4
                    ]);
                }
                return _this;
            }
            VschedulingForm.formKey = 'OPD.Vscheduling';
            return VschedulingForm;
        }(Serenity.PrefixedContext));
        OPD.VschedulingForm = VschedulingForm;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var VschedulingRow;
        (function (VschedulingRow) {
            VschedulingRow.idProperty = 'ScheduleId';
            VschedulingRow.nameProperty = 'SPlanDate';
            VschedulingRow.localTextPrefix = 'OPD.Vscheduling';
        })(VschedulingRow = OPD.VschedulingRow || (OPD.VschedulingRow = {}));
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var VschedulingService;
        (function (VschedulingService) {
            VschedulingService.baseUrl = 'OPD/Vscheduling';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                VschedulingService[x] = function (r, s, o) {
                    return Q.serviceRequest(VschedulingService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(VschedulingService = OPD.VschedulingService || (OPD.VschedulingService = {}));
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Pharmacy;
    (function (Pharmacy) {
        var MedicinelossesForm = /** @class */ (function (_super) {
            __extends(MedicinelossesForm, _super);
            function MedicinelossesForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!MedicinelossesForm.init) {
                    MedicinelossesForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    var w1 = s.IntegerEditor;
                    var w2 = s.DateEditor;
                    Q.initFormType(MedicinelossesForm, [
                        'MedicineId', w0,
                        'Quantity', w1,
                        'OutDate', w2,
                        'LosstypeId', w0
                    ]);
                }
                return _this;
            }
            MedicinelossesForm.formKey = 'Pharmacy.Medicinelosses';
            return MedicinelossesForm;
        }(Serenity.PrefixedContext));
        Pharmacy.MedicinelossesForm = MedicinelossesForm;
    })(Pharmacy = EMR.Pharmacy || (EMR.Pharmacy = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Pharmacy;
    (function (Pharmacy) {
        var MedicinelossesRow;
        (function (MedicinelossesRow) {
            MedicinelossesRow.idProperty = 'Id';
            MedicinelossesRow.localTextPrefix = 'Pharmacy.Medicinelosses';
        })(MedicinelossesRow = Pharmacy.MedicinelossesRow || (Pharmacy.MedicinelossesRow = {}));
    })(Pharmacy = EMR.Pharmacy || (EMR.Pharmacy = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Pharmacy;
    (function (Pharmacy) {
        var MedicinelossesService;
        (function (MedicinelossesService) {
            MedicinelossesService.baseUrl = 'Pharmacy/Medicinelosses';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                MedicinelossesService[x] = function (r, s, o) {
                    return Q.serviceRequest(MedicinelossesService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(MedicinelossesService = Pharmacy.MedicinelossesService || (Pharmacy.MedicinelossesService = {}));
    })(Pharmacy = EMR.Pharmacy || (EMR.Pharmacy = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Pharmacy;
    (function (Pharmacy) {
        var MedicinesForm = /** @class */ (function (_super) {
            __extends(MedicinesForm, _super);
            function MedicinesForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!MedicinesForm.init) {
                    MedicinesForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.IntegerEditor;
                    var w3 = s.DecimalEditor;
                    var w4 = s.DateEditor;
                    var w5 = EMR.Common.ShamsiDatePickerEditor;
                    var w6 = s.BooleanEditor;
                    Q.initFormType(MedicinesForm, [
                        'GenericName', w0,
                        'BrandName', w0,
                        'Strength', w0,
                        'FormId', w1,
                        'Quantity', w2,
                        'UnitPrice', w3,
                        'BatchNo', w0,
                        'QuantityUsed', w2,
                        'InDate', w4,
                        'SInDate', w5,
                        'ExpiryDate', w4,
                        'SExpiryDate', w5,
                        'Mid', w1,
                        'Vid', w1,
                        'Discontinue', w6
                    ]);
                }
                return _this;
            }
            MedicinesForm.formKey = 'Pharmacy.Medicines';
            return MedicinesForm;
        }(Serenity.PrefixedContext));
        Pharmacy.MedicinesForm = MedicinesForm;
    })(Pharmacy = EMR.Pharmacy || (EMR.Pharmacy = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Pharmacy;
    (function (Pharmacy) {
        var MedicinesRow;
        (function (MedicinesRow) {
            MedicinesRow.idProperty = 'MedicineId';
            MedicinesRow.nameProperty = 'MedicineName';
            MedicinesRow.localTextPrefix = 'Pharmacy.Medicines';
            MedicinesRow.lookupKey = 'Pharmacy.Medicines';
            function getLookup() {
                return Q.getLookup('Pharmacy.Medicines');
            }
            MedicinesRow.getLookup = getLookup;
        })(MedicinesRow = Pharmacy.MedicinesRow || (Pharmacy.MedicinesRow = {}));
    })(Pharmacy = EMR.Pharmacy || (EMR.Pharmacy = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Pharmacy;
    (function (Pharmacy) {
        var MedicinesService;
        (function (MedicinesService) {
            MedicinesService.baseUrl = 'Pharmacy/Medicines';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                MedicinesService[x] = function (r, s, o) {
                    return Q.serviceRequest(MedicinesService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(MedicinesService = Pharmacy.MedicinesService || (Pharmacy.MedicinesService = {}));
    })(Pharmacy = EMR.Pharmacy || (EMR.Pharmacy = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Pharmacy;
    (function (Pharmacy) {
        var MedPatientsForm = /** @class */ (function (_super) {
            __extends(MedPatientsForm, _super);
            function MedPatientsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!MedPatientsForm.init) {
                    MedPatientsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.DateEditor;
                    var w3 = s.IntegerEditor;
                    Q.initFormType(MedPatientsForm, [
                        'Mrn', w0,
                        'FirstName', w0,
                        'LastName', w0,
                        'FatherName', w0,
                        'GenderId', w1,
                        'DateOfBirth', w2,
                        'AgeInYear', w3,
                        'EthnicityId', w1,
                        'RefertoDoctor', w1
                    ]);
                }
                return _this;
            }
            MedPatientsForm.formKey = 'Pharmacy.MedPatients';
            return MedPatientsForm;
        }(Serenity.PrefixedContext));
        Pharmacy.MedPatientsForm = MedPatientsForm;
    })(Pharmacy = EMR.Pharmacy || (EMR.Pharmacy = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Pharmacy;
    (function (Pharmacy) {
        var MedPatientsRow;
        (function (MedPatientsRow) {
            MedPatientsRow.idProperty = 'Mrid';
            MedPatientsRow.nameProperty = 'Mrn';
            MedPatientsRow.localTextPrefix = 'Pharmacy.MedPatients';
        })(MedPatientsRow = Pharmacy.MedPatientsRow || (Pharmacy.MedPatientsRow = {}));
    })(Pharmacy = EMR.Pharmacy || (EMR.Pharmacy = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Pharmacy;
    (function (Pharmacy) {
        var MedPatientsService;
        (function (MedPatientsService) {
            MedPatientsService.baseUrl = 'Pharmacy/MedPatients';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                MedPatientsService[x] = function (r, s, o) {
                    return Q.serviceRequest(MedPatientsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(MedPatientsService = Pharmacy.MedPatientsService || (Pharmacy.MedPatientsService = {}));
    })(Pharmacy = EMR.Pharmacy || (EMR.Pharmacy = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Pharmacy;
    (function (Pharmacy) {
        var MedPrescriptionsForm = /** @class */ (function (_super) {
            __extends(MedPrescriptionsForm, _super);
            function MedPrescriptionsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!MedPrescriptionsForm.init) {
                    MedPrescriptionsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.IntegerEditor;
                    var w3 = s.BooleanEditor;
                    Q.initFormType(MedPrescriptionsForm, [
                        'VisitId', w0,
                        'MedicineId', w1,
                        'Quantity', w2,
                        'DailyDose', w0,
                        'Comment', w0,
                        'InsideSale', w3
                    ]);
                }
                return _this;
            }
            MedPrescriptionsForm.formKey = 'Pharmacy.MedPrescriptions';
            return MedPrescriptionsForm;
        }(Serenity.PrefixedContext));
        Pharmacy.MedPrescriptionsForm = MedPrescriptionsForm;
    })(Pharmacy = EMR.Pharmacy || (EMR.Pharmacy = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Pharmacy;
    (function (Pharmacy) {
        var MedPrescriptionsRow;
        (function (MedPrescriptionsRow) {
            MedPrescriptionsRow.idProperty = 'OrderId';
            MedPrescriptionsRow.nameProperty = 'DailyDose';
            MedPrescriptionsRow.localTextPrefix = 'Pharmacy.MedPrescriptions';
        })(MedPrescriptionsRow = Pharmacy.MedPrescriptionsRow || (Pharmacy.MedPrescriptionsRow = {}));
    })(Pharmacy = EMR.Pharmacy || (EMR.Pharmacy = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Pharmacy;
    (function (Pharmacy) {
        var MedPrescriptionsService;
        (function (MedPrescriptionsService) {
            MedPrescriptionsService.baseUrl = 'Pharmacy/MedPrescriptions';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                MedPrescriptionsService[x] = function (r, s, o) {
                    return Q.serviceRequest(MedPrescriptionsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(MedPrescriptionsService = Pharmacy.MedPrescriptionsService || (Pharmacy.MedPrescriptionsService = {}));
    })(Pharmacy = EMR.Pharmacy || (EMR.Pharmacy = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Pharmacy;
    (function (Pharmacy) {
        var MedvisitsForm = /** @class */ (function (_super) {
            __extends(MedvisitsForm, _super);
            function MedvisitsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!MedvisitsForm.init) {
                    MedvisitsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.DateEditor;
                    Q.initFormType(MedvisitsForm, [
                        'Mrid', w0,
                        'MRN', w0,
                        'OccupationId', w1,
                        'MaritalStatusId', w1,
                        'PhoneNumber', w0,
                        'ProvinceId', w1,
                        'DistrictId', w1,
                        'Location', w0,
                        'TypeofvisitId', w1,
                        'DateOfVisit', w2,
                        'CycleId', w1
                    ]);
                }
                return _this;
            }
            MedvisitsForm.formKey = 'Pharmacy.Medvisits';
            return MedvisitsForm;
        }(Serenity.PrefixedContext));
        Pharmacy.MedvisitsForm = MedvisitsForm;
    })(Pharmacy = EMR.Pharmacy || (EMR.Pharmacy = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Pharmacy;
    (function (Pharmacy) {
        var MedvisitsRow;
        (function (MedvisitsRow) {
            MedvisitsRow.idProperty = 'VisitId';
            MedvisitsRow.nameProperty = 'PhoneNumber';
            MedvisitsRow.localTextPrefix = 'Pharmacy.Medvisits';
        })(MedvisitsRow = Pharmacy.MedvisitsRow || (Pharmacy.MedvisitsRow = {}));
    })(Pharmacy = EMR.Pharmacy || (EMR.Pharmacy = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Pharmacy;
    (function (Pharmacy) {
        var MedvisitsService;
        (function (MedvisitsService) {
            MedvisitsService.baseUrl = 'Pharmacy/Medvisits';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                MedvisitsService[x] = function (r, s, o) {
                    return Q.serviceRequest(MedvisitsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(MedvisitsService = Pharmacy.MedvisitsService || (Pharmacy.MedvisitsService = {}));
    })(Pharmacy = EMR.Pharmacy || (EMR.Pharmacy = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Register;
    (function (Register) {
        var NameslistRow;
        (function (NameslistRow) {
            NameslistRow.idProperty = 'Id';
            NameslistRow.nameProperty = 'FullName';
            NameslistRow.localTextPrefix = 'Register.Nameslist';
            NameslistRow.lookupKey = 'Register.NameslistRow';
            function getLookup() {
                return Q.getLookup('Register.NameslistRow');
            }
            NameslistRow.getLookup = getLookup;
        })(NameslistRow = Register.NameslistRow || (Register.NameslistRow = {}));
    })(Register = EMR.Register || (EMR.Register = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Register;
    (function (Register) {
        var PatAttendantsForm = /** @class */ (function (_super) {
            __extends(PatAttendantsForm, _super);
            function PatAttendantsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!PatAttendantsForm.init) {
                    PatAttendantsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.MaskedEditor;
                    Q.initFormType(PatAttendantsForm, [
                        'VisitId', w0,
                        'AttendantName', w0,
                        'FatherName', w0,
                        'GenderId', w1,
                        'Phone', w2,
                        'RelationType', w1,
                        'Address', w0
                    ]);
                }
                return _this;
            }
            PatAttendantsForm.formKey = 'Register.PatAttendants';
            return PatAttendantsForm;
        }(Serenity.PrefixedContext));
        Register.PatAttendantsForm = PatAttendantsForm;
    })(Register = EMR.Register || (EMR.Register = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Register;
    (function (Register) {
        var PatAttendantsRow;
        (function (PatAttendantsRow) {
            PatAttendantsRow.idProperty = 'AttendantId';
            PatAttendantsRow.nameProperty = 'AttendantName';
            PatAttendantsRow.localTextPrefix = 'Register.PatAttendants';
        })(PatAttendantsRow = Register.PatAttendantsRow || (Register.PatAttendantsRow = {}));
    })(Register = EMR.Register || (EMR.Register = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Register;
    (function (Register) {
        var PatAttendantsService;
        (function (PatAttendantsService) {
            PatAttendantsService.baseUrl = 'Register/PatAttendants';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                PatAttendantsService[x] = function (r, s, o) {
                    return Q.serviceRequest(PatAttendantsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(PatAttendantsService = Register.PatAttendantsService || (Register.PatAttendantsService = {}));
    })(Register = EMR.Register || (EMR.Register = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Register;
    (function (Register) {
        var RegoutpatientsForm = /** @class */ (function (_super) {
            __extends(RegoutpatientsForm, _super);
            function RegoutpatientsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!RegoutpatientsForm.init) {
                    RegoutpatientsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.DateEditor;
                    var w3 = EMR.Common.ShamsiDatePickerEditor;
                    var w4 = s.IntegerEditor;
                    Q.initFormType(RegoutpatientsForm, [
                        'Mrn', w0,
                        'FirstName', w0,
                        'LastName', w0,
                        'FatherName', w0,
                        'GenderId', w1,
                        'GrandFather', w0,
                        'DateOfBirth', w2,
                        'SDateOfBirth', w3,
                        'AgeInYear', w4,
                        'ProvinceId', w1,
                        'DistrictId', w1,
                        'Location', w0,
                        'RefertoDoctor', w1
                    ]);
                }
                return _this;
            }
            RegoutpatientsForm.formKey = 'Register.Regoutpatients';
            return RegoutpatientsForm;
        }(Serenity.PrefixedContext));
        Register.RegoutpatientsForm = RegoutpatientsForm;
    })(Register = EMR.Register || (EMR.Register = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Register;
    (function (Register) {
        var RegoutpatientsRow;
        (function (RegoutpatientsRow) {
            RegoutpatientsRow.idProperty = 'Mrid';
            RegoutpatientsRow.nameProperty = 'Mrn';
            RegoutpatientsRow.localTextPrefix = 'Register.Regoutpatients';
        })(RegoutpatientsRow = Register.RegoutpatientsRow || (Register.RegoutpatientsRow = {}));
    })(Register = EMR.Register || (EMR.Register = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Register;
    (function (Register) {
        var RegoutpatientsService;
        (function (RegoutpatientsService) {
            RegoutpatientsService.baseUrl = 'Register/Regoutpatients';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                RegoutpatientsService[x] = function (r, s, o) {
                    return Q.serviceRequest(RegoutpatientsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(RegoutpatientsService = Register.RegoutpatientsService || (Register.RegoutpatientsService = {}));
    })(Register = EMR.Register || (EMR.Register = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Register;
    (function (Register) {
        var RegvisitsForm = /** @class */ (function (_super) {
            __extends(RegvisitsForm, _super);
            function RegvisitsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!RegvisitsForm.init) {
                    RegvisitsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.MaskedEditor;
                    var w3 = s.IntegerEditor;
                    var w4 = s.DateEditor;
                    var w5 = EMR.Common.ShamsiDatePickerEditor;
                    Q.initFormType(RegvisitsForm, [
                        'Mrid', w0,
                        'MRN', w0,
                        'OccupationId', w1,
                        'MaritalStatusId', w1,
                        'PhoneNumber', w2,
                        'ProvinceId', w1,
                        'DistrictId', w1,
                        'Location', w0,
                        'TypeofvisitId', w1,
                        'DurationOfStay', w3,
                        'DateOfVisit', w4,
                        'SDateOfVisit', w5,
                        'CycleId', w1
                    ]);
                }
                return _this;
            }
            RegvisitsForm.formKey = 'Register.Regvisits';
            return RegvisitsForm;
        }(Serenity.PrefixedContext));
        Register.RegvisitsForm = RegvisitsForm;
    })(Register = EMR.Register || (EMR.Register = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Register;
    (function (Register) {
        var RegvisitsRow;
        (function (RegvisitsRow) {
            RegvisitsRow.idProperty = 'VisitId';
            RegvisitsRow.nameProperty = 'PhoneNumber';
            RegvisitsRow.localTextPrefix = 'Register.Regvisits';
        })(RegvisitsRow = Register.RegvisitsRow || (Register.RegvisitsRow = {}));
    })(Register = EMR.Register || (EMR.Register = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Register;
    (function (Register) {
        var RegvisitsService;
        (function (RegvisitsService) {
            RegvisitsService.baseUrl = 'Register/Regvisits';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                RegvisitsService[x] = function (r, s, o) {
                    return Q.serviceRequest(RegvisitsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(RegvisitsService = Register.RegvisitsService || (Register.RegvisitsService = {}));
    })(Register = EMR.Register || (EMR.Register = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var HfNoOfPatientsRow;
        (function (HfNoOfPatientsRow) {
            HfNoOfPatientsRow.idProperty = 'FacilityId';
            HfNoOfPatientsRow.localTextPrefix = 'Regs.HfNoOfPatients';
        })(HfNoOfPatientsRow = Regs.HfNoOfPatientsRow || (Regs.HfNoOfPatientsRow = {}));
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var HfNoOfPatientsService;
        (function (HfNoOfPatientsService) {
            HfNoOfPatientsService.baseUrl = 'Regs/HfNoOfPatients';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                HfNoOfPatientsService[x] = function (r, s, o) {
                    return Q.serviceRequest(HfNoOfPatientsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(HfNoOfPatientsService = Regs.HfNoOfPatientsService || (Regs.HfNoOfPatientsService = {}));
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var NoteRow;
        (function (NoteRow) {
            NoteRow.idProperty = 'NoteId';
            NoteRow.nameProperty = 'EntityType';
            NoteRow.localTextPrefix = 'Expenditure.Note';
        })(NoteRow = Regs.NoteRow || (Regs.NoteRow = {}));
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblAdmissionsDischargeForm = /** @class */ (function (_super) {
            __extends(TblAdmissionsDischargeForm, _super);
            function TblAdmissionsDischargeForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblAdmissionsDischargeForm.init) {
                    TblAdmissionsDischargeForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = EMR.Common.ShamsiDatePickerEditor;
                    var w3 = s.DateEditor;
                    var w4 = s.IntegerEditor;
                    Q.initFormType(TblAdmissionsDischargeForm, [
                        'Mrid', w0,
                        'MRN', w0,
                        'Wardid', w1,
                        'AdDiagnosis', w1,
                        'AdDateH', w2,
                        'AdDate', w3,
                        'AdAge', w4,
                        'AdAgeType', w1,
                        'AdCaseType', w1,
                        'DisStatus', w1,
                        'DisDiagResult', w1,
                        'DisDiagCausDeath', w1,
                        'DisDateH', w2,
                        'DisDate', w3,
                        'AbortionType', w1
                    ]);
                }
                return _this;
            }
            TblAdmissionsDischargeForm.formKey = 'Regs.TblAdmissionsDischarge';
            return TblAdmissionsDischargeForm;
        }(Serenity.PrefixedContext));
        Regs.TblAdmissionsDischargeForm = TblAdmissionsDischargeForm;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblAdmissionsDischargeRow;
        (function (TblAdmissionsDischargeRow) {
            TblAdmissionsDischargeRow.idProperty = 'AdId';
            TblAdmissionsDischargeRow.nameProperty = 'AdDateH';
            TblAdmissionsDischargeRow.localTextPrefix = 'Regs.TblAdmissionsDischarge';
        })(TblAdmissionsDischargeRow = Regs.TblAdmissionsDischargeRow || (Regs.TblAdmissionsDischargeRow = {}));
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblAdmissionsDischargeService;
        (function (TblAdmissionsDischargeService) {
            TblAdmissionsDischargeService.baseUrl = 'Regs/TblAdmissionsDischarge';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblAdmissionsDischargeService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblAdmissionsDischargeService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblAdmissionsDischargeService = Regs.TblAdmissionsDischargeService || (Regs.TblAdmissionsDischargeService = {}));
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblDischargeForm = /** @class */ (function (_super) {
            __extends(TblDischargeForm, _super);
            function TblDischargeForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblDischargeForm.init) {
                    TblDischargeForm.init = true;
                    var s = Serenity;
                    var w0 = s.IntegerEditor;
                    var w1 = s.StringEditor;
                    var w2 = s.DateEditor;
                    Q.initFormType(TblDischargeForm, [
                        'Mrid', w0,
                        'MRN', w1,
                        'Wardid', w0,
                        'DisDiagnosis', w1,
                        'DisDate', w2,
                        'DisDateH', w1,
                        'DisStatus', w1,
                        'UserName', w1,
                        'LastUpdated', w2,
                        'TenantId', w0,
                        'DisDiagResult', w0
                    ]);
                }
                return _this;
            }
            TblDischargeForm.formKey = 'Regs.TblDischarge';
            return TblDischargeForm;
        }(Serenity.PrefixedContext));
        Regs.TblDischargeForm = TblDischargeForm;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblDischargeRow;
        (function (TblDischargeRow) {
            TblDischargeRow.idProperty = 'DisId';
            TblDischargeRow.nameProperty = 'DisDiagnosis';
            TblDischargeRow.localTextPrefix = 'Regs.TblDischarge';
        })(TblDischargeRow = Regs.TblDischargeRow || (Regs.TblDischargeRow = {}));
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblDischargeService;
        (function (TblDischargeService) {
            TblDischargeService.baseUrl = 'Regs/TblDischarge';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblDischargeService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblDischargeService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblDischargeService = Regs.TblDischargeService || (Regs.TblDischargeService = {}));
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblNewBornManagementForm = /** @class */ (function (_super) {
            __extends(TblNewBornManagementForm, _super);
            function TblNewBornManagementForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblNewBornManagementForm.init) {
                    TblNewBornManagementForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    Q.initFormType(TblNewBornManagementForm, [
                        'AdId', w0,
                        'NbStatus', w1,
                        'NbOutcome', w1,
                        'NbWeight', w1,
                        'NbNumber', w1,
                        'NbGender', w1
                    ]);
                }
                return _this;
            }
            TblNewBornManagementForm.formKey = 'Regs.TblNewBornManagement';
            return TblNewBornManagementForm;
        }(Serenity.PrefixedContext));
        Regs.TblNewBornManagementForm = TblNewBornManagementForm;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblNewBornManagementRow;
        (function (TblNewBornManagementRow) {
            TblNewBornManagementRow.idProperty = 'NbId';
            TblNewBornManagementRow.nameProperty = 'UserName';
            TblNewBornManagementRow.localTextPrefix = 'Regs.TblNewBornManagement';
        })(TblNewBornManagementRow = Regs.TblNewBornManagementRow || (Regs.TblNewBornManagementRow = {}));
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblNewBornManagementService;
        (function (TblNewBornManagementService) {
            TblNewBornManagementService.baseUrl = 'Regs/TblNewBornManagement';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblNewBornManagementService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblNewBornManagementService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblNewBornManagementService = Regs.TblNewBornManagementService || (Regs.TblNewBornManagementService = {}));
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblOperationsForm = /** @class */ (function (_super) {
            __extends(TblOperationsForm, _super);
            function TblOperationsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblOperationsForm.init) {
                    TblOperationsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.TextAreaEditor;
                    Q.initFormType(TblOperationsForm, [
                        'AdId', w0,
                        'WardId', w1,
                        'Wvid', w1,
                        'AdValue', w1,
                        'Remarks', w2
                    ]);
                }
                return _this;
            }
            TblOperationsForm.formKey = 'Regs.TblOperations';
            return TblOperationsForm;
        }(Serenity.PrefixedContext));
        Regs.TblOperationsForm = TblOperationsForm;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblOperationsRow;
        (function (TblOperationsRow) {
            TblOperationsRow.idProperty = 'Evid';
            TblOperationsRow.nameProperty = 'Remarks';
            TblOperationsRow.localTextPrefix = 'Regs.TblOperations';
        })(TblOperationsRow = Regs.TblOperationsRow || (Regs.TblOperationsRow = {}));
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblOperationsService;
        (function (TblOperationsService) {
            TblOperationsService.baseUrl = 'Regs/TblOperations';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblOperationsService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblOperationsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblOperationsService = Regs.TblOperationsService || (Regs.TblOperationsService = {}));
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblPatDetailsForm = /** @class */ (function (_super) {
            __extends(TblPatDetailsForm, _super);
            function TblPatDetailsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblPatDetailsForm.init) {
                    TblPatDetailsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = EMR.Common.ShamsiDatePickerEditor;
                    var w3 = s.DateEditor;
                    Q.initFormType(TblPatDetailsForm, [
                        'Mrid', w0,
                        'MRN', w0,
                        'ProvinceId', w1,
                        'DistrictId', w1,
                        'PatLocation', w0,
                        'MariId', w1,
                        'PatPhone', w0,
                        'Eid', w1,
                        'Oid', w1,
                        'PatDdateH', w2,
                        'PatDdate', w3
                    ]);
                }
                return _this;
            }
            TblPatDetailsForm.formKey = 'Regs.TblPatDetails';
            return TblPatDetailsForm;
        }(Serenity.PrefixedContext));
        Regs.TblPatDetailsForm = TblPatDetailsForm;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblPatDetailsRow;
        (function (TblPatDetailsRow) {
            TblPatDetailsRow.idProperty = 'PdId';
            TblPatDetailsRow.nameProperty = 'PatLocation';
            TblPatDetailsRow.localTextPrefix = 'Regs.TblPatDetails';
        })(TblPatDetailsRow = Regs.TblPatDetailsRow || (Regs.TblPatDetailsRow = {}));
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblPatDetailsService;
        (function (TblPatDetailsService) {
            TblPatDetailsService.baseUrl = 'Regs/TblPatDetails';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblPatDetailsService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblPatDetailsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblPatDetailsService = Regs.TblPatDetailsService || (Regs.TblPatDetailsService = {}));
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblPatientNextOfKeenForm = /** @class */ (function (_super) {
            __extends(TblPatientNextOfKeenForm, _super);
            function TblPatientNextOfKeenForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblPatientNextOfKeenForm.init) {
                    TblPatientNextOfKeenForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    Q.initFormType(TblPatientNextOfKeenForm, [
                        'Mrid', w0,
                        'MRN', w0,
                        'NoKNameD', w0,
                        'NoKPhone', w0,
                        'NoKRelationType', w1,
                        'NoKAdd', w0
                    ]);
                }
                return _this;
            }
            TblPatientNextOfKeenForm.formKey = 'Regs.TblPatientNextOfKeen';
            return TblPatientNextOfKeenForm;
        }(Serenity.PrefixedContext));
        Regs.TblPatientNextOfKeenForm = TblPatientNextOfKeenForm;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblPatientNextOfKeenRow;
        (function (TblPatientNextOfKeenRow) {
            TblPatientNextOfKeenRow.idProperty = 'PatNoKid';
            TblPatientNextOfKeenRow.nameProperty = 'NoKNameD';
            TblPatientNextOfKeenRow.localTextPrefix = 'Regs.TblPatientNextOfKeen';
        })(TblPatientNextOfKeenRow = Regs.TblPatientNextOfKeenRow || (Regs.TblPatientNextOfKeenRow = {}));
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblPatientNextOfKeenService;
        (function (TblPatientNextOfKeenService) {
            TblPatientNextOfKeenService.baseUrl = 'Regs/TblPatientNextOfKeen';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblPatientNextOfKeenService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblPatientNextOfKeenService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblPatientNextOfKeenService = Regs.TblPatientNextOfKeenService || (Regs.TblPatientNextOfKeenService = {}));
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblPatientsForm = /** @class */ (function (_super) {
            __extends(TblPatientsForm, _super);
            function TblPatientsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblPatientsForm.init) {
                    TblPatientsForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    var w1 = s.StringEditor;
                    Q.initFormType(TblPatientsForm, [
                        'FacilityId', w0,
                        'MRN', w1,
                        'PatName', w1,
                        'PatFatName', w1,
                        'PatHusbandName', w1,
                        'PatRealationName', w1,
                        'PatGender', w0,
                        'PatBlooldGroup', w0,
                        'PatTazkera', w1
                    ]);
                }
                return _this;
            }
            TblPatientsForm.formKey = 'Regs.TblPatients';
            return TblPatientsForm;
        }(Serenity.PrefixedContext));
        Regs.TblPatientsForm = TblPatientsForm;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblPatientsRow;
        (function (TblPatientsRow) {
            TblPatientsRow.idProperty = 'Mrid';
            TblPatientsRow.nameProperty = 'PatName';
            TblPatientsRow.localTextPrefix = 'Regs.TblPatients';
            TblPatientsRow.lookupKey = 'Regs.TblPatients';
            function getLookup() {
                return Q.getLookup('Regs.TblPatients');
            }
            TblPatientsRow.getLookup = getLookup;
        })(TblPatientsRow = Regs.TblPatientsRow || (Regs.TblPatientsRow = {}));
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblPatientsService;
        (function (TblPatientsService) {
            TblPatientsService.baseUrl = 'Regs/TblPatients';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List',
                'UpdateHealthFacilities'
            ].forEach(function (x) {
                TblPatientsService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblPatientsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblPatientsService = Regs.TblPatientsService || (Regs.TblPatientsService = {}));
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblReferralForm = /** @class */ (function (_super) {
            __extends(TblReferralForm, _super);
            function TblReferralForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblReferralForm.init) {
                    TblReferralForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.DateEditor;
                    var w3 = EMR.Common.ShamsiDatePickerEditor;
                    Q.initFormType(TblReferralForm, [
                        'AdId', w0,
                        'FacilityId', w1,
                        'WardId', w1,
                        'RefDiagnosis', w1,
                        'RefDate', w2,
                        'RefDateH', w3,
                        'RefType', w1
                    ]);
                }
                return _this;
            }
            TblReferralForm.formKey = 'Regs.TblReferral';
            return TblReferralForm;
        }(Serenity.PrefixedContext));
        Regs.TblReferralForm = TblReferralForm;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblReferralRow;
        (function (TblReferralRow) {
            TblReferralRow.idProperty = 'RefId';
            TblReferralRow.nameProperty = 'DiseaseName';
            TblReferralRow.localTextPrefix = 'Regs.TblReferral';
        })(TblReferralRow = Regs.TblReferralRow || (Regs.TblReferralRow = {}));
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblReferralService;
        (function (TblReferralService) {
            TblReferralService.baseUrl = 'Regs/TblReferral';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblReferralService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblReferralService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblReferralService = Regs.TblReferralService || (Regs.TblReferralService = {}));
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblTestExaminationsForm = /** @class */ (function (_super) {
            __extends(TblTestExaminationsForm, _super);
            function TblTestExaminationsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblTestExaminationsForm.init) {
                    TblTestExaminationsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    Q.initFormType(TblTestExaminationsForm, [
                        'AdId', w0,
                        'EdId', w1,
                        'TestExaminations', w1,
                        'Diagnosis', w1
                    ]);
                }
                return _this;
            }
            TblTestExaminationsForm.formKey = 'Regs.TblTestExaminations';
            return TblTestExaminationsForm;
        }(Serenity.PrefixedContext));
        Regs.TblTestExaminationsForm = TblTestExaminationsForm;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblTestExaminationsRow;
        (function (TblTestExaminationsRow) {
            TblTestExaminationsRow.idProperty = 'PatTestId';
            TblTestExaminationsRow.nameProperty = 'TestName';
            TblTestExaminationsRow.localTextPrefix = 'Regs.TblTestExaminations';
        })(TblTestExaminationsRow = Regs.TblTestExaminationsRow || (Regs.TblTestExaminationsRow = {}));
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblTestExaminationsService;
        (function (TblTestExaminationsService) {
            TblTestExaminationsService.baseUrl = 'Regs/TblTestExaminations';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblTestExaminationsService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblTestExaminationsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblTestExaminationsService = Regs.TblTestExaminationsService || (Regs.TblTestExaminationsService = {}));
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Structure;
    (function (Structure) {
        var BedReportDetailsForm = /** @class */ (function (_super) {
            __extends(BedReportDetailsForm, _super);
            function BedReportDetailsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!BedReportDetailsForm.init) {
                    BedReportDetailsForm.init = true;
                    var s = Serenity;
                    var w0 = s.IntegerEditor;
                    var w1 = s.LookupEditor;
                    Q.initFormType(BedReportDetailsForm, [
                        'ReportId', w0,
                        'WardId', w1,
                        'BedActive', w0
                    ]);
                }
                return _this;
            }
            BedReportDetailsForm.formKey = 'Structure.BedReportDetails';
            return BedReportDetailsForm;
        }(Serenity.PrefixedContext));
        Structure.BedReportDetailsForm = BedReportDetailsForm;
    })(Structure = EMR.Structure || (EMR.Structure = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Structure;
    (function (Structure) {
        var BedReportDetailsRow;
        (function (BedReportDetailsRow) {
            BedReportDetailsRow.idProperty = 'Id';
            BedReportDetailsRow.nameProperty = 'WardWardName';
            BedReportDetailsRow.localTextPrefix = 'Structure.BedReportDetails';
        })(BedReportDetailsRow = Structure.BedReportDetailsRow || (Structure.BedReportDetailsRow = {}));
    })(Structure = EMR.Structure || (EMR.Structure = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Structure;
    (function (Structure) {
        var BedReportDetailsService;
        (function (BedReportDetailsService) {
            BedReportDetailsService.baseUrl = 'Structure/BedReportDetails';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                BedReportDetailsService[x] = function (r, s, o) {
                    return Q.serviceRequest(BedReportDetailsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(BedReportDetailsService = Structure.BedReportDetailsService || (Structure.BedReportDetailsService = {}));
    })(Structure = EMR.Structure || (EMR.Structure = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Structure;
    (function (Structure) {
        var BedReportsForm = /** @class */ (function (_super) {
            __extends(BedReportsForm, _super);
            function BedReportsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!BedReportsForm.init) {
                    BedReportsForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    var w1 = s.IntegerEditor;
                    var w2 = s.StringEditor;
                    var w3 = Structure.BedReportDetailsEditor;
                    Q.initFormType(BedReportsForm, [
                        'FacilityId', w0,
                        'Year', w1,
                        'Month', w1,
                        'Comment', w2,
                        'DetailList', w3
                    ]);
                }
                return _this;
            }
            BedReportsForm.formKey = 'Structure.BedReports';
            return BedReportsForm;
        }(Serenity.PrefixedContext));
        Structure.BedReportsForm = BedReportsForm;
    })(Structure = EMR.Structure || (EMR.Structure = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Structure;
    (function (Structure) {
        var BedReportsRow;
        (function (BedReportsRow) {
            BedReportsRow.idProperty = 'ReportId';
            BedReportsRow.nameProperty = 'Comment';
            BedReportsRow.localTextPrefix = 'Structure.BedReports';
        })(BedReportsRow = Structure.BedReportsRow || (Structure.BedReportsRow = {}));
    })(Structure = EMR.Structure || (EMR.Structure = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Structure;
    (function (Structure) {
        var BedReportsService;
        (function (BedReportsService) {
            BedReportsService.baseUrl = 'Structure/BedReports';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                BedReportsService[x] = function (r, s, o) {
                    return Q.serviceRequest(BedReportsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(BedReportsService = Structure.BedReportsService || (Structure.BedReportsService = {}));
    })(Structure = EMR.Structure || (EMR.Structure = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Structure;
    (function (Structure) {
        var TblDutyForm = /** @class */ (function (_super) {
            __extends(TblDutyForm, _super);
            function TblDutyForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblDutyForm.init) {
                    TblDutyForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.IntegerEditor;
                    var w2 = s.DateEditor;
                    Q.initFormType(TblDutyForm, [
                        'EmpId', w0,
                        'WardId', w1,
                        'DutYear', w1,
                        'DutMonth', w1,
                        'UserName', w0,
                        'LastUpdated', w2,
                        'TenantId', w1
                    ]);
                }
                return _this;
            }
            TblDutyForm.formKey = 'Structure.TblDuty';
            return TblDutyForm;
        }(Serenity.PrefixedContext));
        Structure.TblDutyForm = TblDutyForm;
    })(Structure = EMR.Structure || (EMR.Structure = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Structure;
    (function (Structure) {
        var TblDutyRow;
        (function (TblDutyRow) {
            TblDutyRow.idProperty = 'DutId';
            TblDutyRow.nameProperty = 'EmpId';
            TblDutyRow.localTextPrefix = 'Structure.TblDuty';
        })(TblDutyRow = Structure.TblDutyRow || (Structure.TblDutyRow = {}));
    })(Structure = EMR.Structure || (EMR.Structure = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Structure;
    (function (Structure) {
        var TblDutyService;
        (function (TblDutyService) {
            TblDutyService.baseUrl = 'Structure/TblDuty';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblDutyService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblDutyService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblDutyService = Structure.TblDutyService || (Structure.TblDutyService = {}));
    })(Structure = EMR.Structure || (EMR.Structure = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Structure;
    (function (Structure) {
        var TblEmpForm = /** @class */ (function (_super) {
            __extends(TblEmpForm, _super);
            function TblEmpForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!TblEmpForm.init) {
                    TblEmpForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.DateEditor;
                    var w2 = s.IntegerEditor;
                    Q.initFormType(TblEmpForm, [
                        'EmpName', w0,
                        'EmpNameD', w0,
                        'EmpFatherName', w0,
                        'EmpFatherNameD', w0,
                        'EmpLastName', w0,
                        'EmpLastNameD', w0,
                        'UserName', w0,
                        'LastUpdated', w1,
                        'TenantId', w2
                    ]);
                }
                return _this;
            }
            TblEmpForm.formKey = 'Structure.TblEmp';
            return TblEmpForm;
        }(Serenity.PrefixedContext));
        Structure.TblEmpForm = TblEmpForm;
    })(Structure = EMR.Structure || (EMR.Structure = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Structure;
    (function (Structure) {
        var TblEmpRow;
        (function (TblEmpRow) {
            TblEmpRow.idProperty = 'EmId';
            TblEmpRow.nameProperty = 'EmpName';
            TblEmpRow.localTextPrefix = 'Structure.TblEmp';
        })(TblEmpRow = Structure.TblEmpRow || (Structure.TblEmpRow = {}));
    })(Structure = EMR.Structure || (EMR.Structure = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Structure;
    (function (Structure) {
        var TblEmpService;
        (function (TblEmpService) {
            TblEmpService.baseUrl = 'Structure/TblEmp';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TblEmpService[x] = function (r, s, o) {
                    return Q.serviceRequest(TblEmpService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(TblEmpService = Structure.TblEmpService || (Structure.TblEmpService = {}));
    })(Structure = EMR.Structure || (EMR.Structure = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Texts;
    (function (Texts) {
        EMR['Texts'] = Q.proxyTexts(Texts, '', { Db: { Administration: { DashboardUrl: { Active: 1, Id: 1, Url: 1 }, Language: { Id: 1, LanguageId: 1, LanguageName: 1 }, Modules: { ModuleDescription: 1, ModuleId: 1, ModuleName: 1 }, Role: { RoleId: 1, RoleName: 1, TenantId: 1 }, RolePermission: { PermissionKey: 1, RoleId: 1, RolePermissionId: 1, RoleRoleName: 1 }, Tenant: { FacilityId: 1, FacilityName: 1, TenantId: 1, TenantName: 1 }, Translation: { AdmissionDateBigger: 1, AdmissionDateSmaller: 1, CustomText: 1, DischargeDateEqualToday: 1, DischargeDateInvalid: 1, DischargeLessThanAdmission: 1, EntityPlural: 1, Key: 1, OverrideConfirmation: 1, SaveChangesButton: 1, SourceLanguage: 1, SourceText: 1, TargetLanguage: 1, TargetText: 1 }, User: { DisplayName: 1, Email: 1, FacilityID: 1, InsertDate: 1, InsertUserId: 1, IsActive: 1, LastDirectoryUpdate: 1, Password: 1, PasswordConfirm: 1, PasswordHash: 1, PasswordSalt: 1, Source: 1, TenantId: 1, TenantName: 1, UpdateDate: 1, UpdateUserId: 1, UserId: 1, UserImage: 1, Username: 1 }, UserPermission: { Granted: 1, PermissionKey: 1, User: 1, UserId: 1, UserPermissionId: 1, Username: 1 }, UserRole: { RoleId: 1, User: 1, UserId: 1, UserRoleId: 1, Username: 1 } }, Common: { UserPreference: { Name: 1, PreferenceType: 1, UserId: 1, UserPreferenceId: 1, Value: 1 } }, Configs: { BloodStatus: { BId: 1, Bloodstatus: 1 }, Caretypes: { Caretype: 1, Id: 1 }, Countries: { Agriculture: 1, Arable: 1, Area: 1, Birthrate: 1, Climate: 1, CoastlineRatio: 1, Country: 1, CountryId: 1, Crops: 1, Deathrate: 1, Gdp: 1, Industry: 1, InfantMortality1000: 1, LiteracyPerc: 1, NetMigration: 1, Other: 1, Phones: 1, PopDensity: 1, Population: 1, Region: 1, Service: 1 }, Cycles: { CycleId: 1, Cycledescription: 1, Cyclename: 1 }, Ethnicity: { EthnicityId: 1, EthnicityName: 1 }, LkpForm: { FormId: 1, FormName: 1 }, LkpHistory: { HistoryId: 1, HistoryName: 1 }, LkpImaging: { ImagingId: 1, ImagingName: 1, Note: 1 }, LkpLabTest: { LabTestId: 1, LabTestName: 1, NormalRange: 1, SubTypeTestId: 1, TestPrice: 1, TestTypeName: 1, Unit: 1 }, LkpLosstypes: { LosstypeId: 1, Name: 1 }, LkpManufacturer: { CellPhoneNo: 1, CountryId: 1, Email: 1, ManufacturerId: 1, ManufacturerName: 1, ManufacturerType: 1, Website: 1 }, LkpPatientType: { TypeId: 1, TypeNameDari: 1, TypeNameEn: 1, TypeNamePashto: 1 }, LkpPhysExamGroup: { GroupId: 1, GroupName: 1 }, LkpPhysExams: { GroupEamName: 1, GroupId: 1, GroupName: 1, PhysExamId: 1, PhysExamName: 1 }, LkpRecommands: { RecomId: 1, RecommandName: 1 }, LkpTestTypes: { TestTypeId: 1, TestTypeName: 1 }, LkpUnit: { UnitId: 1, UnitName: 1 }, LkpVendor: { CellPhoneNo: 1, Email: 1, VendorId: 1, VendorName: 1, VendorRegNo: 1, VendorType: 1 }, Stages: { StageId: 1, Stagename: 1 }, TblAbortionType: { AbortionId: 1, AbortionTypeDari: 1, AbortionTypeEn: 1, AbortionTypePashto: 1 }, TblAgeTypes: { AgeTypeName: 1, AgeTypeNameDari: 1, AgeTypeNameEn: 1, AgeTypeNamePashto: 1, AgetypeId: 1 }, TblBloodGroup: { BloodGroup: 1, BloodGroupId: 1 }, TblCaseTypes: { CaseId: 1, CaseTypeName: 1, CasetypeDari: 1, CasetypeEn: 1, CasetypePashto: 1 }, TblChild: { ChildDari: 1, ChildEn: 1, ChildId: 1, ChildPashto: 1, NbChild: 1 }, TblDept: { DeptName: 1, DeptNameD: 1, DeptNameP: 1, DpId: 1 }, TblDiagnosis: { DiagNosis: 1, DiagnosisDari: 1, DiagnosisEn: 1, DiagnosisId: 1, DiagnosisPashto: 1 }, TblDiseasesCategory: { DiseasesCatDari: 1, DiseasesCatPashto: 1, DiseasesCategory: 1, Id: 1, Wardid: 1 }, TblEducation: { EducationDari: 1, EducationEng: 1, EducationName: 1, Eid: 1 }, TblExaminationsDetails: { DepartmentName: 1, DpId: 1, EdName: 1, Edid: 1 }, TblGender: { Gender: 1, GenderDa: 1, GenderEng: 1, GenderId: 1, GenderPs: 1 }, TblMaritalStatus: { MariId: 1, MaritalStatus: 1, PatMaritalStatusDari: 1, PatMaritalStatusEng: 1 }, TblNbResult: { NbResult: 1, NbResultDari: 1, NbResultEn: 1, NbResultId: 1, NbResultPashto: 1 }, TblNbWeight: { NbWeight: 1, NbWeightDari: 1, NbWeightEn: 1, NbWeightId: 1, NbWeightPashto: 1 }, TblNbstatus: { NbStatus: 1, NbstatusDari: 1, NbstatusEng: 1, NbstatusId: 1, NbstatusPashto: 1 }, TblOccupation: { OccupationDari: 1, OccupationEng: 1, OccupationName: 1, Oid: 1 }, TblOutcomesMother: { OutcomeDari: 1, OutcomeEng: 1, OutcomeId: 1, OutcomeName: 1 }, TblPositions: { DeptId: 1, EmpId: 1, LastUpdated: 1, PosDate: 1, PosDateH: 1, PosId: 1, ProId: 1, TenantId: 1, UserName: 1 }, TblProfessions: { ProId: 1, ProName: 1, ProNameD: 1 }, TblRelation: { Relation: 1, RelationId: 1, RelationName: 1, RelationNameEng: 1 }, TblWard: { Ward: 1, WardId: 1, WardName: 1, WardNameD: 1, WardNumBeds: 1 }, TblWardDisease: { DiagnosisTreatment: 1, DiseaseDariName: 1, DiseasesCat: 1, DiseasesCategory: 1, DiseasesCode: 1, DiseasesName: 1, HmirCode: 1, HmirCodeId: 1, Status: 1, WId: 1, WardCode: 1 }, TblWardDiseases: { DiseaseDariName: 1, DiseaseName: 1, DiseasesCat: 1, DiseasesCategory: 1, DiseasesCode: 1, DiseasesName: 1, HmirCode: 1, HmirCodeId: 1, Status: 1, WId: 1, WardCode: 1, WvId: 1 }, TblWrdVar: { DiagnTreatComp: 1, VarNameDari: 1, VarNameEnglish: 1, VarNamePashto: 1, VarSpecification: 1, Wrdid: 1, WrdidLastUpdated: 1, WrdidUserName: 1, WrdidWardName: 1, WrdidWardNameD: 1, WrdidWardNumBeds: 1, Wvid: 1, WwardDiseaseName: 1 }, TopographyMain: { Icd0Code: 1, TopographyMName: 1, TopomainId: 1 }, TopographySub: { Icd0Code: 1, TopographySName: 1, TopomainIcd0Code: 1, TopomainId: 1, TopomainTopographyMName: 1, ToposubId: 1 }, Typeofvisit: { Id: 1, TypeOfVisit: 1 } }, Expenditure: { Note: { EntityId: 1, EntityType: 1, InsertDate: 1, InsertUserDisplayName: 1, InsertUserId: 1, NoteId: 1, Text: 1 } }, FM: { LkpServiceTypes: { ServiceType: 1, ServiceTypeDari: 1, ServiceTypeEn: 1, ServiceTypeId: 1, ServiceTypePashto: 1 }, LkpServices: { DiscountRate: 1, ServiceDari: 1, ServiceEn: 1, ServiceId: 1, ServicePashto: 1, ServicePrice: 1, ServiceTypeId: 1, ServiceTypeServiceTypeDari: 1, ServiceTypeServiceTypeEn: 1, ServiceTypeServiceTypePashto: 1, Status: 1 }, TblFeePayment: { DateCreated: 1, FeeId: 1, LastUpdated: 1, Mrid: 1, ServiceFee: 1, ServiceId: 1, ServiceTypeServiceType: 1, Times: 1, UserName: 1 }, TblPrintDetails: { DateTimePrinted: 1, FeeId: 1, PrintId: 1, PrintedBy: 1 }, UserFeePatients: { FacilityFacilityNameDari: 1, FacilityId: 1, Gender: 1, LastUpdated: 1, Mrid: 1, Mrn: 1, PatFatName: 1, PatGender: 1, PatHusbandName: 1, PatName: 1, PatRealationName: 1, TenantId: 1, UserName: 1 } }, Imaging: { ImagePatients: { AgeInYear: 1, DateOfBirth: 1, EthnicityId: 1, EthnicityName: 1, FatherName: 1, FirstName: 1, GenderId: 1, GenderName: 1, LastName: 1, Mrid: 1, Mrn: 1, RefertoDoctor: 1, Updated: 1, UserId: 1 }, Imagevisits: { CycleId: 1, DateOfVisit: 1, DistrictId: 1, DistrictName: 1, Location: 1, MRN: 1, MaritalStatusId: 1, MaritalStatusName: 1, Mrid: 1, OccupationId: 1, OccupationName: 1, PhoneNumber: 1, ProvinceId: 1, ProvinceName: 1, Typeofvisit: 1, TypeofvisitId: 1, Updated: 1, UserId: 1, VisitId: 1 }, ImgImagings: { Id: 1, ImagingId: 1, ImagingName: 1, MRID: 1, MRN: 1, Note: 1, TestImage: 1, Updated: 1, UserId: 1, VisitId: 1 } }, LabTest: { LabPatients: { AgeInYear: 1, DateOfBirth: 1, EthnicityId: 1, EthnicityName: 1, FatherName: 1, FirstName: 1, GenderId: 1, GenderName: 1, LastName: 1, Mrid: 1, Mrn: 1, RefertoDoctor: 1, Updated: 1, UserId: 1 }, LabTests: { Id: 1, LabDateTime: 1, LabTestId: 1, LabTestName: 1, NormalRange: 1, Result: 1, SlabDate: 1, TestTypeId: 1, TestTypeName: 1, Unit: 1, Updated: 1, UserId: 1, VisitId: 1, VisitMrid: 1 }, Labvisits: { CycleId: 1, DateOfVisit: 1, DistrictId: 1, DistrictName: 1, Location: 1, MRN: 1, MaritalStatusId: 1, MaritalStatusName: 1, Mrid: 1, OccupationId: 1, OccupationName: 1, PhoneNumber: 1, ProvinceId: 1, ProvinceName: 1, Typeofvisit: 1, TypeofvisitId: 1, Updated: 1, UserId: 1, VisitId: 1 } }, Locations: { Districts: { DistrictDari: 1, DistrictEng: 1, DistrictId: 1, DistrictName: 1, DistrictPashto: 1, ProvinceDari: 1, ProvinceEng: 1, ProvinceId: 1, ProvincePashto: 1 }, FacilityInfo: { DistProvinceId: 1, DistrictDari: 1, DistrictEng: 1, DistrictId: 1, DistrictPashto: 1, FacilityFullName: 1, FacilityId: 1, FacilityName: 1, FacilityNameDari: 1, FacilityNamePashto: 1, FacilityType: 1, FacilityTypeFacType: 1, FacilityTypeFacTypeDari: 1, FacilityTypeFacTypePashto: 1, GpsLattitude: 1, GpsLongtitude: 1, GrantId: 1, Implementer: 1, Lat: 1, Lon: 1, NoOfPatients: 1, ProvinAbbrv: 1, TenantId: 1, ViliCode: 1 }, FacilityInfoRefer: { FacilityFullName: 1, FacilityId: 1, FacilityName: 1, FacilityNameDari: 1, FacilityNamePashto: 1 }, FacilityTypes: { FacType: 1, FacTypeCode: 1, FacTypeDari: 1, FacTypePashto: 1 }, Provinces: { ProvPop: 1, ProvinceAbbrv: 1, ProvinceDari: 1, ProvinceEng: 1, ProvinceId: 1, ProvinceName: 1, ProvincePashto: 1 } }, Medadmins: { BloodTransfusions: { BloodGroup: 1, BloodGroupId: 1, Bloodstatus: 1, BloodstatusId: 1, RecDateTime: 1, Recomquantity: 1, SRecDate: 1, STransDate: 1, TranUserId: 1, TransDateTime: 1, TransUpdated: 1, TransfusionId: 1, Transmitquantity: 1, Updated: 1, UserId: 1, VisitId: 1 }, MPrescriptions: { Comment: 1, DailyDose: 1, MedicineId: 1, MedicineName: 1, OrderId: 1, Quantity: 1, Updated: 1, UserId: 1, VisitId: 1 }, Medadministration: { AppDateTime: 1, AppSDate: 1, AppUpdated: 1, AppUserId: 1, Comment: 1, MedadminId: 1, Medicine: 1, OrderId: 1, Quantity: 1, RecDateTime: 1, RecSDate: 1, Updated: 1, UserId: 1 }, Medadminpatients: { AgeInYear: 1, DateOfBirth: 1, EthnicityId: 1, EthnicityName: 1, FatherName: 1, FirstName: 1, GenderId: 1, GenderName: 1, LastName: 1, Mrid: 1, Mrn: 1, RefertoDoctor: 1, Updated: 1, UserId: 1 }, Medvisits: { CycleId: 1, DateOfVisit: 1, DistrictId: 1, DistrictName: 1, Location: 1, MRN: 1, MaritalStatusId: 1, MaritalStatusName: 1, Mrid: 1, OccupationId: 1, OccupationName: 1, PhoneNumber: 1, ProvinceId: 1, ProvinceName: 1, Typeofvisit: 1, TypeofvisitId: 1, Updated: 1, UserId: 1, VisitId: 1 }, OpdBloodTransfusions: { BloodGroup: 1, BloodGroupId: 1, Bloodstatus: 1, BloodstatusId: 1, RecDateTime: 1, Recomquantity: 1, SRecDate: 1, STransDate: 1, TranUserId: 1, TransDateTime: 1, TransUpdated: 1, TransfusionId: 1, Transmitquantity: 1, Updated: 1, UserId: 1, VisitId: 1 }, OpdMedadministration: { AppDateTime: 1, AppSDate: 1, AppUpdated: 1, AppUserId: 1, Comment: 1, MedadminId: 1, Medicine: 1, OrderId: 1, Quantity: 1, RecDateTime: 1, RecSDate: 1, Updated: 1, UserId: 1 }, Visitsmedicine: { Medicine: 1, Mrid: 1, OrderId: 1, VisitId: 1 } }, OPD: { Diagnosis: { Comorbidity: 1, Comorbidity2Id: 1, Comorbidity3Id: 1, ComorbidityId: 1, DiagnosisId: 1, FinalDiagnosis: 1, FinalDiagnosisDate: 1, FinalDiagnosisId: 1, InitialDiagnosis: 1, InitialDiagnosisDate: 1, InitialDiagnosisId: 1, Note: 1, SelfDiagnosis: 1, SelfDiagnosisDate: 1, SelfDiagnosisId: 1, StageId: 1, TopoMain: 1, TopoSub: 1, TopomainId: 1, ToposubId: 1, Updated: 1, UserId: 1, VisitId: 1, VisitMrid: 1 }, Imagings: { Id: 1, ImagingId: 1, ImagingName: 1, Note: 1, TestImage: 1, Updated: 1, UserId: 1, VisitId: 1 }, LabTest: { Id: 1, LabDateTime: 1, LabTestId: 1, LabTestName: 1, NormalRange: 1, Result: 1, SlabDate: 1, TestTypeId: 1, TestTypeName: 1, Unit: 1, Updated: 1, UserId: 1, VisitId: 1, VisitMrid: 1 }, PatientHistory: { HistoryId: 1, HistoryName: 1, Id: 1, Note: 1, Updated: 1, UserId: 1, VisitId: 1 }, Patients: { AgeInYear: 1, DateOfBirth: 1, EthnicityId: 1, EthnicityName: 1, FatherName: 1, FirstName: 1, GenderId: 1, GenderName: 1, LastName: 1, Mrid: 1, Mrn: 1, RefertoDoctor: 1, Updated: 1, UserId: 1 }, PhysicalExamination: { GroupId: 1, Id: 1, Note: 1, PhysExamGroup: 1, PhysExamId: 1, PhysExamName: 1, Updated: 1, UserId: 1, VisitId: 1 }, Prescriptions: { Comment: 1, DailyDose: 1, MedicineId: 1, MedicineName: 1, OrderId: 1, Quantity: 1, Updated: 1, UserId: 1, VisitId: 1 }, Recommedations: { Note: 1, RecomId: 1, RecomRecommandName: 1, RecommandationId: 1, Updated: 1, UserId: 1, VisitId: 1, VisitMrid: 1 }, Visits: { CycleId: 1, DateOfVisit: 1, DistrictId: 1, DistrictName: 1, Location: 1, MRN: 1, MaritalStatusId: 1, MaritalStatusName: 1, Mrid: 1, OccupationId: 1, OccupationName: 1, PhoneNumber: 1, ProvinceId: 1, ProvinceName: 1, Typeofvisit: 1, TypeofvisitId: 1, Updated: 1, UserId: 1, VisitId: 1 }, VitalSigns: { Bp: 1, Height: 1, Hr: 1, O2: 1, Pain: 1, Pulse: 1, Rr: 1, SVitalDate: 1, Temp: 1, Updated: 1, UserId: 1, VisitId: 1, VitalDateTime: 1, VitalId: 1, Weight: 1 }, Vscheduling: { Comment: 1, CycleCyclename: 1, CycleId: 1, PlanDate: 1, SPlanDate: 1, ScheduleId: 1, Updated: 1, UserId: 1, VisitId: 1 } }, Pharmacy: { MedPatients: { AgeInYear: 1, DateOfBirth: 1, EthnicityId: 1, EthnicityName: 1, FatherName: 1, FirstName: 1, GenderId: 1, GenderName: 1, LastName: 1, Mrid: 1, Mrn: 1, RefertoDoctor: 1, Updated: 1, UserId: 1 }, MedPrescriptions: { Comment: 1, DailyDose: 1, InsideSale: 1, MedicineId: 1, MedicineName: 1, OrderId: 1, Quantity: 1, Updated: 1, UserId: 1, VisitId: 1 }, Medicinelosses: { Id: 1, LosstypeId: 1, LosstypeName: 1, MedicineBatchNo: 1, MedicineBrandName: 1, MedicineDiscontinue: 1, MedicineExpiryDate: 1, MedicineFormId: 1, MedicineGenericName: 1, MedicineId: 1, MedicineInDate: 1, MedicineMid: 1, MedicineQuantity: 1, MedicineQuantityUsed: 1, MedicineReorderLevel: 1, MedicineSExpiryDate: 1, MedicineSInDate: 1, MedicineStrength: 1, MedicineUnitPrice: 1, MedicineUpdated: 1, MedicineUserId: 1, MedicineVid: 1, OutDate: 1, Quantity: 1, Updated: 1, UserId: 1 }, Medicines: { Balance: 1, BatchNo: 1, BrandName: 1, DaysToExpire: 1, Discontinue: 1, ExpiryDate: 1, FormFormName: 1, FormId: 1, GenericName: 1, InDate: 1, MedicineId: 1, MedicineName: 1, Mid: 1, MidManufacturerName: 1, Quantity: 1, QuantityUsed: 1, ReorderLevel: 1, SExpiryDate: 1, SInDate: 1, Strength: 1, UnitPrice: 1, Updated: 1, UserId: 1, Vid: 1, VidVendorName: 1 }, Medvisits: { CycleId: 1, DateOfVisit: 1, DistrictId: 1, DistrictName: 1, Location: 1, MRN: 1, MaritalStatusId: 1, MaritalStatusName: 1, Mrid: 1, OccupationId: 1, OccupationName: 1, PhoneNumber: 1, ProvinceId: 1, ProvinceName: 1, Typeofvisit: 1, TypeofvisitId: 1, Updated: 1, UserId: 1, VisitId: 1 } }, Register: { Nameslist: { FacilityId: 1, FullName: 1, Id: 1, ShortName: 1 }, PatAttendants: { Address: 1, AttendantId: 1, AttendantName: 1, FatherName: 1, GenderId: 1, GenderName: 1, Phone: 1, RelationName: 1, RelationType: 1, Updated: 1, UserId: 1, VisitId: 1 }, Regoutpatients: { AgeInYear: 1, DateOfBirth: 1, DistrictId: 1, DistrictName: 1, EthnicityId: 1, EthnicityName: 1, FatherName: 1, FirstName: 1, GenderId: 1, GenderName: 1, GrandFather: 1, LastName: 1, Location: 1, Mrid: 1, Mrn: 1, ProvinceId: 1, ProvinceName: 1, RefertoDoctor: 1, SDateOfBirth: 1, Updated: 1, UserId: 1 }, Regvisits: { CycleId: 1, DateOfVisit: 1, DistrictId: 1, DistrictName: 1, DurationOfStay: 1, Location: 1, MRN: 1, MaritalStatusId: 1, MaritalStatusName: 1, Mrid: 1, OccupationId: 1, OccupationName: 1, PhoneNumber: 1, ProvinceId: 1, ProvinceName: 1, SDateOfVisit: 1, Typeofvisit: 1, TypeofvisitId: 1, Updated: 1, UserId: 1, VisitId: 1 } }, Regs: { HfNoOfPatients: { FacilityId: 1, NoOfPatients: 1 }, TblAdmissionsDischarge: { AbortionType: 1, AbortionTypeName: 1, AdAge: 1, AdAgeType: 1, AdAgeTypeName: 1, AdCaseType: 1, AdCaseTypeName: 1, AdDate: 1, AdDateH: 1, AdDiagnosis: 1, AdId: 1, DisDate: 1, DisDateH: 1, DisDiagCausDeath: 1, DisDiagResult: 1, DisStatus: 1, LastUpdated: 1, MRN: 1, Mrid: 1, MridFacilityId: 1, MridPatFatName: 1, MridPatName: 1, TenantId: 1, UserName: 1, Wardid: 1, WardidWardName: 1, WardidWardNameD: 1 }, TblDischarge: { DisDate: 1, DisDateH: 1, DisDiagResult: 1, DisDiagnosis: 1, DisId: 1, DisStatus: 1, LastUpdated: 1, MRN: 1, Mrid: 1, TenantId: 1, UserName: 1, Wardid: 1 }, TblNewBornManagement: { AdAdDiagnosis: 1, AdId: 1, AdMrid: 1, AdWardid: 1, LastUpdated: 1, NbGender: 1, NbId: 1, NbNumber: 1, NbOutcome: 1, NbStatus: 1, NbWeight: 1, NewbornStatus: 1, Newbornchild: 1, Newborngender: 1, Newbornoutcome: 1, Newbornweight: 1, TenantId: 1, UserName: 1 }, TblOperations: { AdId: 1, AdMrid: 1, AdValue: 1, DiseaseName: 1, Evid: 1, LastUpdated: 1, Remarks: 1, TenantId: 1, UserName: 1, WardId: 1, Wardname: 1, Wvid: 1, WvidDiagnTreatComp: 1, WvidVarNameDari: 1, WvidVarNameEnglish: 1, WvidVarNamePashto: 1, WvidVarSpecification: 1, WvidWrdid: 1 }, TblPatDetails: { DistrictId: 1, Eid: 1, EidEducationDari: 1, LastUpdated: 1, MRN: 1, MariId: 1, MariPatMaritalStatusDari: 1, Mrid: 1, MridFacilityId: 1, MridPatFatName: 1, MridPatName: 1, Oid: 1, OidOccupationDari: 1, PatDdate: 1, PatDdateH: 1, PatLocation: 1, PatPhone: 1, PdId: 1, ProvinceDari: 1, ProvinceId: 1, TenantId: 1, UserName: 1 }, TblPatientNextOfKeen: { LastUpdated: 1, MRN: 1, Mrid: 1, MridFacilityId: 1, MridPatFatName: 1, MridPatName: 1, NoKAdd: 1, NoKNameD: 1, NoKPhone: 1, NoKRelationType: 1, PatNoKid: 1, RelationTypeName: 1, TenantId: 1, UserName: 1 }, TblPatients: { BloodGroup: 1, FacilityFacilityName: 1, FacilityFacilityNameDari: 1, FacilityFacilityNamePashto: 1, FacilityFacilityType: 1, FacilityId: 1, Gender: 1, LastUpdated: 1, MRN: 1, Mrid: 1, PatBlooldGroup: 1, PatFatName: 1, PatGender: 1, PatHusbandName: 1, PatName: 1, PatRealationName: 1, PatTazkera: 1, TenantId: 1, UserName: 1 }, TblReferral: { AdId: 1, AdMrid: 1, DiseaseName: 1, FacilityId: 1, FacilityName: 1, LastUpdated: 1, RefDate: 1, RefDateH: 1, RefDiagnosis: 1, RefId: 1, RefType: 1, TenantId: 1, UserName: 1, WardId: 1, WardName: 1 }, TblTestExaminations: { AdId: 1, AdMrid: 1, DeptName: 1, Diagnosis: 1, Diagnosisname: 1, EdId: 1, LastUpdated: 1, PatTestId: 1, TenantId: 1, TestExaminations: 1, TestName: 1, UserName: 1 } }, Structure: { BedReportDetails: { BedActive: 1, Id: 1, ReportComment: 1, ReportFacilityId: 1, ReportId: 1, ReportLastUpdated: 1, ReportMonth: 1, ReportTenantId: 1, ReportUserName: 1, ReportYear: 1, TenantId: 1, WardId: 1, WardWardName: 1, WardWardNameD: 1, WardWardNumBeds: 1 }, BedReports: { Comment: 1, DetailList: 1, FacilityDistrictId: 1, FacilityFacilityName: 1, FacilityId: 1, FacilityLat: 1, FacilityLon: 1, LastUpdated: 1, Month: 1, ReportId: 1, TenantId: 1, UserName: 1, Year: 1 }, TblDuty: { DutId: 1, DutMonth: 1, DutYear: 1, EmpId: 1, LastUpdated: 1, TenantId: 1, UserName: 1, WardId: 1 }, TblEmp: { EmId: 1, EmpFatherName: 1, EmpFatherNameD: 1, EmpLastName: 1, EmpLastNameD: 1, EmpName: 1, EmpNameD: 1, LastUpdated: 1, TenantId: 1, UserName: 1 } }, Verifications: { Cbloodtransfusions: { BloodGroup: 1, BloodGroupId: 1, Bloodstatus: 1, BloodstatusId: 1, DateOfVisit: 1, Mrid: 1, RecDateTime: 1, Recomquantity: 1, SDateOfVisit: 1, SRecDate: 1, STransDate: 1, TransDateTime: 1, TransfusionId: 1, Transmitquantity: 1, VisitId: 1 }, Cdiagnosis: { Comorbidity: 1, Comorbidity2Id: 1, Comorbidity3Id: 1, ComorbidityId: 1, DateOfVisit: 1, DiagnosisId: 1, FinalDiagnosis: 1, FinalDiagnosisDate: 1, FinalDiagnosisId: 1, InitialDiagnosis: 1, InitialDiagnosisDate: 1, InitialDiagnosisId: 1, Mrid: 1, SDateOfVisit: 1, SelfDiagnosis: 1, SelfDiagnosisDate: 1, SelfDiagnosisId: 1, StageId: 1, TopoMain: 1, TopoSub: 1, TopomainId: 1, ToposubId: 1, VisitId: 1 }, Cimagings: { DateOfVisit: 1, Id: 1, ImagingId: 1, ImagingName: 1, Mrid: 1, Note: 1, SDateOfVisit: 1, TestImage: 1, VisitId: 1 }, Clabtests: { DateOfVisit: 1, Id: 1, LabDateTime: 1, LabTestId: 1, LabTestName: 1, Mrid: 1, NormalRange: 1, Result: 1, SDateOfVisit: 1, SlabDate: 1, Unit: 1, VisitId: 1 }, Cmedadministration: { AppDateTime: 1, AppSDate: 1, Comment: 1, MedadminId: 1, Medicine: 1, OrderId: 1, Quantity: 1, RecDateTime: 1, RecSDate: 1 }, Cmedprescriptions: { Comment: 1, DailyDose: 1, DateOfVisit: 1, InsideSale: 1, MedicineId: 1, MedicineName: 1, Mrid: 1, OrderId: 1, Quantity: 1, SDateOfVisit: 1, VisitId: 1 }, Cpatienthistory: { DateOfVisit: 1, HistoryId: 1, HistoryName: 1, Id: 1, Mrid: 1, Note: 1, SDateOfVisit: 1, VisitId: 1 }, Cpatients: { AgeInYear: 1, DateOfBirth: 1, DistrictId: 1, DistrictName: 1, EthnicityId: 1, EthnicityName: 1, FatherName: 1, FirstName: 1, GenderId: 1, GenderName: 1, GrandFather: 1, LastName: 1, Location: 1, Mrid: 1, Mrn: 1, ProvinceId: 1, ProvinceName: 1, RefertoDoctor: 1, SDateOfBirth: 1 }, Cphysicalexamination: { DateOfVisit: 1, GroupId: 1, Id: 1, Mrid: 1, Note: 1, PhysExamGroup: 1, PhysExamId: 1, PhysExamName: 1, SDateOfVisit: 1, VisitId: 1 }, Crecommendations: { DateOfVisit: 1, Mrid: 1, Note: 1, RecomId: 1, RecomRecommandName: 1, RecommandationId: 1, SDateOfVisit: 1, VisitId: 1 }, Cvisits: { DateOfVisit: 1, DistrictId: 1, DistrictName: 1, Location: 1, MRN: 1, MaritalStatusId: 1, MaritalStatusName: 1, Mrid: 1, OccupationId: 1, OccupationName: 1, PhoneNumber: 1, ProvinceId: 1, ProvinceName: 1, SDateOfVisit: 1, Typeofvisit: 1, TypeofvisitId: 1, VisitId: 1 }, Cvitalsigns: { Bp: 1, DateOfVisit: 1, Height: 1, Hr: 1, Mrid: 1, O2: 1, Pain: 1, Pulse: 1, Rr: 1, SDateOfVisit: 1, SVitalDate: 1, Temp: 1, VisitId: 1, VitalDateTime: 1, VitalId: 1, Weight: 1 } }, VitalSigns: { Cyclevisits: { ActualDate: 1, CareTypeId: 1, Caretype: 1, SActualDate: 1, ScheduleComment: 1, ScheduleCycleId: 1, ScheduleId: 1, SchedulePlanDate: 1, ScheduleSPlanDate: 1, ScheduleVisitId: 1, SessionId: 1, Updated: 1, UserId: 1 }, Scheduling: { Comment: 1, CycleCycledescription: 1, CycleCyclename: 1, CycleId: 1, PlanDate: 1, SPlanDate: 1, ScheduleId: 1, Updated: 1, UserId: 1, VisitId: 1 }, VVitalSigns: { Bp: 1, Height: 1, Hr: 1, O2: 1, Pain: 1, Pulse: 1, Rr: 1, SVitalDate: 1, Temp: 1, Updated: 1, UserId: 1, VisitId: 1, VitalDateTime: 1, VitalId: 1, Weight: 1 }, VitalPatients: { AgeInYear: 1, DateOfBirth: 1, EthnicityId: 1, EthnicityName: 1, FatherName: 1, FirstName: 1, GenderId: 1, GenderName: 1, LastName: 1, Mrid: 1, Mrn: 1, RefertoDoctor: 1, Updated: 1, UserId: 1 }, Vitalvisits: { CycleId: 1, DateOfVisit: 1, DistrictId: 1, DistrictName: 1, Location: 1, MRN: 1, MaritalStatusId: 1, MaritalStatusName: 1, Mrid: 1, OccupationId: 1, OccupationName: 1, PhoneNumber: 1, ProvinceId: 1, ProvinceName: 1, Typeofvisit: 1, TypeofvisitId: 1, Updated: 1, UserId: 1, VisitId: 1 } } }, Forms: { Membership: { ChangePassword: { FormTitle: 1, SubmitButton: 1, Success: 1 }, ForgotPassword: { BackToLogin: 1, FormInfo: 1, FormTitle: 1, SubmitButton: 1, Success: 1 }, Login: { FacebookButton: 1, ForgotPassword: 1, FormTitle: 1, GoogleButton: 1, OR: 1, RememberMe: 1, SignInButton: 1, SignUpButton: 1 }, ResetPassword: { BackToLogin: 1, EmailSubject: 1, FormTitle: 1, SubmitButton: 1, Success: 1 }, SignUp: { AcceptTerms: 1, ActivateEmailSubject: 1, ActivationCompleteMessage: 1, BackToLogin: 1, ConfirmEmail: 1, ConfirmPassword: 1, DisplayName: 1, Email: 1, FormInfo: 1, FormTitle: 1, Password: 1, SubmitButton: 1, Success: 1 } } }, Site: { AccessDenied: { ClickToChangeUser: 1, ClickToLogin: 1, LackPermissions: 1, NotLoggedIn: 1, PageTitle: 1 }, BasicProgressDialog: { CancelTitle: 1, PleaseWait: 1 }, BulkServiceAction: { AllHadErrorsFormat: 1, AllSuccessFormat: 1, ConfirmationFormat: 1, ErrorCount: 1, NothingToProcess: 1, SomeHadErrorsFormat: 1, SuccessCount: 1 }, Dashboard: { ContentDescription: 1 }, Layout: { FooterCopyright: 1, FooterInfo: 1, FooterOwner: 1, FooterRights: 1, GeneralSettings: 1, Language: 1, Theme: 1, ThemeBlack: 1, ThemeBlackLight: 1, ThemeBlue: 1, ThemeBlueLight: 1, ThemeGreen: 1, ThemeGreenLight: 1, ThemePurple: 1, ThemePurpleLight: 1, ThemeRed: 1, ThemeRedLight: 1, ThemeYellow: 1, ThemeYellowLight: 1 }, RolePermissionDialog: { DialogTitle: 1, EditButton: 1, SaveSuccess: 1 }, UserDialog: { EditPermissionsButton: 1, EditRolesButton: 1 }, UserPermissionDialog: { DialogTitle: 1, Grant: 1, Permission: 1, Revoke: 1, SaveSuccess: 1 }, UserRoleDialog: { DialogTitle: 1, SaveSuccess: 1 }, ValidationError: { Title: 1 } }, Validation: { AuthenticationError: 1, CantFindUserWithEmail: 1, CurrentPasswordMismatch: 1, DeleteForeignKeyError: 1, EmailConfirm: 1, EmailInUse: 1, InvalidActivateToken: 1, InvalidResetToken: 1, MinRequiredPasswordLength: 1, SavePrimaryKeyError: 1 } });
    })(Texts = EMR.Texts || (EMR.Texts = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CbloodtransfusionsForm = /** @class */ (function (_super) {
            __extends(CbloodtransfusionsForm, _super);
            function CbloodtransfusionsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!CbloodtransfusionsForm.init) {
                    CbloodtransfusionsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.DateEditor;
                    var w2 = s.LookupEditor;
                    var w3 = s.IntegerEditor;
                    var w4 = s.DateTimeEditor;
                    var w5 = EMR.Common.ShamsiDatePickerEditor;
                    Q.initFormType(CbloodtransfusionsForm, [
                        'Mrid', w0,
                        'VisitId', w0,
                        'DateOfVisit', w1,
                        'SDateOfVisit', w0,
                        'BloodGroupId', w2,
                        'Recomquantity', w3,
                        'Transmitquantity', w3,
                        'BloodstatusId', w2,
                        'RecDateTime', w4,
                        'SRecDate', w5,
                        'TransDateTime', w4,
                        'STransDate', w0
                    ]);
                }
                return _this;
            }
            CbloodtransfusionsForm.formKey = 'Verifications.Cbloodtransfusions';
            return CbloodtransfusionsForm;
        }(Serenity.PrefixedContext));
        Verifications.CbloodtransfusionsForm = CbloodtransfusionsForm;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CbloodtransfusionsRow;
        (function (CbloodtransfusionsRow) {
            CbloodtransfusionsRow.idProperty = 'TransfusionId';
            CbloodtransfusionsRow.nameProperty = 'SDateOfVisit';
            CbloodtransfusionsRow.localTextPrefix = 'Verifications.Cbloodtransfusions';
        })(CbloodtransfusionsRow = Verifications.CbloodtransfusionsRow || (Verifications.CbloodtransfusionsRow = {}));
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CbloodtransfusionsService;
        (function (CbloodtransfusionsService) {
            CbloodtransfusionsService.baseUrl = 'Verifications/Cbloodtransfusions';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CbloodtransfusionsService[x] = function (r, s, o) {
                    return Q.serviceRequest(CbloodtransfusionsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(CbloodtransfusionsService = Verifications.CbloodtransfusionsService || (Verifications.CbloodtransfusionsService = {}));
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CdiagnosisForm = /** @class */ (function (_super) {
            __extends(CdiagnosisForm, _super);
            function CdiagnosisForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!CdiagnosisForm.init) {
                    CdiagnosisForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.DateEditor;
                    Q.initFormType(CdiagnosisForm, [
                        'Mrid', w0,
                        'VisitId', w0,
                        'StageId', w1,
                        'SelfDiagnosisId', w1,
                        'SelfDiagnosisDate', w2,
                        'InitialDiagnosisId', w1,
                        'InitialDiagnosisDate', w2,
                        'TopomainId', w1,
                        'ToposubId', w1,
                        'FinalDiagnosisId', w1,
                        'FinalDiagnosisDate', w2,
                        'ComorbidityId', w1,
                        'Comorbidity2Id', w1,
                        'Comorbidity3Id', w1
                    ]);
                }
                return _this;
            }
            CdiagnosisForm.formKey = 'Verifications.Cdiagnosis';
            return CdiagnosisForm;
        }(Serenity.PrefixedContext));
        Verifications.CdiagnosisForm = CdiagnosisForm;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CdiagnosisRow;
        (function (CdiagnosisRow) {
            CdiagnosisRow.idProperty = 'DiagnosisId';
            CdiagnosisRow.nameProperty = 'SDateOfVisit';
            CdiagnosisRow.localTextPrefix = 'Verifications.Cdiagnosis';
        })(CdiagnosisRow = Verifications.CdiagnosisRow || (Verifications.CdiagnosisRow = {}));
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CdiagnosisService;
        (function (CdiagnosisService) {
            CdiagnosisService.baseUrl = 'Verifications/Cdiagnosis';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CdiagnosisService[x] = function (r, s, o) {
                    return Q.serviceRequest(CdiagnosisService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(CdiagnosisService = Verifications.CdiagnosisService || (Verifications.CdiagnosisService = {}));
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CimagingsForm = /** @class */ (function (_super) {
            __extends(CimagingsForm, _super);
            function CimagingsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!CimagingsForm.init) {
                    CimagingsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.MultipleImageUploadEditor;
                    var w3 = s.HtmlReportContentEditor;
                    Q.initFormType(CimagingsForm, [
                        'Mrid', w0,
                        'VisitId', w0,
                        'ImagingId', w1,
                        'TestImage', w2,
                        'Note', w3
                    ]);
                }
                return _this;
            }
            CimagingsForm.formKey = 'Verifications.Cimagings';
            return CimagingsForm;
        }(Serenity.PrefixedContext));
        Verifications.CimagingsForm = CimagingsForm;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CimagingsRow;
        (function (CimagingsRow) {
            CimagingsRow.idProperty = 'Id';
            CimagingsRow.nameProperty = 'TestImage';
            CimagingsRow.localTextPrefix = 'Verifications.Cimagings';
        })(CimagingsRow = Verifications.CimagingsRow || (Verifications.CimagingsRow = {}));
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CimagingsService;
        (function (CimagingsService) {
            CimagingsService.baseUrl = 'Verifications/Cimagings';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CimagingsService[x] = function (r, s, o) {
                    return Q.serviceRequest(CimagingsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(CimagingsService = Verifications.CimagingsService || (Verifications.CimagingsService = {}));
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var ClabtestsForm = /** @class */ (function (_super) {
            __extends(ClabtestsForm, _super);
            function ClabtestsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!ClabtestsForm.init) {
                    ClabtestsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.DateTimeEditor;
                    var w2 = s.LookupEditor;
                    Q.initFormType(ClabtestsForm, [
                        'Mrid', w0,
                        'VisitId', w0,
                        'DateOfVisit', w1,
                        'SDateOfVisit', w0,
                        'LabTestId', w2,
                        'Result', w0,
                        'NormalRange', w0,
                        'Unit', w0,
                        'LabDateTime', w1,
                        'SlabDate', w0
                    ]);
                }
                return _this;
            }
            ClabtestsForm.formKey = 'Verifications.Clabtests';
            return ClabtestsForm;
        }(Serenity.PrefixedContext));
        Verifications.ClabtestsForm = ClabtestsForm;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var ClabtestsRow;
        (function (ClabtestsRow) {
            ClabtestsRow.idProperty = 'Id';
            ClabtestsRow.nameProperty = 'Result';
            ClabtestsRow.localTextPrefix = 'Verifications.Clabtests';
        })(ClabtestsRow = Verifications.ClabtestsRow || (Verifications.ClabtestsRow = {}));
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var ClabtestsService;
        (function (ClabtestsService) {
            ClabtestsService.baseUrl = 'Verifications/Clabtests';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ClabtestsService[x] = function (r, s, o) {
                    return Q.serviceRequest(ClabtestsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(ClabtestsService = Verifications.ClabtestsService || (Verifications.ClabtestsService = {}));
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CmedadministrationForm = /** @class */ (function (_super) {
            __extends(CmedadministrationForm, _super);
            function CmedadministrationForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!CmedadministrationForm.init) {
                    CmedadministrationForm.init = true;
                    var s = Serenity;
                    var w0 = s.LookupEditor;
                    var w1 = s.IntegerEditor;
                    var w2 = s.HtmlNoteContentEditor;
                    var w3 = s.DateTimeEditor;
                    var w4 = EMR.Common.ShamsiDatePickerEditor;
                    Q.initFormType(CmedadministrationForm, [
                        'OrderId', w0,
                        'Quantity', w1,
                        'Comment', w2,
                        'RecDateTime', w3,
                        'RecSDate', w4,
                        'AppDateTime', w3,
                        'AppSDate', w4
                    ]);
                }
                return _this;
            }
            CmedadministrationForm.formKey = 'Verifications.Cmedadministration';
            return CmedadministrationForm;
        }(Serenity.PrefixedContext));
        Verifications.CmedadministrationForm = CmedadministrationForm;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CmedadministrationRow;
        (function (CmedadministrationRow) {
            CmedadministrationRow.idProperty = 'MedadminId';
            CmedadministrationRow.nameProperty = 'Comment';
            CmedadministrationRow.localTextPrefix = 'Verifications.Cmedadministration';
        })(CmedadministrationRow = Verifications.CmedadministrationRow || (Verifications.CmedadministrationRow = {}));
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CmedadministrationService;
        (function (CmedadministrationService) {
            CmedadministrationService.baseUrl = 'Verifications/Cmedadministration';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CmedadministrationService[x] = function (r, s, o) {
                    return Q.serviceRequest(CmedadministrationService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(CmedadministrationService = Verifications.CmedadministrationService || (Verifications.CmedadministrationService = {}));
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CmedprescriptionsForm = /** @class */ (function (_super) {
            __extends(CmedprescriptionsForm, _super);
            function CmedprescriptionsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!CmedprescriptionsForm.init) {
                    CmedprescriptionsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.DateEditor;
                    var w2 = s.LookupEditor;
                    var w3 = s.IntegerEditor;
                    var w4 = s.HtmlNoteContentEditor;
                    Q.initFormType(CmedprescriptionsForm, [
                        'Mrid', w0,
                        'VisitId', w0,
                        'DateOfVisit', w1,
                        'SDateOfVisit', w0,
                        'MedicineId', w2,
                        'Quantity', w3,
                        'DailyDose', w0,
                        'Comment', w4
                    ]);
                }
                return _this;
            }
            CmedprescriptionsForm.formKey = 'Verifications.Cmedprescriptions';
            return CmedprescriptionsForm;
        }(Serenity.PrefixedContext));
        Verifications.CmedprescriptionsForm = CmedprescriptionsForm;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CmedprescriptionsRow;
        (function (CmedprescriptionsRow) {
            CmedprescriptionsRow.idProperty = 'OrderId';
            CmedprescriptionsRow.nameProperty = 'SDateOfVisit';
            CmedprescriptionsRow.localTextPrefix = 'Verifications.Cmedprescriptions';
        })(CmedprescriptionsRow = Verifications.CmedprescriptionsRow || (Verifications.CmedprescriptionsRow = {}));
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CmedprescriptionsService;
        (function (CmedprescriptionsService) {
            CmedprescriptionsService.baseUrl = 'Verifications/Cmedprescriptions';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CmedprescriptionsService[x] = function (r, s, o) {
                    return Q.serviceRequest(CmedprescriptionsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(CmedprescriptionsService = Verifications.CmedprescriptionsService || (Verifications.CmedprescriptionsService = {}));
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CpatienthistoryForm = /** @class */ (function (_super) {
            __extends(CpatienthistoryForm, _super);
            function CpatienthistoryForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!CpatienthistoryForm.init) {
                    CpatienthistoryForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.DateEditor;
                    var w2 = s.LookupEditor;
                    var w3 = s.HtmlNoteContentEditor;
                    Q.initFormType(CpatienthistoryForm, [
                        'Mrid', w0,
                        'VisitId', w0,
                        'DateOfVisit', w1,
                        'SDateOfVisit', w0,
                        'HistoryId', w2,
                        'Note', w3
                    ]);
                }
                return _this;
            }
            CpatienthistoryForm.formKey = 'Verifications.Cpatienthistory';
            return CpatienthistoryForm;
        }(Serenity.PrefixedContext));
        Verifications.CpatienthistoryForm = CpatienthistoryForm;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CpatienthistoryRow;
        (function (CpatienthistoryRow) {
            CpatienthistoryRow.idProperty = 'Id';
            CpatienthistoryRow.nameProperty = 'SDateOfVisit';
            CpatienthistoryRow.localTextPrefix = 'Verifications.Cpatienthistory';
        })(CpatienthistoryRow = Verifications.CpatienthistoryRow || (Verifications.CpatienthistoryRow = {}));
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CpatienthistoryService;
        (function (CpatienthistoryService) {
            CpatienthistoryService.baseUrl = 'Verifications/Cpatienthistory';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CpatienthistoryService[x] = function (r, s, o) {
                    return Q.serviceRequest(CpatienthistoryService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(CpatienthistoryService = Verifications.CpatienthistoryService || (Verifications.CpatienthistoryService = {}));
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CpatientsForm = /** @class */ (function (_super) {
            __extends(CpatientsForm, _super);
            function CpatientsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!CpatientsForm.init) {
                    CpatientsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.DateEditor;
                    var w3 = EMR.Common.ShamsiDatePickerEditor;
                    var w4 = s.IntegerEditor;
                    Q.initFormType(CpatientsForm, [
                        'Mrn', w0,
                        'FirstName', w0,
                        'LastName', w0,
                        'FatherName', w0,
                        'GenderId', w1,
                        'EthnicityId', w1,
                        'GrandFather', w0,
                        'DateOfBirth', w2,
                        'SDateOfBirth', w3,
                        'AgeInYear', w4,
                        'ProvinceId', w1,
                        'DistrictId', w1,
                        'Location', w0,
                        'RefertoDoctor', w1
                    ]);
                }
                return _this;
            }
            CpatientsForm.formKey = 'Verifications.Cpatients';
            return CpatientsForm;
        }(Serenity.PrefixedContext));
        Verifications.CpatientsForm = CpatientsForm;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CpatientsRow;
        (function (CpatientsRow) {
            CpatientsRow.idProperty = 'Mrid';
            CpatientsRow.nameProperty = 'Mrn';
            CpatientsRow.localTextPrefix = 'Verifications.Cpatients';
        })(CpatientsRow = Verifications.CpatientsRow || (Verifications.CpatientsRow = {}));
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CpatientsService;
        (function (CpatientsService) {
            CpatientsService.baseUrl = 'Verifications/Cpatients';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CpatientsService[x] = function (r, s, o) {
                    return Q.serviceRequest(CpatientsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(CpatientsService = Verifications.CpatientsService || (Verifications.CpatientsService = {}));
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CphysicalexaminationForm = /** @class */ (function (_super) {
            __extends(CphysicalexaminationForm, _super);
            function CphysicalexaminationForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!CphysicalexaminationForm.init) {
                    CphysicalexaminationForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.DateEditor;
                    var w2 = s.LookupEditor;
                    var w3 = s.HtmlNoteContentEditor;
                    Q.initFormType(CphysicalexaminationForm, [
                        'Mrid', w0,
                        'VisitId', w0,
                        'DateOfVisit', w1,
                        'SDateOfVisit', w0,
                        'GroupId', w2,
                        'PhysExamId', w2,
                        'Note', w3
                    ]);
                }
                return _this;
            }
            CphysicalexaminationForm.formKey = 'Verifications.Cphysicalexamination';
            return CphysicalexaminationForm;
        }(Serenity.PrefixedContext));
        Verifications.CphysicalexaminationForm = CphysicalexaminationForm;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CphysicalexaminationRow;
        (function (CphysicalexaminationRow) {
            CphysicalexaminationRow.idProperty = 'Id';
            CphysicalexaminationRow.nameProperty = 'SDateOfVisit';
            CphysicalexaminationRow.localTextPrefix = 'Verifications.Cphysicalexamination';
        })(CphysicalexaminationRow = Verifications.CphysicalexaminationRow || (Verifications.CphysicalexaminationRow = {}));
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CphysicalexaminationService;
        (function (CphysicalexaminationService) {
            CphysicalexaminationService.baseUrl = 'Verifications/Cphysicalexamination';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CphysicalexaminationService[x] = function (r, s, o) {
                    return Q.serviceRequest(CphysicalexaminationService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(CphysicalexaminationService = Verifications.CphysicalexaminationService || (Verifications.CphysicalexaminationService = {}));
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CrecommendationsForm = /** @class */ (function (_super) {
            __extends(CrecommendationsForm, _super);
            function CrecommendationsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!CrecommendationsForm.init) {
                    CrecommendationsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.DateEditor;
                    var w2 = s.LookupEditor;
                    var w3 = s.HtmlNoteContentEditor;
                    Q.initFormType(CrecommendationsForm, [
                        'Mrid', w0,
                        'VisitId', w0,
                        'DateOfVisit', w1,
                        'SDateOfVisit', w0,
                        'RecomId', w2,
                        'Note', w3
                    ]);
                }
                return _this;
            }
            CrecommendationsForm.formKey = 'Verifications.Crecommendations';
            return CrecommendationsForm;
        }(Serenity.PrefixedContext));
        Verifications.CrecommendationsForm = CrecommendationsForm;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CrecommendationsRow;
        (function (CrecommendationsRow) {
            CrecommendationsRow.idProperty = 'RecommandationId';
            CrecommendationsRow.nameProperty = 'Note';
            CrecommendationsRow.localTextPrefix = 'Verifications.Crecommendations';
        })(CrecommendationsRow = Verifications.CrecommendationsRow || (Verifications.CrecommendationsRow = {}));
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CrecommendationsService;
        (function (CrecommendationsService) {
            CrecommendationsService.baseUrl = 'Verifications/Crecommendations';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CrecommendationsService[x] = function (r, s, o) {
                    return Q.serviceRequest(CrecommendationsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(CrecommendationsService = Verifications.CrecommendationsService || (Verifications.CrecommendationsService = {}));
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CvisitsForm = /** @class */ (function (_super) {
            __extends(CvisitsForm, _super);
            function CvisitsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!CvisitsForm.init) {
                    CvisitsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.DateEditor;
                    Q.initFormType(CvisitsForm, [
                        'Mrid', w0,
                        'MRN', w0,
                        'OccupationId', w1,
                        'MaritalStatusId', w1,
                        'PhoneNumber', w0,
                        'ProvinceId', w1,
                        'DistrictId', w1,
                        'Location', w0,
                        'TypeofvisitId', w1,
                        'DateOfVisit', w2,
                        'SDateOfVisit', w0
                    ]);
                }
                return _this;
            }
            CvisitsForm.formKey = 'Verifications.Cvisits';
            return CvisitsForm;
        }(Serenity.PrefixedContext));
        Verifications.CvisitsForm = CvisitsForm;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CvisitsRow;
        (function (CvisitsRow) {
            CvisitsRow.idProperty = 'VisitId';
            CvisitsRow.nameProperty = 'PhoneNumber';
            CvisitsRow.localTextPrefix = 'Verifications.Cvisits';
        })(CvisitsRow = Verifications.CvisitsRow || (Verifications.CvisitsRow = {}));
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CvisitsService;
        (function (CvisitsService) {
            CvisitsService.baseUrl = 'Verifications/Cvisits';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CvisitsService[x] = function (r, s, o) {
                    return Q.serviceRequest(CvisitsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(CvisitsService = Verifications.CvisitsService || (Verifications.CvisitsService = {}));
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CvitalsignsForm = /** @class */ (function (_super) {
            __extends(CvitalsignsForm, _super);
            function CvitalsignsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!CvitalsignsForm.init) {
                    CvitalsignsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.DateEditor;
                    var w2 = EMR.Common.ShamsiDatePickerEditor;
                    var w3 = s.IntegerEditor;
                    var w4 = s.DateTimeEditor;
                    Q.initFormType(CvitalsignsForm, [
                        'Mrid', w0,
                        'VisitId', w0,
                        'DateOfVisit', w1,
                        'SDateOfVisit', w2,
                        'Weight', w3,
                        'Height', w3,
                        'Pulse', w3,
                        'Rr', w3,
                        'Temp', w3,
                        'Bp', w0,
                        'Hr', w3,
                        'O2', w3,
                        'Pain', w3,
                        'VitalDateTime', w4,
                        'SVitalDate', w2
                    ]);
                }
                return _this;
            }
            CvitalsignsForm.formKey = 'Verifications.Cvitalsigns';
            return CvitalsignsForm;
        }(Serenity.PrefixedContext));
        Verifications.CvitalsignsForm = CvitalsignsForm;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CvitalsignsRow;
        (function (CvitalsignsRow) {
            CvitalsignsRow.idProperty = 'Mrid';
            CvitalsignsRow.nameProperty = 'SDateOfVisit';
            CvitalsignsRow.localTextPrefix = 'Verifications.Cvitalsigns';
        })(CvitalsignsRow = Verifications.CvitalsignsRow || (Verifications.CvitalsignsRow = {}));
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CvitalsignsService;
        (function (CvitalsignsService) {
            CvitalsignsService.baseUrl = 'Verifications/Cvitalsigns';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CvitalsignsService[x] = function (r, s, o) {
                    return Q.serviceRequest(CvitalsignsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(CvitalsignsService = Verifications.CvitalsignsService || (Verifications.CvitalsignsService = {}));
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var VitalSigns;
    (function (VitalSigns) {
        var CyclevisitsForm = /** @class */ (function (_super) {
            __extends(CyclevisitsForm, _super);
            function CyclevisitsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!CyclevisitsForm.init) {
                    CyclevisitsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.DateEditor;
                    var w2 = EMR.Common.ShamsiDatePickerEditor;
                    var w3 = s.LookupEditor;
                    Q.initFormType(CyclevisitsForm, [
                        'ScheduleId', w0,
                        'ActualDate', w1,
                        'SActualDate', w2,
                        'CareTypeId', w3
                    ]);
                }
                return _this;
            }
            CyclevisitsForm.formKey = 'VitalSigns.Cyclevisits';
            return CyclevisitsForm;
        }(Serenity.PrefixedContext));
        VitalSigns.CyclevisitsForm = CyclevisitsForm;
    })(VitalSigns = EMR.VitalSigns || (EMR.VitalSigns = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var VitalSigns;
    (function (VitalSigns) {
        var CyclevisitsRow;
        (function (CyclevisitsRow) {
            CyclevisitsRow.idProperty = 'SessionId';
            CyclevisitsRow.nameProperty = 'SActualDate';
            CyclevisitsRow.localTextPrefix = 'VitalSigns.Cyclevisits';
        })(CyclevisitsRow = VitalSigns.CyclevisitsRow || (VitalSigns.CyclevisitsRow = {}));
    })(VitalSigns = EMR.VitalSigns || (EMR.VitalSigns = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var VitalSigns;
    (function (VitalSigns) {
        var CyclevisitsService;
        (function (CyclevisitsService) {
            CyclevisitsService.baseUrl = 'VitalSigns/Cyclevisits';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CyclevisitsService[x] = function (r, s, o) {
                    return Q.serviceRequest(CyclevisitsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(CyclevisitsService = VitalSigns.CyclevisitsService || (VitalSigns.CyclevisitsService = {}));
    })(VitalSigns = EMR.VitalSigns || (EMR.VitalSigns = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var VitalSigns;
    (function (VitalSigns) {
        var SchedulingForm = /** @class */ (function (_super) {
            __extends(SchedulingForm, _super);
            function SchedulingForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!SchedulingForm.init) {
                    SchedulingForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.IntegerEditor;
                    var w2 = s.DateEditor;
                    var w3 = EMR.Common.ShamsiDatePickerEditor;
                    var w4 = s.HtmlContentEditor;
                    Q.initFormType(SchedulingForm, [
                        'VisitId', w0,
                        'CycleId', w1,
                        'PlanDate', w2,
                        'SPlanDate', w3,
                        'Comment', w4
                    ]);
                }
                return _this;
            }
            SchedulingForm.formKey = 'VitalSigns.Scheduling';
            return SchedulingForm;
        }(Serenity.PrefixedContext));
        VitalSigns.SchedulingForm = SchedulingForm;
    })(VitalSigns = EMR.VitalSigns || (EMR.VitalSigns = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var VitalSigns;
    (function (VitalSigns) {
        var SchedulingRow;
        (function (SchedulingRow) {
            SchedulingRow.idProperty = 'ScheduleId';
            SchedulingRow.nameProperty = 'SPlanDate';
            SchedulingRow.localTextPrefix = 'VitalSigns.Scheduling';
        })(SchedulingRow = VitalSigns.SchedulingRow || (VitalSigns.SchedulingRow = {}));
    })(VitalSigns = EMR.VitalSigns || (EMR.VitalSigns = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var VitalSigns;
    (function (VitalSigns) {
        var SchedulingService;
        (function (SchedulingService) {
            SchedulingService.baseUrl = 'VitalSigns/Scheduling';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                SchedulingService[x] = function (r, s, o) {
                    return Q.serviceRequest(SchedulingService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(SchedulingService = VitalSigns.SchedulingService || (VitalSigns.SchedulingService = {}));
    })(VitalSigns = EMR.VitalSigns || (EMR.VitalSigns = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var VitalSigns;
    (function (VitalSigns) {
        var VitalPatientsForm = /** @class */ (function (_super) {
            __extends(VitalPatientsForm, _super);
            function VitalPatientsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!VitalPatientsForm.init) {
                    VitalPatientsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.DateEditor;
                    var w3 = s.IntegerEditor;
                    Q.initFormType(VitalPatientsForm, [
                        'Mrn', w0,
                        'FirstName', w0,
                        'LastName', w0,
                        'FatherName', w0,
                        'GenderId', w1,
                        'DateOfBirth', w2,
                        'AgeInYear', w3,
                        'EthnicityId', w1,
                        'RefertoDoctor', w1
                    ]);
                }
                return _this;
            }
            VitalPatientsForm.formKey = 'VitalSigns.VitalPatients';
            return VitalPatientsForm;
        }(Serenity.PrefixedContext));
        VitalSigns.VitalPatientsForm = VitalPatientsForm;
    })(VitalSigns = EMR.VitalSigns || (EMR.VitalSigns = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var VitalSigns;
    (function (VitalSigns) {
        var VitalPatientsRow;
        (function (VitalPatientsRow) {
            VitalPatientsRow.idProperty = 'Mrid';
            VitalPatientsRow.nameProperty = 'Mrn';
            VitalPatientsRow.localTextPrefix = 'VitalSigns.VitalPatients';
        })(VitalPatientsRow = VitalSigns.VitalPatientsRow || (VitalSigns.VitalPatientsRow = {}));
    })(VitalSigns = EMR.VitalSigns || (EMR.VitalSigns = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var VitalSigns;
    (function (VitalSigns) {
        var VitalPatientsService;
        (function (VitalPatientsService) {
            VitalPatientsService.baseUrl = 'VitalSigns/VitalPatients';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                VitalPatientsService[x] = function (r, s, o) {
                    return Q.serviceRequest(VitalPatientsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(VitalPatientsService = VitalSigns.VitalPatientsService || (VitalSigns.VitalPatientsService = {}));
    })(VitalSigns = EMR.VitalSigns || (EMR.VitalSigns = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var VitalSigns;
    (function (VitalSigns) {
        var VitalvisitsForm = /** @class */ (function (_super) {
            __extends(VitalvisitsForm, _super);
            function VitalvisitsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!VitalvisitsForm.init) {
                    VitalvisitsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.LookupEditor;
                    var w2 = s.DateEditor;
                    Q.initFormType(VitalvisitsForm, [
                        'Mrid', w0,
                        'MRN', w0,
                        'OccupationId', w1,
                        'MaritalStatusId', w1,
                        'PhoneNumber', w0,
                        'ProvinceId', w1,
                        'DistrictId', w1,
                        'Location', w0,
                        'TypeofvisitId', w1,
                        'DateOfVisit', w2,
                        'CycleId', w1
                    ]);
                }
                return _this;
            }
            VitalvisitsForm.formKey = 'VitalSigns.Vitalvisits';
            return VitalvisitsForm;
        }(Serenity.PrefixedContext));
        VitalSigns.VitalvisitsForm = VitalvisitsForm;
    })(VitalSigns = EMR.VitalSigns || (EMR.VitalSigns = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var VitalSigns;
    (function (VitalSigns) {
        var VitalvisitsRow;
        (function (VitalvisitsRow) {
            VitalvisitsRow.idProperty = 'VisitId';
            VitalvisitsRow.nameProperty = 'PhoneNumber';
            VitalvisitsRow.localTextPrefix = 'VitalSigns.Vitalvisits';
        })(VitalvisitsRow = VitalSigns.VitalvisitsRow || (VitalSigns.VitalvisitsRow = {}));
    })(VitalSigns = EMR.VitalSigns || (EMR.VitalSigns = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var VitalSigns;
    (function (VitalSigns) {
        var VitalvisitsService;
        (function (VitalvisitsService) {
            VitalvisitsService.baseUrl = 'VitalSigns/Vitalvisits';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                VitalvisitsService[x] = function (r, s, o) {
                    return Q.serviceRequest(VitalvisitsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(VitalvisitsService = VitalSigns.VitalvisitsService || (VitalSigns.VitalvisitsService = {}));
    })(VitalSigns = EMR.VitalSigns || (EMR.VitalSigns = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var VitalSigns;
    (function (VitalSigns) {
        var VVitalSignsForm = /** @class */ (function (_super) {
            __extends(VVitalSignsForm, _super);
            function VVitalSignsForm(prefix) {
                var _this = _super.call(this, prefix) || this;
                if (!VVitalSignsForm.init) {
                    VVitalSignsForm.init = true;
                    var s = Serenity;
                    var w0 = s.StringEditor;
                    var w1 = s.IntegerEditor;
                    var w2 = s.DateTimeEditor;
                    var w3 = EMR.Common.ShamsiDatePickerEditor;
                    Q.initFormType(VVitalSignsForm, [
                        'VisitId', w0,
                        'Weight', w1,
                        'Height', w1,
                        'Pulse', w1,
                        'Rr', w1,
                        'Temp', w1,
                        'Bp', w0,
                        'Hr', w1,
                        'O2', w1,
                        'Pain', w1,
                        'VitalDateTime', w2,
                        'SVitalDate', w3
                    ]);
                }
                return _this;
            }
            VVitalSignsForm.formKey = 'VitalSigns.VVitalSigns';
            return VVitalSignsForm;
        }(Serenity.PrefixedContext));
        VitalSigns.VVitalSignsForm = VVitalSignsForm;
    })(VitalSigns = EMR.VitalSigns || (EMR.VitalSigns = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var VitalSigns;
    (function (VitalSigns) {
        var VVitalSignsRow;
        (function (VVitalSignsRow) {
            VVitalSignsRow.idProperty = 'VitalId';
            VVitalSignsRow.nameProperty = 'Bp';
            VVitalSignsRow.localTextPrefix = 'VitalSigns.VVitalSigns';
        })(VVitalSignsRow = VitalSigns.VVitalSignsRow || (VitalSigns.VVitalSignsRow = {}));
    })(VitalSigns = EMR.VitalSigns || (EMR.VitalSigns = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var VitalSigns;
    (function (VitalSigns) {
        var VVitalSignsService;
        (function (VVitalSignsService) {
            VVitalSignsService.baseUrl = 'VitalSigns/VVitalSigns';
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                VVitalSignsService[x] = function (r, s, o) {
                    return Q.serviceRequest(VVitalSignsService.baseUrl + '/' + x, r, s, o);
                };
            });
        })(VVitalSignsService = VitalSigns.VVitalSignsService || (VitalSigns.VVitalSignsService = {}));
    })(VitalSigns = EMR.VitalSigns || (EMR.VitalSigns = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var LanguageList;
    (function (LanguageList) {
        function getValue() {
            var result = [];
            for (var _i = 0, _a = EMR.Administration.LanguageRow.getLookup().items; _i < _a.length; _i++) {
                var k = _a[_i];
                if (k.LanguageId !== 'en') {
                    result.push([k.Id.toString(), k.LanguageName]);
                }
            }
            return result;
        }
        LanguageList.getValue = getValue;
    })(LanguageList = EMR.LanguageList || (EMR.LanguageList = {}));
})(EMR || (EMR = {}));
/// <reference path="../Common/Helpers/LanguageList.ts" />
var EMR;
(function (EMR) {
    var ScriptInitialization;
    (function (ScriptInitialization) {
        Q.Config.responsiveDialogs = true;
        Q.Config.rootNamespaces.push('EMR');
        Serenity.EntityDialog.defaultLanguageList = EMR.LanguageList.getValue;
        if ($.fn['colorbox']) {
            $.fn['colorbox'].settings.maxWidth = "95%";
            $.fn['colorbox'].settings.maxHeight = "95%";
        }
        window.onerror = Q.ErrorHandling.runtimeErrorHandler;
    })(ScriptInitialization = EMR.ScriptInitialization || (EMR.ScriptInitialization = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Common;
    (function (Common) {
        var ShamsiDatePickerEditor = /** @class */ (function (_super) {
            __extends(ShamsiDatePickerEditor, _super);
            function ShamsiDatePickerEditor(container) {
                var _this = _super.call(this, container) || this;
                _this.updateElementContent();
                return _this;
            }
            ShamsiDatePickerEditor.prototype.updateElementContent = function () {
                var divID = this.element.attr('id');
                var inputID = 'shspkr' + this.uniqueName;
                this.element.append('<input type="text" class="editor flexify" id="' + inputID + '" /><span class="fa fa-calendar fa-lg" style="padding-top: 5px; padding-left: 3px; border-radius: 4px"><i></i></span>');
                this.element.append("<script>" +
                    "$('#" + divID + "').MdPersianDateTimePicker({" +
                    "TargetSelector: '#shspkr" + this.uniqueName + "'," +
                    "EnglishNumber: true" +
                    "});" +
                    "</script>");
            };
            Object.defineProperty(ShamsiDatePickerEditor.prototype, "value", {
                get: function () {
                    return $('#shspkr' + this.uniqueName).val();
                },
                set: function (value) {
                    if (value != undefined) {
                        var pick = this.element.data('MdPersianDateTimePicker');
                        $('#shspkr' + this.uniqueName).val(value || '');
                        //pick.update();
                    }
                },
                enumerable: true,
                configurable: true
            });
            ShamsiDatePickerEditor.prototype.getEditValue = function (property, target) {
                target[property.name] = this.value;
            };
            ShamsiDatePickerEditor.prototype.setEditValue = function (source, property) {
                this.value = source[property.name];
            };
            ShamsiDatePickerEditor = __decorate([
                Serenity.Decorators.element("<div style='display: flex' />"),
                Serenity.Decorators.registerEditor([Serenity.IGetEditValue, Serenity.ISetEditValue])
            ], ShamsiDatePickerEditor);
            return ShamsiDatePickerEditor;
        }(Serenity.Widget));
        Common.ShamsiDatePickerEditor = ShamsiDatePickerEditor;
    })(Common = EMR.Common || (EMR.Common = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var DashboardUrlDialog = /** @class */ (function (_super) {
            __extends(DashboardUrlDialog, _super);
            function DashboardUrlDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Administration.DashboardUrlForm(_this.idPrefix);
                return _this;
            }
            DashboardUrlDialog.prototype.getFormKey = function () { return Administration.DashboardUrlForm.formKey; };
            DashboardUrlDialog.prototype.getIdProperty = function () { return Administration.DashboardUrlRow.idProperty; };
            DashboardUrlDialog.prototype.getLocalTextPrefix = function () { return Administration.DashboardUrlRow.localTextPrefix; };
            DashboardUrlDialog.prototype.getNameProperty = function () { return Administration.DashboardUrlRow.nameProperty; };
            DashboardUrlDialog.prototype.getService = function () { return Administration.DashboardUrlService.baseUrl; };
            DashboardUrlDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], DashboardUrlDialog);
            return DashboardUrlDialog;
        }(Serenity.EntityDialog));
        Administration.DashboardUrlDialog = DashboardUrlDialog;
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var DashboardUrlGrid = /** @class */ (function (_super) {
            __extends(DashboardUrlGrid, _super);
            function DashboardUrlGrid(container) {
                return _super.call(this, container) || this;
            }
            DashboardUrlGrid.prototype.getColumnsKey = function () { return 'Administration.DashboardUrl'; };
            DashboardUrlGrid.prototype.getDialogType = function () { return Administration.DashboardUrlDialog; };
            DashboardUrlGrid.prototype.getIdProperty = function () { return Administration.DashboardUrlRow.idProperty; };
            DashboardUrlGrid.prototype.getLocalTextPrefix = function () { return Administration.DashboardUrlRow.localTextPrefix; };
            DashboardUrlGrid.prototype.getService = function () { return Administration.DashboardUrlService.baseUrl; };
            DashboardUrlGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], DashboardUrlGrid);
            return DashboardUrlGrid;
        }(Serenity.EntityGrid));
        Administration.DashboardUrlGrid = DashboardUrlGrid;
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var LanguageDialog = /** @class */ (function (_super) {
            __extends(LanguageDialog, _super);
            function LanguageDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Administration.LanguageForm(_this.idPrefix);
                return _this;
            }
            LanguageDialog.prototype.getFormKey = function () { return Administration.LanguageForm.formKey; };
            LanguageDialog.prototype.getIdProperty = function () { return Administration.LanguageRow.idProperty; };
            LanguageDialog.prototype.getLocalTextPrefix = function () { return Administration.LanguageRow.localTextPrefix; };
            LanguageDialog.prototype.getNameProperty = function () { return Administration.LanguageRow.nameProperty; };
            LanguageDialog.prototype.getService = function () { return Administration.LanguageService.baseUrl; };
            LanguageDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], LanguageDialog);
            return LanguageDialog;
        }(Serenity.EntityDialog));
        Administration.LanguageDialog = LanguageDialog;
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var LanguageGrid = /** @class */ (function (_super) {
            __extends(LanguageGrid, _super);
            function LanguageGrid(container) {
                return _super.call(this, container) || this;
            }
            LanguageGrid.prototype.getColumnsKey = function () { return "Administration.Language"; };
            LanguageGrid.prototype.getDialogType = function () { return Administration.LanguageDialog; };
            LanguageGrid.prototype.getIdProperty = function () { return Administration.LanguageRow.idProperty; };
            LanguageGrid.prototype.getLocalTextPrefix = function () { return Administration.LanguageRow.localTextPrefix; };
            LanguageGrid.prototype.getService = function () { return Administration.LanguageService.baseUrl; };
            LanguageGrid.prototype.getDefaultSortBy = function () {
                return ["LanguageName" /* LanguageName */];
            };
            LanguageGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], LanguageGrid);
            return LanguageGrid;
        }(Serenity.EntityGrid));
        Administration.LanguageGrid = LanguageGrid;
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var ModulesDialog = /** @class */ (function (_super) {
            __extends(ModulesDialog, _super);
            function ModulesDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Administration.ModulesForm(_this.idPrefix);
                return _this;
            }
            ModulesDialog.prototype.getFormKey = function () { return Administration.ModulesForm.formKey; };
            ModulesDialog.prototype.getIdProperty = function () { return Administration.ModulesRow.idProperty; };
            ModulesDialog.prototype.getLocalTextPrefix = function () { return Administration.ModulesRow.localTextPrefix; };
            ModulesDialog.prototype.getNameProperty = function () { return Administration.ModulesRow.nameProperty; };
            ModulesDialog.prototype.getService = function () { return Administration.ModulesService.baseUrl; };
            ModulesDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], ModulesDialog);
            return ModulesDialog;
        }(Serenity.EntityDialog));
        Administration.ModulesDialog = ModulesDialog;
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var ModulesGrid = /** @class */ (function (_super) {
            __extends(ModulesGrid, _super);
            function ModulesGrid(container) {
                return _super.call(this, container) || this;
            }
            ModulesGrid.prototype.getColumnsKey = function () { return 'Administration.Modules'; };
            ModulesGrid.prototype.getDialogType = function () { return Administration.ModulesDialog; };
            ModulesGrid.prototype.getIdProperty = function () { return Administration.ModulesRow.idProperty; };
            ModulesGrid.prototype.getLocalTextPrefix = function () { return Administration.ModulesRow.localTextPrefix; };
            ModulesGrid.prototype.getService = function () { return Administration.ModulesService.baseUrl; };
            ModulesGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ModulesGrid);
            return ModulesGrid;
        }(Serenity.EntityGrid));
        Administration.ModulesGrid = ModulesGrid;
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var RoleDialog = /** @class */ (function (_super) {
            __extends(RoleDialog, _super);
            function RoleDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Administration.RoleForm(_this.idPrefix);
                return _this;
            }
            RoleDialog.prototype.getFormKey = function () { return Administration.RoleForm.formKey; };
            RoleDialog.prototype.getIdProperty = function () { return Administration.RoleRow.idProperty; };
            RoleDialog.prototype.getLocalTextPrefix = function () { return Administration.RoleRow.localTextPrefix; };
            RoleDialog.prototype.getNameProperty = function () { return Administration.RoleRow.nameProperty; };
            RoleDialog.prototype.getService = function () { return Administration.RoleService.baseUrl; };
            RoleDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.push({
                    title: Q.text('Site.RolePermissionDialog.EditButton'),
                    cssClass: 'edit-permissions-button',
                    icon: 'fa-lock text-green',
                    onClick: function () {
                        new Administration.RolePermissionDialog({
                            roleID: _this.entity.RoleId,
                            title: _this.entity.RoleName
                        }).dialogOpen();
                    }
                });
                return buttons;
            };
            RoleDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                this.toolbar.findButton("edit-permissions-button").toggleClass("disabled", this.isNewOrDeleted());
            };
            RoleDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], RoleDialog);
            return RoleDialog;
        }(Serenity.EntityDialog));
        Administration.RoleDialog = RoleDialog;
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var RoleGrid = /** @class */ (function (_super) {
            __extends(RoleGrid, _super);
            function RoleGrid(container) {
                return _super.call(this, container) || this;
            }
            RoleGrid.prototype.getColumnsKey = function () { return "Administration.Role"; };
            RoleGrid.prototype.getDialogType = function () { return Administration.RoleDialog; };
            RoleGrid.prototype.getIdProperty = function () { return Administration.RoleRow.idProperty; };
            RoleGrid.prototype.getLocalTextPrefix = function () { return Administration.RoleRow.localTextPrefix; };
            RoleGrid.prototype.getService = function () { return Administration.RoleService.baseUrl; };
            RoleGrid.prototype.getDefaultSortBy = function () {
                return ["RoleName" /* RoleName */];
            };
            RoleGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], RoleGrid);
            return RoleGrid;
        }(Serenity.EntityGrid));
        Administration.RoleGrid = RoleGrid;
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var RolePermissionDialog = /** @class */ (function (_super) {
            __extends(RolePermissionDialog, _super);
            function RolePermissionDialog(opt) {
                var _this = _super.call(this, opt) || this;
                _this.permissions = new Administration.PermissionCheckEditor(_this.byId('Permissions'), {
                    showRevoke: false
                });
                Administration.RolePermissionService.List({
                    RoleID: _this.options.roleID,
                    Module: null,
                    Submodule: null
                }, function (response) {
                    _this.permissions.value = response.Entities.map(function (x) { return ({ PermissionKey: x }); });
                });
                _this.permissions.implicitPermissions = Q.getRemoteData('Administration.ImplicitPermissions');
                return _this;
            }
            RolePermissionDialog.prototype.getDialogOptions = function () {
                var _this = this;
                var opt = _super.prototype.getDialogOptions.call(this);
                opt.buttons = [
                    {
                        text: Q.text('Dialogs.OkButton'),
                        click: function (e) {
                            Administration.RolePermissionService.Update({
                                RoleID: _this.options.roleID,
                                Permissions: _this.permissions.value.map(function (x) { return x.PermissionKey; }),
                                Module: null,
                                Submodule: null
                            }, function (response) {
                                _this.dialogClose();
                                window.setTimeout(function () { return Q.notifySuccess(Q.text('Site.RolePermissionDialog.SaveSuccess')); }, 0);
                            });
                        }
                    }, {
                        text: Q.text('Dialogs.CancelButton'),
                        click: function () { return _this.dialogClose(); }
                    }
                ];
                opt.title = Q.format(Q.text('Site.RolePermissionDialog.DialogTitle'), this.options.title);
                return opt;
            };
            RolePermissionDialog.prototype.getTemplate = function () {
                return '<div id="~_Permissions"></div>';
            };
            RolePermissionDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], RolePermissionDialog);
            return RolePermissionDialog;
        }(Serenity.TemplatedDialog));
        Administration.RolePermissionDialog = RolePermissionDialog;
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var TenantDialog = /** @class */ (function (_super) {
            __extends(TenantDialog, _super);
            function TenantDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Administration.TenantForm(_this.idPrefix);
                return _this;
            }
            TenantDialog.prototype.getFormKey = function () { return Administration.TenantForm.formKey; };
            TenantDialog.prototype.getIdProperty = function () { return Administration.TenantRow.idProperty; };
            TenantDialog.prototype.getLocalTextPrefix = function () { return Administration.TenantRow.localTextPrefix; };
            TenantDialog.prototype.getNameProperty = function () { return Administration.TenantRow.nameProperty; };
            TenantDialog.prototype.getService = function () { return Administration.TenantService.baseUrl; };
            TenantDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], TenantDialog);
            return TenantDialog;
        }(Serenity.EntityDialog));
        Administration.TenantDialog = TenantDialog;
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var TenantGrid = /** @class */ (function (_super) {
            __extends(TenantGrid, _super);
            function TenantGrid(container) {
                return _super.call(this, container) || this;
            }
            TenantGrid.prototype.getColumnsKey = function () { return 'Administration.Tenant'; };
            TenantGrid.prototype.getDialogType = function () { return Administration.TenantDialog; };
            TenantGrid.prototype.getIdProperty = function () { return Administration.TenantRow.idProperty; };
            TenantGrid.prototype.getLocalTextPrefix = function () { return Administration.TenantRow.localTextPrefix; };
            TenantGrid.prototype.getService = function () { return Administration.TenantService.baseUrl; };
            TenantGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TenantGrid);
            return TenantGrid;
        }(Serenity.EntityGrid));
        Administration.TenantGrid = TenantGrid;
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var TranslationGrid = /** @class */ (function (_super) {
            __extends(TranslationGrid, _super);
            function TranslationGrid(container) {
                var _this = _super.call(this, container) || this;
                _this.element.on('keyup.' + _this.uniqueName + ' change.' + _this.uniqueName, 'input.custom-text', function (e) {
                    var value = Q.trimToNull($(e.target).val());
                    if (value === '') {
                        value = null;
                    }
                    _this.view.getItemById($(e.target).data('key')).CustomText = value;
                    _this.hasChanges = true;
                });
                return _this;
            }
            TranslationGrid.prototype.getIdProperty = function () { return "Key"; };
            TranslationGrid.prototype.getLocalTextPrefix = function () { return "Administration.Translation"; };
            TranslationGrid.prototype.getService = function () { return Administration.TranslationService.baseUrl; };
            TranslationGrid.prototype.onClick = function (e, row, cell) {
                var _this = this;
                _super.prototype.onClick.call(this, e, row, cell);
                if (e.isDefaultPrevented()) {
                    return;
                }
                var item = this.itemAt(row);
                var done;
                if ($(e.target).hasClass('source-text')) {
                    e.preventDefault();
                    done = function () {
                        item.CustomText = item.SourceText;
                        _this.view.updateItem(item.Key, item);
                        _this.hasChanges = true;
                    };
                    if (Q.isTrimmedEmpty(item.CustomText) ||
                        (Q.trimToEmpty(item.CustomText) === Q.trimToEmpty(item.SourceText))) {
                        done();
                        return;
                    }
                    Q.confirm(Q.text('Db.Administration.Translation.OverrideConfirmation'), done);
                    return;
                }
                if ($(e.target).hasClass('target-text')) {
                    e.preventDefault();
                    done = function () {
                        item.CustomText = item.TargetText;
                        _this.view.updateItem(item.Key, item);
                        _this.hasChanges = true;
                    };
                    if (Q.isTrimmedEmpty(item.CustomText) ||
                        (Q.trimToEmpty(item.CustomText) === Q.trimToEmpty(item.TargetText))) {
                        done();
                        return;
                    }
                    Q.confirm(Q.text('Db.Administration.Translation.OverrideConfirmation'), done);
                    return;
                }
            };
            TranslationGrid.prototype.getColumns = function () {
                var columns = [];
                columns.push({ field: 'Key', width: 300, sortable: false });
                columns.push({
                    field: 'SourceText',
                    width: 300,
                    sortable: false,
                    format: function (ctx) {
                        return Q.outerHtml($('<a/>')
                            .addClass('source-text')
                            .text(ctx.value || ''));
                    }
                });
                columns.push({
                    field: 'CustomText',
                    width: 300,
                    sortable: false,
                    format: function (ctx) { return Q.outerHtml($('<input/>')
                        .addClass('custom-text')
                        .attr('value', ctx.value)
                        .attr('type', 'text')
                        .attr('data-key', ctx.item.Key)); }
                });
                columns.push({
                    field: 'TargetText',
                    width: 300,
                    sortable: false,
                    format: function (ctx) { return Q.outerHtml($('<a/>')
                        .addClass('target-text')
                        .text(ctx.value || '')); }
                });
                return columns;
            };
            TranslationGrid.prototype.createToolbarExtensions = function () {
                var _this = this;
                _super.prototype.createToolbarExtensions.call(this);
                var opt = {
                    lookupKey: 'Administration.Language'
                };
                this.sourceLanguage = Serenity.Widget.create({
                    type: Serenity.LookupEditor,
                    element: function (el) { return el.appendTo(_this.toolbar.element).attr('placeholder', '--- ' +
                        Q.text('Db.Administration.Translation.SourceLanguage') + ' ---'); },
                    options: opt
                });
                this.sourceLanguage.changeSelect2(function (e) {
                    if (_this.hasChanges) {
                        _this.saveChanges(_this.targetLanguageKey).then(function () { return _this.refresh(); });
                    }
                    else {
                        _this.refresh();
                    }
                });
                this.targetLanguage = Serenity.Widget.create({
                    type: Serenity.LookupEditor,
                    element: function (el) { return el.appendTo(_this.toolbar.element).attr('placeholder', '--- ' +
                        Q.text('Db.Administration.Translation.TargetLanguage') + ' ---'); },
                    options: opt
                });
                this.targetLanguage.changeSelect2(function (e) {
                    if (_this.hasChanges) {
                        _this.saveChanges(_this.targetLanguageKey).then(function () { return _this.refresh(); });
                    }
                    else {
                        _this.refresh();
                    }
                });
            };
            TranslationGrid.prototype.saveChanges = function (language) {
                var _this = this;
                var translations = {};
                for (var _i = 0, _a = this.getItems(); _i < _a.length; _i++) {
                    var item = _a[_i];
                    translations[item.Key] = item.CustomText;
                }
                return Promise.resolve(Administration.TranslationService.Update({
                    TargetLanguageID: language,
                    Translations: translations
                })).then(function () {
                    _this.hasChanges = false;
                    language = Q.trimToNull(language) || 'invariant';
                    Q.notifySuccess('User translations in "' + language +
                        '" language are saved to "user.texts.' +
                        language + '.json" ' + 'file under "~/App_Data/texts/"', '');
                });
            };
            TranslationGrid.prototype.onViewSubmit = function () {
                var request = this.view.params;
                request.SourceLanguageID = this.sourceLanguage.value;
                this.targetLanguageKey = this.targetLanguage.value || '';
                request.TargetLanguageID = this.targetLanguageKey;
                this.hasChanges = false;
                return _super.prototype.onViewSubmit.call(this);
            };
            TranslationGrid.prototype.getButtons = function () {
                var _this = this;
                return [{
                        title: Q.text('Db.Administration.Translation.SaveChangesButton'),
                        onClick: function (e) { return _this.saveChanges(_this.targetLanguageKey).then(function () { return _this.refresh(); }); },
                        cssClass: 'apply-changes-button'
                    }];
            };
            TranslationGrid.prototype.createQuickSearchInput = function () {
                var _this = this;
                Serenity.GridUtils.addQuickSearchInputCustom(this.toolbar.element, function (field, searchText) {
                    _this.searchText = searchText;
                    _this.view.setItems(_this.view.getItems(), true);
                });
            };
            TranslationGrid.prototype.onViewFilter = function (item) {
                if (!_super.prototype.onViewFilter.call(this, item)) {
                    return false;
                }
                if (!this.searchText) {
                    return true;
                }
                var sd = Select2.util.stripDiacritics;
                var searching = sd(this.searchText).toLowerCase();
                function match(str) {
                    if (!str)
                        return false;
                    return str.toLowerCase().indexOf(searching) >= 0;
                }
                return Q.isEmptyOrNull(searching) || match(item.Key) || match(item.SourceText) ||
                    match(item.TargetText) || match(item.CustomText);
            };
            TranslationGrid.prototype.usePager = function () {
                return false;
            };
            TranslationGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TranslationGrid);
            return TranslationGrid;
        }(Serenity.EntityGrid));
        Administration.TranslationGrid = TranslationGrid;
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var UserDialog = /** @class */ (function (_super) {
            __extends(UserDialog, _super);
            function UserDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Administration.UserForm(_this.idPrefix);
                _this.form.Password.addValidationRule(_this.uniqueName, function (e) {
                    if (_this.form.Password.value.length < 7)
                        return "Password must be at least 7 characters!";
                });
                _this.form.PasswordConfirm.addValidationRule(_this.uniqueName, function (e) {
                    if (_this.form.Password.value != _this.form.PasswordConfirm.value)
                        return "The passwords entered doesn't match!";
                });
                return _this;
            }
            UserDialog.prototype.getFormKey = function () { return Administration.UserForm.formKey; };
            UserDialog.prototype.getIdProperty = function () { return Administration.UserRow.idProperty; };
            UserDialog.prototype.getIsActiveProperty = function () { return Administration.UserRow.isActiveProperty; };
            UserDialog.prototype.getLocalTextPrefix = function () { return Administration.UserRow.localTextPrefix; };
            UserDialog.prototype.getNameProperty = function () { return Administration.UserRow.nameProperty; };
            UserDialog.prototype.getService = function () { return Administration.UserService.baseUrl; };
            UserDialog.prototype.getPropertyItems = function () {
                var items = _super.prototype.getPropertyItems.call(this);
                if (!Q.Authorization.hasPermission("Administration:Tenants"))
                    items = items.filter(function (x) { return x.name != "TenantId" /* TenantId */; });
                return items;
            };
            UserDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.push({
                    title: Q.text('Site.UserDialog.EditRolesButton'),
                    cssClass: 'edit-roles-button',
                    icon: 'fa-users text-blue',
                    onClick: function () {
                        new Administration.UserRoleDialog({
                            userID: _this.entity.UserId,
                            username: _this.entity.Username
                        }).dialogOpen();
                    }
                });
                buttons.push({
                    title: Q.text('Site.UserDialog.EditPermissionsButton'),
                    cssClass: 'edit-permissions-button',
                    icon: 'fa-lock text-green',
                    onClick: function () {
                        new Administration.UserPermissionDialog({
                            userID: _this.entity.UserId,
                            username: _this.entity.Username
                        }).dialogOpen();
                    }
                });
                return buttons;
            };
            UserDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                this.toolbar.findButton('edit-roles-button').toggleClass('disabled', this.isNewOrDeleted());
                this.toolbar.findButton("edit-permissions-button").toggleClass("disabled", this.isNewOrDeleted());
            };
            UserDialog.prototype.afterLoadEntity = function () {
                _super.prototype.afterLoadEntity.call(this);
                // these fields are only required in new record mode
                this.form.Password.element.toggleClass('required', this.isNew())
                    .closest('.field').find('sup').toggle(this.isNew());
                this.form.PasswordConfirm.element.toggleClass('required', this.isNew())
                    .closest('.field').find('sup').toggle(this.isNew());
            };
            UserDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], UserDialog);
            return UserDialog;
        }(Serenity.EntityDialog));
        Administration.UserDialog = UserDialog;
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var UserGrid = /** @class */ (function (_super) {
            __extends(UserGrid, _super);
            function UserGrid(container) {
                return _super.call(this, container) || this;
            }
            UserGrid.prototype.getColumnsKey = function () { return "Administration.User"; };
            UserGrid.prototype.getDialogType = function () { return Administration.UserDialog; };
            UserGrid.prototype.getIdProperty = function () { return Administration.UserRow.idProperty; };
            UserGrid.prototype.getIsActiveProperty = function () { return Administration.UserRow.isActiveProperty; };
            UserGrid.prototype.getLocalTextPrefix = function () { return Administration.UserRow.localTextPrefix; };
            UserGrid.prototype.getService = function () { return Administration.UserService.baseUrl; };
            UserGrid.prototype.getDefaultSortBy = function () {
                return ["Username" /* Username */];
            };
            UserGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], UserGrid);
            return UserGrid;
        }(Serenity.EntityGrid));
        Administration.UserGrid = UserGrid;
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var PermissionCheckEditor = /** @class */ (function (_super) {
            __extends(PermissionCheckEditor, _super);
            function PermissionCheckEditor(container, opt) {
                var _this = _super.call(this, container, opt) || this;
                _this._rolePermissions = {};
                _this._implicitPermissions = {};
                var titleByKey = {};
                var permissionKeys = _this.getSortedGroupAndPermissionKeys(titleByKey);
                var items = permissionKeys.map(function (key) { return ({
                    Key: key,
                    ParentKey: _this.getParentKey(key),
                    Title: titleByKey[key],
                    GrantRevoke: null,
                    IsGroup: key.charAt(key.length - 1) === ':'
                }); });
                _this.byParentKey = Q.toGrouping(items, function (x) { return x.ParentKey; });
                _this.setItems(items);
                return _this;
            }
            PermissionCheckEditor.prototype.getIdProperty = function () { return "Key"; };
            PermissionCheckEditor.prototype.getItemGrantRevokeClass = function (item, grant) {
                if (!item.IsGroup) {
                    return ((item.GrantRevoke === grant) ? ' checked' : '');
                }
                var desc = this.getDescendants(item, true);
                var granted = desc.filter(function (x) { return x.GrantRevoke === grant; });
                if (!granted.length) {
                    return '';
                }
                if (desc.length === granted.length) {
                    return 'checked';
                }
                return 'checked partial';
            };
            PermissionCheckEditor.prototype.roleOrImplicit = function (key) {
                if (this._rolePermissions[key])
                    return true;
                for (var _i = 0, _a = Object.keys(this._rolePermissions); _i < _a.length; _i++) {
                    var k = _a[_i];
                    var d = this._implicitPermissions[k];
                    if (d && d[key])
                        return true;
                }
                for (var _b = 0, _c = Object.keys(this._implicitPermissions); _b < _c.length; _b++) {
                    var i = _c[_b];
                    var item = this.view.getItemById(i);
                    if (item && item.GrantRevoke == true) {
                        var d = this._implicitPermissions[i];
                        if (d && d[key])
                            return true;
                    }
                }
            };
            PermissionCheckEditor.prototype.getItemEffectiveClass = function (item) {
                var _this = this;
                if (item.IsGroup) {
                    var desc = this.getDescendants(item, true);
                    var grantCount = Q.count(desc, function (x) { return x.GrantRevoke === true ||
                        (x.GrantRevoke == null && _this.roleOrImplicit(x.Key)); });
                    if (grantCount === desc.length || desc.length === 0) {
                        return 'allow';
                    }
                    if (grantCount === 0) {
                        return 'deny';
                    }
                    return 'partial';
                }
                var granted = item.GrantRevoke === true ||
                    (item.GrantRevoke == null && this.roleOrImplicit(item.Key));
                return (granted ? ' allow' : ' deny');
            };
            PermissionCheckEditor.prototype.getColumns = function () {
                var _this = this;
                var columns = [{
                        name: Q.text('Site.UserPermissionDialog.Permission'),
                        field: 'Title',
                        format: Serenity.SlickFormatting.treeToggle(function () { return _this.view; }, function (x) { return x.Key; }, function (ctx) {
                            var item = ctx.item;
                            var klass = _this.getItemEffectiveClass(item);
                            return '<span class="effective-permission ' + klass + '">' + Q.htmlEncode(ctx.value) + '</span>';
                        }),
                        width: 495,
                        sortable: false
                    }, {
                        name: Q.text('Site.UserPermissionDialog.Grant'), field: 'Grant',
                        format: function (ctx) {
                            var item1 = ctx.item;
                            var klass1 = _this.getItemGrantRevokeClass(item1, true);
                            return "<span class='check-box grant no-float " + klass1 + "'></span>";
                        },
                        width: 65,
                        sortable: false,
                        headerCssClass: 'align-center',
                        cssClass: 'align-center'
                    }];
                if (this.options.showRevoke) {
                    columns.push({
                        name: Q.text('Site.UserPermissionDialog.Revoke'), field: 'Revoke',
                        format: function (ctx) {
                            var item2 = ctx.item;
                            var klass2 = _this.getItemGrantRevokeClass(item2, false);
                            return '<span class="check-box revoke no-float ' + klass2 + '"></span>';
                        },
                        width: 65,
                        sortable: false,
                        headerCssClass: 'align-center',
                        cssClass: 'align-center'
                    });
                }
                return columns;
            };
            PermissionCheckEditor.prototype.setItems = function (items) {
                Serenity.SlickTreeHelper.setIndents(items, function (x) { return x.Key; }, function (x) { return x.ParentKey; }, false);
                this.view.setItems(items, true);
            };
            PermissionCheckEditor.prototype.onViewSubmit = function () {
                return false;
            };
            PermissionCheckEditor.prototype.onViewFilter = function (item) {
                var _this = this;
                if (!_super.prototype.onViewFilter.call(this, item)) {
                    return false;
                }
                if (!Serenity.SlickTreeHelper.filterById(item, this.view, function (x) { return x.ParentKey; }))
                    return false;
                if (this.searchText) {
                    return this.matchContains(item) || item.IsGroup && Q.any(this.getDescendants(item, false), function (x) { return _this.matchContains(x); });
                }
                return true;
            };
            PermissionCheckEditor.prototype.matchContains = function (item) {
                return Select2.util.stripDiacritics(item.Title || '').toLowerCase().indexOf(this.searchText) >= 0;
            };
            PermissionCheckEditor.prototype.getDescendants = function (item, excludeGroups) {
                var result = [];
                var stack = [item];
                while (stack.length > 0) {
                    var i = stack.pop();
                    var children = this.byParentKey[i.Key];
                    if (!children)
                        continue;
                    for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {
                        var child = children_1[_i];
                        if (!excludeGroups || !child.IsGroup) {
                            result.push(child);
                        }
                        stack.push(child);
                    }
                }
                return result;
            };
            PermissionCheckEditor.prototype.onClick = function (e, row, cell) {
                _super.prototype.onClick.call(this, e, row, cell);
                if (!e.isDefaultPrevented()) {
                    Serenity.SlickTreeHelper.toggleClick(e, row, cell, this.view, function (x) { return x.Key; });
                }
                if (e.isDefaultPrevented()) {
                    return;
                }
                var target = $(e.target);
                var grant = target.hasClass('grant');
                if (grant || target.hasClass('revoke')) {
                    e.preventDefault();
                    var item = this.itemAt(row);
                    var checkedOrPartial = target.hasClass('checked') || target.hasClass('partial');
                    if (checkedOrPartial) {
                        grant = null;
                    }
                    else {
                        grant = grant !== checkedOrPartial;
                    }
                    if (item.IsGroup) {
                        for (var _i = 0, _a = this.getDescendants(item, true); _i < _a.length; _i++) {
                            var d = _a[_i];
                            d.GrantRevoke = grant;
                        }
                    }
                    else
                        item.GrantRevoke = grant;
                    this.slickGrid.invalidate();
                }
            };
            PermissionCheckEditor.prototype.getParentKey = function (key) {
                if (key.charAt(key.length - 1) === ':') {
                    key = key.substr(0, key.length - 1);
                }
                var idx = key.lastIndexOf(':');
                if (idx >= 0) {
                    return key.substr(0, idx + 1);
                }
                return null;
            };
            PermissionCheckEditor.prototype.getButtons = function () {
                return [];
            };
            PermissionCheckEditor.prototype.createToolbarExtensions = function () {
                var _this = this;
                _super.prototype.createToolbarExtensions.call(this);
                Serenity.GridUtils.addQuickSearchInputCustom(this.toolbar.element, function (field, text) {
                    _this.searchText = Select2.util.stripDiacritics(Q.trimToNull(text) || '').toLowerCase();
                    _this.view.setItems(_this.view.getItems(), true);
                });
            };
            PermissionCheckEditor.prototype.getSortedGroupAndPermissionKeys = function (titleByKey) {
                var keys = Q.getRemoteData('Administration.PermissionKeys').Entities;
                var titleWithGroup = {};
                for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                    var k = keys_1[_i];
                    var s = k;
                    if (!s) {
                        continue;
                    }
                    if (s.charAt(s.length - 1) == ':') {
                        s = s.substr(0, s.length - 1);
                        if (s.length === 0) {
                            continue;
                        }
                    }
                    if (titleByKey[s]) {
                        continue;
                    }
                    titleByKey[s] = Q.coalesce(Q.tryGetText('Permission.' + s), s);
                    var parts = s.split(':');
                    var group = '';
                    var groupTitle = '';
                    for (var i = 0; i < parts.length - 1; i++) {
                        group = group + parts[i] + ':';
                        var txt = Q.tryGetText('Permission.' + group);
                        if (txt == null) {
                            txt = parts[i];
                        }
                        titleByKey[group] = txt;
                        groupTitle = groupTitle + titleByKey[group] + ':';
                        titleWithGroup[group] = groupTitle;
                    }
                    titleWithGroup[s] = groupTitle + titleByKey[s];
                }
                keys = Object.keys(titleByKey);
                keys = keys.sort(function (x, y) { return Q.turkishLocaleCompare(titleWithGroup[x], titleWithGroup[y]); });
                return keys;
            };
            Object.defineProperty(PermissionCheckEditor.prototype, "value", {
                get: function () {
                    var result = [];
                    for (var _i = 0, _a = this.view.getItems(); _i < _a.length; _i++) {
                        var item = _a[_i];
                        if (item.GrantRevoke != null && item.Key.charAt(item.Key.length - 1) != ':') {
                            result.push({ PermissionKey: item.Key, Granted: item.GrantRevoke });
                        }
                    }
                    return result;
                },
                set: function (value) {
                    for (var _i = 0, _a = this.view.getItems(); _i < _a.length; _i++) {
                        var item = _a[_i];
                        item.GrantRevoke = null;
                    }
                    if (value != null) {
                        for (var _b = 0, value_1 = value; _b < value_1.length; _b++) {
                            var row = value_1[_b];
                            var r = this.view.getItemById(row.PermissionKey);
                            if (r) {
                                r.GrantRevoke = Q.coalesce(row.Granted, true);
                            }
                        }
                    }
                    this.setItems(this.getItems());
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PermissionCheckEditor.prototype, "rolePermissions", {
                get: function () {
                    return Object.keys(this._rolePermissions);
                },
                set: function (value) {
                    this._rolePermissions = {};
                    if (value) {
                        for (var _i = 0, value_2 = value; _i < value_2.length; _i++) {
                            var k = value_2[_i];
                            this._rolePermissions[k] = true;
                        }
                    }
                    this.setItems(this.getItems());
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PermissionCheckEditor.prototype, "implicitPermissions", {
                set: function (value) {
                    this._implicitPermissions = {};
                    if (value) {
                        for (var _i = 0, _a = Object.keys(value); _i < _a.length; _i++) {
                            var k = _a[_i];
                            this._implicitPermissions[k] = this._implicitPermissions[k] || {};
                            var l = value[k];
                            if (l) {
                                for (var _b = 0, l_1 = l; _b < l_1.length; _b++) {
                                    var s = l_1[_b];
                                    this._implicitPermissions[k][s] = true;
                                }
                            }
                        }
                    }
                },
                enumerable: true,
                configurable: true
            });
            PermissionCheckEditor = __decorate([
                Serenity.Decorators.registerEditor([Serenity.IGetEditValue, Serenity.ISetEditValue])
            ], PermissionCheckEditor);
            return PermissionCheckEditor;
        }(Serenity.DataGrid));
        Administration.PermissionCheckEditor = PermissionCheckEditor;
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var UserPermissionDialog = /** @class */ (function (_super) {
            __extends(UserPermissionDialog, _super);
            function UserPermissionDialog(opt) {
                var _this = _super.call(this, opt) || this;
                _this.permissions = new Administration.PermissionCheckEditor(_this.byId('Permissions'), {
                    showRevoke: true
                });
                Administration.UserPermissionService.List({
                    UserID: _this.options.userID,
                    Module: null,
                    Submodule: null
                }, function (response) {
                    _this.permissions.value = response.Entities;
                });
                Administration.UserPermissionService.ListRolePermissions({
                    UserID: _this.options.userID,
                    Module: null,
                    Submodule: null,
                }, function (response) {
                    _this.permissions.rolePermissions = response.Entities;
                });
                _this.permissions.implicitPermissions = Q.getRemoteData('Administration.ImplicitPermissions');
                return _this;
            }
            UserPermissionDialog.prototype.getDialogOptions = function () {
                var _this = this;
                var opt = _super.prototype.getDialogOptions.call(this);
                opt.buttons = [
                    {
                        text: Q.text('Dialogs.OkButton'),
                        click: function (e) {
                            Administration.UserPermissionService.Update({
                                UserID: _this.options.userID,
                                Permissions: _this.permissions.value,
                                Module: null,
                                Submodule: null
                            }, function (response) {
                                _this.dialogClose();
                                window.setTimeout(function () { return Q.notifySuccess(Q.text('Site.UserPermissionDialog.SaveSuccess')); }, 0);
                            });
                        }
                    }, {
                        text: Q.text('Dialogs.CancelButton'),
                        click: function () { return _this.dialogClose(); }
                    }
                ];
                opt.title = Q.format(Q.text('Site.UserPermissionDialog.DialogTitle'), this.options.username);
                return opt;
            };
            UserPermissionDialog.prototype.getTemplate = function () {
                return '<div id="~_Permissions"></div>';
            };
            UserPermissionDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], UserPermissionDialog);
            return UserPermissionDialog;
        }(Serenity.TemplatedDialog));
        Administration.UserPermissionDialog = UserPermissionDialog;
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var RoleCheckEditor = /** @class */ (function (_super) {
            __extends(RoleCheckEditor, _super);
            function RoleCheckEditor(div) {
                return _super.call(this, div) || this;
            }
            RoleCheckEditor.prototype.createToolbarExtensions = function () {
                var _this = this;
                _super.prototype.createToolbarExtensions.call(this);
                Serenity.GridUtils.addQuickSearchInputCustom(this.toolbar.element, function (field, text) {
                    _this.searchText = Select2.util.stripDiacritics(text || '').toUpperCase();
                    _this.view.setItems(_this.view.getItems(), true);
                });
            };
            RoleCheckEditor.prototype.getButtons = function () {
                return [];
            };
            RoleCheckEditor.prototype.getTreeItems = function () {
                return Administration.RoleRow.getLookup().items.map(function (role) { return ({
                    id: role.RoleId.toString(),
                    text: role.RoleName
                }); });
            };
            RoleCheckEditor.prototype.onViewFilter = function (item) {
                return _super.prototype.onViewFilter.call(this, item) &&
                    (Q.isEmptyOrNull(this.searchText) ||
                        Select2.util.stripDiacritics(item.text || '')
                            .toUpperCase().indexOf(this.searchText) >= 0);
            };
            RoleCheckEditor = __decorate([
                Serenity.Decorators.registerEditor()
            ], RoleCheckEditor);
            return RoleCheckEditor;
        }(Serenity.CheckTreeEditor));
        Administration.RoleCheckEditor = RoleCheckEditor;
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Administration;
    (function (Administration) {
        var UserRoleDialog = /** @class */ (function (_super) {
            __extends(UserRoleDialog, _super);
            function UserRoleDialog(opt) {
                var _this = _super.call(this, opt) || this;
                _this.permissions = new Administration.RoleCheckEditor(_this.byId('Roles'));
                Administration.UserRoleService.List({
                    UserID: _this.options.userID
                }, function (response) {
                    _this.permissions.value = response.Entities.map(function (x) { return x.toString(); });
                });
                return _this;
            }
            UserRoleDialog.prototype.getDialogOptions = function () {
                var _this = this;
                var opt = _super.prototype.getDialogOptions.call(this);
                opt.buttons = [{
                        text: Q.text('Dialogs.OkButton'),
                        click: function () {
                            Q.serviceRequest('Administration/UserRole/Update', {
                                UserID: _this.options.userID,
                                Roles: _this.permissions.value.map(function (x) { return parseInt(x, 10); })
                            }, function (response) {
                                _this.dialogClose();
                                Q.notifySuccess(Q.text('Site.UserRoleDialog.SaveSuccess'));
                            });
                        }
                    }, {
                        text: Q.text('Dialogs.CancelButton'),
                        click: function () { return _this.dialogClose(); }
                    }];
                opt.title = Q.format(Q.text('Site.UserRoleDialog.DialogTitle'), this.options.username);
                return opt;
            };
            UserRoleDialog.prototype.getTemplate = function () {
                return "<div id='~_Roles'></div>";
            };
            UserRoleDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], UserRoleDialog);
            return UserRoleDialog;
        }(Serenity.TemplatedDialog));
        Administration.UserRoleDialog = UserRoleDialog;
    })(Administration = EMR.Administration || (EMR.Administration = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var BasicProgressDialog = /** @class */ (function (_super) {
        __extends(BasicProgressDialog, _super);
        function BasicProgressDialog() {
            var _this = _super.call(this) || this;
            _this.byId('ProgressBar').progressbar({
                max: 100,
                value: 0,
                change: function (e, v) {
                    _this.byId('ProgressLabel').text(_this.value + ' / ' + _this.max);
                }
            });
            return _this;
        }
        Object.defineProperty(BasicProgressDialog.prototype, "max", {
            get: function () {
                return this.byId('ProgressBar').progressbar().progressbar('option', 'max');
            },
            set: function (value) {
                this.byId('ProgressBar').progressbar().progressbar('option', 'max', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicProgressDialog.prototype, "value", {
            get: function () {
                return this.byId('ProgressBar').progressbar('value');
            },
            set: function (value) {
                this.byId('ProgressBar').progressbar().progressbar('value', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicProgressDialog.prototype, "title", {
            get: function () {
                return this.element.dialog().dialog('option', 'title');
            },
            set: function (value) {
                this.element.dialog().dialog('option', 'title', value);
            },
            enumerable: true,
            configurable: true
        });
        BasicProgressDialog.prototype.getDialogOptions = function () {
            var _this = this;
            var opt = _super.prototype.getDialogOptions.call(this);
            opt.title = Q.text('Site.BasicProgressDialog.PleaseWait');
            opt.width = 600;
            opt.buttons = [{
                    text: Q.text('Dialogs.CancelButton'),
                    click: function () {
                        _this.cancelled = true;
                        _this.element.closest('.ui-dialog')
                            .find('.ui-dialog-buttonpane .ui-button')
                            .attr('disabled', 'disabled')
                            .css('opacity', '0.5');
                        _this.element.dialog('option', 'title', Q.trimToNull(_this.cancelTitle) ||
                            Q.text('Site.BasicProgressDialog.CancelTitle'));
                    }
                }];
            return opt;
        };
        BasicProgressDialog.prototype.initDialog = function () {
            _super.prototype.initDialog.call(this);
            this.element.closest('.ui-dialog').find('.ui-dialog-titlebar-close').hide();
        };
        BasicProgressDialog.prototype.getTemplate = function () {
            return ("<div class='s-DialogContent s-BasicProgressDialogContent'>" +
                "<div id='~_StatusText' class='status-text' ></div>" +
                "<div id='~_ProgressBar' class='progress-bar'>" +
                "<div id='~_ProgressLabel' class='progress-label' ></div>" +
                "</div>" +
                "</div>");
        };
        return BasicProgressDialog;
    }(Serenity.TemplatedDialog));
    EMR.BasicProgressDialog = BasicProgressDialog;
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Common;
    (function (Common) {
        var BulkServiceAction = /** @class */ (function () {
            function BulkServiceAction() {
            }
            BulkServiceAction.prototype.createProgressDialog = function () {
                this.progressDialog = new EMR.BasicProgressDialog();
                this.progressDialog.dialogOpen();
                this.progressDialog.max = this.keys.length;
                this.progressDialog.value = 0;
            };
            BulkServiceAction.prototype.getConfirmationFormat = function () {
                return Q.text('Site.BulkServiceAction.ConfirmationFormat');
            };
            BulkServiceAction.prototype.getConfirmationMessage = function (targetCount) {
                return Q.format(this.getConfirmationFormat(), targetCount);
            };
            BulkServiceAction.prototype.confirm = function (targetCount, action) {
                Q.confirm(this.getConfirmationMessage(targetCount), action);
            };
            BulkServiceAction.prototype.getNothingToProcessMessage = function () {
                return Q.text('Site.BulkServiceAction.NothingToProcess');
            };
            BulkServiceAction.prototype.nothingToProcess = function () {
                Q.notifyError(this.getNothingToProcessMessage());
            };
            BulkServiceAction.prototype.getParallelRequests = function () {
                return 1;
            };
            BulkServiceAction.prototype.getBatchSize = function () {
                return 1;
            };
            BulkServiceAction.prototype.startParallelExecution = function () {
                this.createProgressDialog();
                this.successCount = 0;
                this.errorCount = 0;
                this.pendingRequests = 0;
                this.completedRequests = 0;
                this.errorCount = 0;
                this.errorByKey = {};
                this.queue = this.keys.slice();
                this.queueIndex = 0;
                var parallelRequests = this.getParallelRequests();
                while (parallelRequests-- > 0) {
                    this.executeNextBatch();
                }
            };
            BulkServiceAction.prototype.serviceCallCleanup = function () {
                this.pendingRequests--;
                this.completedRequests++;
                var title = Q.text((this.progressDialog.cancelled ?
                    'Site.BasicProgressDialog.CancelTitle' : 'Site.BasicProgressDialog.PleaseWait'));
                title += ' (';
                if (this.successCount > 0) {
                    title += Q.format(Q.text('Site.BulkServiceAction.SuccessCount'), this.successCount);
                }
                if (this.errorCount > 0) {
                    if (this.successCount > 0) {
                        title += ', ';
                    }
                    title += Q.format(Q.text('Site.BulkServiceAction.ErrorCount'), this.errorCount);
                }
                this.progressDialog.title = title + ')';
                this.progressDialog.value = this.successCount + this.errorCount;
                if (!this.progressDialog.cancelled && this.progressDialog.value < this.keys.length) {
                    this.executeNextBatch();
                }
                else if (this.pendingRequests === 0) {
                    this.progressDialog.dialogClose();
                    this.showResults();
                    if (this.done) {
                        this.done();
                        this.done = null;
                    }
                }
            };
            BulkServiceAction.prototype.executeForBatch = function (batch) {
            };
            BulkServiceAction.prototype.executeNextBatch = function () {
                var batchSize = this.getBatchSize();
                var batch = [];
                while (true) {
                    if (batch.length >= batchSize) {
                        break;
                    }
                    if (this.queueIndex >= this.queue.length) {
                        break;
                    }
                    batch.push(this.queue[this.queueIndex++]);
                }
                if (batch.length > 0) {
                    this.pendingRequests++;
                    this.executeForBatch(batch);
                }
            };
            BulkServiceAction.prototype.getAllHadErrorsFormat = function () {
                return Q.text('Site.BulkServiceAction.AllHadErrorsFormat');
            };
            BulkServiceAction.prototype.showAllHadErrors = function () {
                Q.notifyError(Q.format(this.getAllHadErrorsFormat(), this.errorCount));
            };
            BulkServiceAction.prototype.getSomeHadErrorsFormat = function () {
                return Q.text('Site.BulkServiceAction.SomeHadErrorsFormat');
            };
            BulkServiceAction.prototype.showSomeHadErrors = function () {
                Q.notifyWarning(Q.format(this.getSomeHadErrorsFormat(), this.successCount, this.errorCount));
            };
            BulkServiceAction.prototype.getAllSuccessFormat = function () {
                return Q.text('Site.BulkServiceAction.AllSuccessFormat');
            };
            BulkServiceAction.prototype.showAllSuccess = function () {
                Q.notifySuccess(Q.format(this.getAllSuccessFormat(), this.successCount));
            };
            BulkServiceAction.prototype.showResults = function () {
                if (this.errorCount === 0 && this.successCount === 0) {
                    this.nothingToProcess();
                    return;
                }
                if (this.errorCount > 0 && this.successCount === 0) {
                    this.showAllHadErrors();
                    return;
                }
                if (this.errorCount > 0) {
                    this.showSomeHadErrors();
                    return;
                }
                this.showAllSuccess();
            };
            BulkServiceAction.prototype.execute = function (keys) {
                var _this = this;
                this.keys = keys;
                if (this.keys.length === 0) {
                    this.nothingToProcess();
                    return;
                }
                this.confirm(this.keys.length, function () { return _this.startParallelExecution(); });
            };
            BulkServiceAction.prototype.get_successCount = function () {
                return this.successCount;
            };
            BulkServiceAction.prototype.set_successCount = function (value) {
                this.successCount = value;
            };
            BulkServiceAction.prototype.get_errorCount = function () {
                return this.errorCount;
            };
            BulkServiceAction.prototype.set_errorCount = function (value) {
                this.errorCount = value;
            };
            return BulkServiceAction;
        }());
        Common.BulkServiceAction = BulkServiceAction;
    })(Common = EMR.Common || (EMR.Common = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var DialogUtils;
    (function (DialogUtils) {
        function pendingChangesConfirmation(element, hasPendingChanges) {
            element.on('dialogbeforeclose panelbeforeclose', function (e) {
                if (!Serenity.WX.hasOriginalEvent(e) || !hasPendingChanges()) {
                    return;
                }
                e.preventDefault();
                Q.confirm('You have pending changes. Save them?', function () { return element.find('div.save-and-close-button').click(); }, {
                    onNo: function () {
                        if (element.hasClass('ui-dialog-content'))
                            element.dialog('close');
                        else if (element.hasClass('s-Panel'))
                            Serenity.TemplatedDialog.closePanel(element);
                    }
                });
            });
        }
        DialogUtils.pendingChangesConfirmation = pendingChangesConfirmation;
    })(DialogUtils = EMR.DialogUtils || (EMR.DialogUtils = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Common;
    (function (Common) {
        var EnumSelectFormatter = /** @class */ (function () {
            function EnumSelectFormatter() {
                this.allowClear = true;
            }
            EnumSelectFormatter.prototype.format = function (ctx) {
                var enumType = Serenity.EnumTypeRegistry.get(this.enumKey);
                var sb = "<select>";
                if (this.allowClear) {
                    sb += '<option value="">';
                    sb += Q.htmlEncode(this.emptyItemText || Q.text("Controls.SelectEditor.EmptyItemText"));
                    sb += '</option>';
                }
                for (var _i = 0, _a = Object.keys(enumType).filter(function (v) { return !isNaN(parseInt(v, 10)); }); _i < _a.length; _i++) {
                    var x = _a[_i];
                    sb += '<option value="' + Q.attrEncode(x) + '"';
                    if (x == ctx.value)
                        sb += " selected";
                    var name = enumType[x];
                    sb += ">";
                    sb += Q.htmlEncode(Q.tryGetText("Enums." + this.enumKey + "." + name) || name);
                    sb += "</option>";
                }
                sb += "</select>";
                return sb;
            };
            __decorate([
                Serenity.Decorators.option()
            ], EnumSelectFormatter.prototype, "enumKey", void 0);
            __decorate([
                Serenity.Decorators.option()
            ], EnumSelectFormatter.prototype, "allowClear", void 0);
            __decorate([
                Serenity.Decorators.option()
            ], EnumSelectFormatter.prototype, "emptyItemText", void 0);
            EnumSelectFormatter = __decorate([
                Serenity.Decorators.registerFormatter()
            ], EnumSelectFormatter);
            return EnumSelectFormatter;
        }());
        Common.EnumSelectFormatter = EnumSelectFormatter;
    })(Common = EMR.Common || (EMR.Common = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Common;
    (function (Common) {
        var ExcelExportHelper;
        (function (ExcelExportHelper) {
            function createToolButton(options) {
                return {
                    hint: Q.coalesce(options.hint, 'Excel'),
                    title: Q.coalesce(options.title, ''),
                    cssClass: 'export-xlsx-button',
                    onClick: function () {
                        if (!options.onViewSubmit()) {
                            return;
                        }
                        var grid = options.grid;
                        var request = Q.deepClone(grid.getView().params);
                        request.Take = 0;
                        request.Skip = 0;
                        var sortBy = grid.getView().sortBy;
                        if (sortBy) {
                            request.Sort = sortBy;
                        }
                        request.IncludeColumns = [];
                        var columns = grid.getGrid().getColumns();
                        for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
                            var column = columns_1[_i];
                            request.IncludeColumns.push(column.id || column.field);
                        }
                        Q.postToService({ service: options.service, request: request, target: '_blank' });
                    },
                    separator: options.separator
                };
            }
            ExcelExportHelper.createToolButton = createToolButton;
        })(ExcelExportHelper = Common.ExcelExportHelper || (Common.ExcelExportHelper = {}));
    })(Common = EMR.Common || (EMR.Common = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Common;
    (function (Common) {
        var GridEditorBase = /** @class */ (function (_super) {
            __extends(GridEditorBase, _super);
            function GridEditorBase(container) {
                var _this = _super.call(this, container) || this;
                _this.nextId = 1;
                return _this;
            }
            GridEditorBase.prototype.getIdProperty = function () { return "__id"; };
            GridEditorBase.prototype.id = function (entity) {
                return entity[this.getIdProperty()];
            };
            GridEditorBase.prototype.getNextId = function () {
                return "`" + this.nextId++;
            };
            GridEditorBase.prototype.setNewId = function (entity) {
                entity[this.getIdProperty()] = this.getNextId();
            };
            GridEditorBase.prototype.save = function (opt, callback) {
                var _this = this;
                var request = opt.request;
                var row = Q.deepClone(request.Entity);
                var id = this.id(row);
                if (id == null) {
                    row[this.getIdProperty()] = this.getNextId();
                }
                if (!this.validateEntity(row, id)) {
                    return;
                }
                var items = this.view.getItems().slice();
                if (id == null) {
                    items.push(row);
                }
                else {
                    var index = Q.indexOf(items, function (x) { return _this.id(x) === id; });
                    items[index] = Q.deepClone({}, items[index], row);
                }
                this.setEntities(items);
                callback({});
            };
            GridEditorBase.prototype.deleteEntity = function (id) {
                this.view.deleteItem(id);
                return true;
            };
            GridEditorBase.prototype.validateEntity = function (row, id) {
                return true;
            };
            GridEditorBase.prototype.setEntities = function (items) {
                this.view.setItems(items, true);
            };
            GridEditorBase.prototype.getNewEntity = function () {
                return {};
            };
            GridEditorBase.prototype.getButtons = function () {
                var _this = this;
                return [{
                        title: this.getAddButtonCaption(),
                        cssClass: 'add-button',
                        onClick: function () {
                            _this.createEntityDialog(_this.getItemType(), function (dlg) {
                                var dialog = dlg;
                                dialog.onSave = function (opt, callback) { return _this.save(opt, callback); };
                                dialog.loadEntityAndOpenDialog(_this.getNewEntity());
                            });
                        }
                    }];
            };
            GridEditorBase.prototype.editItem = function (entityOrId) {
                var _this = this;
                var id = entityOrId;
                var item = this.view.getItemById(id);
                this.createEntityDialog(this.getItemType(), function (dlg) {
                    var dialog = dlg;
                    dialog.onDelete = function (opt, callback) {
                        if (!_this.deleteEntity(id)) {
                            return;
                        }
                        callback({});
                    };
                    dialog.onSave = function (opt, callback) { return _this.save(opt, callback); };
                    dialog.loadEntityAndOpenDialog(item);
                });
                ;
            };
            GridEditorBase.prototype.getEditValue = function (property, target) {
                target[property.name] = this.value;
            };
            GridEditorBase.prototype.setEditValue = function (source, property) {
                this.value = source[property.name];
            };
            Object.defineProperty(GridEditorBase.prototype, "value", {
                get: function () {
                    var p = this.getIdProperty();
                    return this.view.getItems().map(function (x) {
                        var y = Q.deepClone(x);
                        var id = y[p];
                        if (id && id.toString().charAt(0) == '`')
                            delete y[p];
                        return y;
                    });
                },
                set: function (value) {
                    var _this = this;
                    var p = this.getIdProperty();
                    this.view.setItems((value || []).map(function (x) {
                        var y = Q.deepClone(x);
                        if (y[p] == null)
                            y[p] = "`" + _this.getNextId();
                        return y;
                    }), true);
                },
                enumerable: true,
                configurable: true
            });
            GridEditorBase.prototype.getGridCanLoad = function () {
                return false;
            };
            GridEditorBase.prototype.usePager = function () {
                return false;
            };
            GridEditorBase.prototype.getInitialTitle = function () {
                return null;
            };
            GridEditorBase.prototype.createQuickSearchInput = function () {
            };
            GridEditorBase = __decorate([
                Serenity.Decorators.registerClass([Serenity.IGetEditValue, Serenity.ISetEditValue]),
                Serenity.Decorators.editor(),
                Serenity.Decorators.element("<div/>")
            ], GridEditorBase);
            return GridEditorBase;
        }(Serenity.EntityGrid));
        Common.GridEditorBase = GridEditorBase;
    })(Common = EMR.Common || (EMR.Common = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Common;
    (function (Common) {
        var GridEditorDialog = /** @class */ (function (_super) {
            __extends(GridEditorDialog, _super);
            function GridEditorDialog() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            GridEditorDialog.prototype.getIdProperty = function () { return "__id"; };
            GridEditorDialog.prototype.destroy = function () {
                this.onSave = null;
                this.onDelete = null;
                _super.prototype.destroy.call(this);
            };
            GridEditorDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                // apply changes button doesn't work properly with in-memory grids yet
                if (this.applyChangesButton) {
                    this.applyChangesButton.hide();
                }
            };
            GridEditorDialog.prototype.saveHandler = function (options, callback) {
                this.onSave && this.onSave(options, callback);
            };
            GridEditorDialog.prototype.deleteHandler = function (options, callback) {
                this.onDelete && this.onDelete(options, callback);
            };
            GridEditorDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], GridEditorDialog);
            return GridEditorDialog;
        }(Serenity.EntityDialog));
        Common.GridEditorDialog = GridEditorDialog;
    })(Common = EMR.Common || (EMR.Common = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    /**
     * This is an editor widget but it only displays a text, not edits it.
     *
     */
    var StaticTextBlock = /** @class */ (function (_super) {
        __extends(StaticTextBlock, _super);
        function StaticTextBlock(container, options) {
            var _this = _super.call(this, container, options) || this;
            // hide the caption label for this editor if in a form. ugly hack
            if (_this.options.hideLabel)
                _this.element.closest('.field').find('.caption').hide();
            _this.updateElementContent();
            return _this;
        }
        StaticTextBlock.prototype.updateElementContent = function () {
            var text = Q.coalesce(this.options.text, this.value);
            // if isLocalText is set, text is actually a local text key
            if (this.options.isLocalText)
                text = Q.text(text);
            // don't html encode if isHtml option is true
            if (this.options.isHtml)
                this.element.html(text);
            else
                this.element.text(text);
        };
        /**
         * By implementing ISetEditValue interface, we allow this editor to display its field value.
         * But only do this when our text content is not explicitly set in options
         */
        StaticTextBlock.prototype.setEditValue = function (source, property) {
            if (this.options.text == null) {
                this.value = Q.coalesce(this.options.text, source[property.name]);
                this.updateElementContent();
            }
        };
        StaticTextBlock = __decorate([
            Serenity.Decorators.element("<div/>"),
            Serenity.Decorators.registerEditor([Serenity.ISetEditValue])
        ], StaticTextBlock);
        return StaticTextBlock;
    }(Serenity.Widget));
    EMR.StaticTextBlock = StaticTextBlock;
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Common;
    (function (Common) {
        var LanguageSelection = /** @class */ (function (_super) {
            __extends(LanguageSelection, _super);
            function LanguageSelection(select, currentLanguage) {
                var _this = _super.call(this, select) || this;
                currentLanguage = Q.coalesce(currentLanguage, 'en');
                _this.change(function (e) {
                    $.cookie('LanguagePreference', select.val(), {
                        path: Q.Config.applicationPath,
                        expires: 365
                    });
                    window.location.reload(true);
                });
                Q.getLookupAsync('Administration.Language').then(function (x) {
                    if (!Q.any(x.items, function (z) { return z.LanguageId === currentLanguage; })) {
                        var idx = currentLanguage.lastIndexOf('-');
                        if (idx >= 0) {
                            currentLanguage = currentLanguage.substr(0, idx);
                            if (!Q.any(x.items, function (y) { return y.LanguageId === currentLanguage; })) {
                                currentLanguage = 'en';
                            }
                        }
                        else {
                            currentLanguage = 'en';
                        }
                    }
                    for (var _i = 0, _a = x.items; _i < _a.length; _i++) {
                        var l = _a[_i];
                        Q.addOption(select, l.LanguageId, l.LanguageName);
                    }
                    select.val(currentLanguage);
                });
                return _this;
            }
            return LanguageSelection;
        }(Serenity.Widget));
        Common.LanguageSelection = LanguageSelection;
    })(Common = EMR.Common || (EMR.Common = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Common;
    (function (Common) {
        var SidebarSearch = /** @class */ (function (_super) {
            __extends(SidebarSearch, _super);
            function SidebarSearch(input, menuUL) {
                var _this = _super.call(this, input) || this;
                new Serenity.QuickSearchInput(input, {
                    onSearch: function (field, text, success) {
                        _this.updateMatchFlags(text);
                        success(true);
                    }
                });
                _this.menuUL = menuUL;
                return _this;
            }
            SidebarSearch.prototype.updateMatchFlags = function (text) {
                var liList = this.menuUL.find('li').removeClass('non-match');
                text = Q.trimToNull(text);
                if (text == null) {
                    liList.show();
                    liList.removeClass('expanded');
                    return;
                }
                var parts = text.replace(',', ' ').split(' ').filter(function (x) { return !Q.isTrimmedEmpty(x); });
                for (var i = 0; i < parts.length; i++) {
                    parts[i] = Q.trimToNull(Select2.util.stripDiacritics(parts[i]).toUpperCase());
                }
                var items = liList;
                items.each(function (idx, e) {
                    var x = $(e);
                    var title = Select2.util.stripDiacritics(Q.coalesce(x.text(), '').toUpperCase());
                    for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {
                        var p = parts_1[_i];
                        if (p != null && !(title.indexOf(p) !== -1)) {
                            x.addClass('non-match');
                            break;
                        }
                    }
                });
                var matchingItems = items.not('.non-match');
                var visibles = matchingItems.parents('li').add(matchingItems);
                var nonVisibles = liList.not(visibles);
                nonVisibles.hide().addClass('non-match');
                visibles.show();
                liList.addClass('expanded');
            };
            return SidebarSearch;
        }(Serenity.Widget));
        Common.SidebarSearch = SidebarSearch;
    })(Common = EMR.Common || (EMR.Common = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Common;
    (function (Common) {
        var ThemeSelection = /** @class */ (function (_super) {
            __extends(ThemeSelection, _super);
            function ThemeSelection(select) {
                var _this = _super.call(this, select) || this;
                _this.change(function (e) {
                    var path = Q.Config.applicationPath;
                    if (path && path != '/' && Q.endsWith(path, '/'))
                        path = path.substr(0, path.length - 1);
                    $.cookie('ThemePreference', select.val(), {
                        path: path,
                        expires: 365
                    });
                    var theme = select.val() || '';
                    var darkSidebar = theme.indexOf('light') < 0;
                    $('body').removeClass('skin-' + _this.getCurrentTheme());
                    $('body').addClass('skin-' + theme)
                        .toggleClass('dark-sidebar', darkSidebar)
                        .toggleClass('light-sidebar', !darkSidebar);
                });
                Q.addOption(select, 'blue', Q.text('Site.Layout.ThemeBlue'));
                Q.addOption(select, 'blue-light', Q.text('Site.Layout.ThemeBlueLight'));
                Q.addOption(select, 'purple', Q.text('Site.Layout.ThemePurple'));
                Q.addOption(select, 'purple-light', Q.text('Site.Layout.ThemePurpleLight'));
                Q.addOption(select, 'red', Q.text('Site.Layout.ThemeRed'));
                Q.addOption(select, 'red-light', Q.text('Site.Layout.ThemeRedLight'));
                Q.addOption(select, 'green', Q.text('Site.Layout.ThemeGreen'));
                Q.addOption(select, 'green-light', Q.text('Site.Layout.ThemeGreenLight'));
                Q.addOption(select, 'yellow', Q.text('Site.Layout.ThemeYellow'));
                Q.addOption(select, 'yellow-light', Q.text('Site.Layout.ThemeYellowLight'));
                Q.addOption(select, 'black', Q.text('Site.Layout.ThemeBlack'));
                Q.addOption(select, 'black-light', Q.text('Site.Layout.ThemeBlackLight'));
                select.val(_this.getCurrentTheme());
                return _this;
            }
            ThemeSelection.prototype.getCurrentTheme = function () {
                var skinClass = Q.first(($('body').attr('class') || '').split(' '), function (x) { return Q.startsWith(x, 'skin-'); });
                if (skinClass) {
                    return skinClass.substr(5);
                }
                return 'blue';
            };
            return ThemeSelection;
        }(Serenity.Widget));
        Common.ThemeSelection = ThemeSelection;
    })(Common = EMR.Common || (EMR.Common = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Common;
    (function (Common) {
        var PdfExportHelper;
        (function (PdfExportHelper) {
            function toAutoTableColumns(srcColumns, columnStyles, columnTitles) {
                return srcColumns.map(function (src) {
                    var col = {
                        dataKey: src.id || src.field,
                        title: src.name || ''
                    };
                    if (columnTitles && columnTitles[col.dataKey] != null)
                        col.title = columnTitles[col.dataKey];
                    var style = {};
                    if ((src.cssClass || '').indexOf("align-right") >= 0)
                        style.halign = 'right';
                    else if ((src.cssClass || '').indexOf("align-center") >= 0)
                        style.halign = 'center';
                    columnStyles[col.dataKey] = style;
                    return col;
                });
            }
            function toAutoTableData(entities, keys, srcColumns) {
                var el = document.createElement('span');
                var row = 0;
                return entities.map(function (item) {
                    var dst = {};
                    for (var cell = 0; cell < srcColumns.length; cell++) {
                        var src = srcColumns[cell];
                        var fld = src.field || '';
                        var key = keys[cell];
                        var txt = void 0;
                        var html = void 0;
                        if (src.formatter) {
                            html = src.formatter(row, cell, item[fld], src, item);
                        }
                        else if (src.format) {
                            html = src.format({ row: row, cell: cell, item: item, value: item[fld] });
                        }
                        else {
                            dst[key] = item[fld];
                            continue;
                        }
                        if (!html || (html.indexOf('<') < 0 && html.indexOf('&') < 0))
                            dst[key] = html;
                        else {
                            el.innerHTML = html;
                            if (el.children.length == 1 &&
                                $(el.children[0]).is(":input")) {
                                dst[key] = $(el.children[0]).val();
                            }
                            else if (el.children.length == 1 &&
                                $(el.children).is('.check-box')) {
                                dst[key] = $(el.children).hasClass("checked") ? "X" : "";
                            }
                            else
                                dst[key] = el.textContent || '';
                        }
                    }
                    row++;
                    return dst;
                });
            }
            function exportToPdf(options) {
                var g = options.grid;
                if (!options.onViewSubmit())
                    return;
                includeAutoTable();
                var request = Q.deepClone(g.view.params);
                request.Take = 0;
                request.Skip = 0;
                var sortBy = g.view.sortBy;
                if (sortBy != null)
                    request.Sort = sortBy;
                var gridColumns = g.slickGrid.getColumns();
                gridColumns = gridColumns.filter(function (x) { return x.id !== "__select__"; });
                request.IncludeColumns = [];
                for (var _i = 0, gridColumns_1 = gridColumns; _i < gridColumns_1.length; _i++) {
                    var column = gridColumns_1[_i];
                    request.IncludeColumns.push(column.id || column.field);
                }
                Q.serviceCall({
                    url: g.view.url,
                    request: request,
                    onSuccess: function (response) {
                        var doc = new jsPDF('l', 'pt');
                        var srcColumns = gridColumns;
                        var columnStyles = {};
                        var columns = toAutoTableColumns(srcColumns, columnStyles, options.columnTitles);
                        var keys = columns.map(function (x) { return x.dataKey; });
                        var entities = response.Entities || [];
                        var data = toAutoTableData(entities, keys, srcColumns);
                        doc.setFontSize(options.titleFontSize || 10);
                        doc.setFontStyle('bold');
                        var reportTitle = options.reportTitle || g.getTitle() || "Report";
                        doc.autoTableText(reportTitle, doc.internal.pageSize.width / 2, options.titleTop || 25, { halign: 'center' });
                        var totalPagesExp = "{{T}}";
                        var pageNumbers = options.pageNumbers == null || options.pageNumbers;
                        var autoOptions = $.extend({
                            margin: { top: 25, left: 25, right: 25, bottom: pageNumbers ? 25 : 30 },
                            startY: 60,
                            styles: {
                                fontSize: 8,
                                overflow: 'linebreak',
                                cellPadding: 2,
                                valign: 'middle'
                            },
                            columnStyles: columnStyles
                        }, options.tableOptions);
                        if (pageNumbers) {
                            var footer = function (data) {
                                var str = data.pageCount;
                                // Total page number plugin only available in jspdf v1.0+
                                if (typeof doc.putTotalPages === 'function') {
                                    str = str + " / " + totalPagesExp;
                                }
                                doc.autoTableText(str, doc.internal.pageSize.width / 2, doc.internal.pageSize.height - autoOptions.margin.bottom, {
                                    halign: 'center'
                                });
                            };
                            autoOptions.afterPageContent = footer;
                        }
                        // Print header of page
                        if (options.printDateTimeHeader == null || options.printDateTimeHeader) {
                            var beforePage = function (data) {
                                doc.setFontStyle('normal');
                                doc.setFontSize(8);
                                // Date and time of the report
                                doc.autoTableText(Q.formatDate(new Date(), "dd-MM-yyyy HH:mm"), doc.internal.pageSize.width - autoOptions.margin.right, 13, {
                                    halign: 'right'
                                });
                            };
                            autoOptions.beforePageContent = beforePage;
                        }
                        doc.autoTable(columns, data, autoOptions);
                        if (typeof doc.putTotalPages === 'function') {
                            doc.putTotalPages(totalPagesExp);
                        }
                        if (!options.output || options.output == "file") {
                            var fileName = options.fileName || options.reportTitle || "{0}_{1}.pdf";
                            fileName = Q.format(fileName, g.getTitle() || "report", Q.formatDate(new Date(), "yyyyMMdd_HHmm"));
                            doc.save(fileName);
                            return;
                        }
                        if (options.autoPrint)
                            doc.autoPrint();
                        var output = options.output;
                        if (output == 'newwindow' || '_blank')
                            output = 'dataurlnewwindow';
                        else if (output == 'window')
                            output = 'datauri';
                        if (output == 'datauri')
                            doc.output(output);
                        else {
                            var tmpOut = doc.output('datauristring');
                            if (output == 'dataurlnewwindow') {
                                var fileTmpName = options.reportTitle || g.getTitle();
                                var url_with_name = tmpOut.replace("data:application/pdf;", "data:application/pdf;name=" + fileTmpName + ".pdf;");
                                var html = '<html>' +
                                    '<style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style>' +
                                    '<body>' +
                                    '<p></p>' +
                                    '<iframe type="application/pdf" src="' + url_with_name + '"></iframe>' +
                                    '</body></html>';
                                var a = window.open("about:blank", "_blank");
                                a.document.write(html);
                                a.document.close();
                            }
                        }
                    }
                });
            }
            PdfExportHelper.exportToPdf = exportToPdf;
            function createToolButton(options) {
                return {
                    title: options.title || '',
                    hint: options.hint || 'PDF',
                    cssClass: 'export-pdf-button',
                    onClick: function () { return exportToPdf(options); },
                    separator: options.separator
                };
            }
            PdfExportHelper.createToolButton = createToolButton;
            function includeJsPDF() {
                if (typeof jsPDF !== "undefined")
                    return;
                var script = $("jsPDFScript");
                if (script.length > 0)
                    return;
                $("<script/>")
                    .attr("type", "text/javascript")
                    .attr("id", "jsPDFScript")
                    .attr("src", Q.resolveUrl("~/Scripts/jspdf.min.js"))
                    .appendTo(document.head);
            }
            function includeAutoTable() {
                includeJsPDF();
                if (typeof jsPDF === "undefined" ||
                    typeof jsPDF.API == "undefined" ||
                    typeof jsPDF.API.autoTable !== "undefined")
                    return;
                var script = $("jsPDFAutoTableScript");
                if (script.length > 0)
                    return;
                $("<script/>")
                    .attr("type", "text/javascript")
                    .attr("id", "jsPDFAutoTableScript")
                    .attr("src", Q.resolveUrl("~/Scripts/jspdf.plugin.autotable.min.js"))
                    .appendTo(document.head);
            }
        })(PdfExportHelper = Common.PdfExportHelper || (Common.PdfExportHelper = {}));
    })(Common = EMR.Common || (EMR.Common = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Common;
    (function (Common) {
        var ReportDialog = /** @class */ (function (_super) {
            __extends(ReportDialog, _super);
            function ReportDialog(options) {
                var _this = _super.call(this, options) || this;
                _this.updateInterface();
                _this.loadReport(_this.options.reportKey);
                return _this;
            }
            ReportDialog.prototype.getDialogButtons = function () {
                return null;
            };
            ReportDialog.prototype.createPropertyGrid = function () {
                this.propertyGrid && this.byId('PropertyGrid').html('').attr('class', '');
                this.propertyGrid = new Serenity.PropertyGrid(this.byId('PropertyGrid'), {
                    idPrefix: this.idPrefix,
                    useCategories: true,
                    items: this.report.Properties
                }).init(null);
            };
            ReportDialog.prototype.loadReport = function (reportKey) {
                var _this = this;
                Q.serviceCall({
                    url: Q.resolveUrl('~/Report/Retrieve'),
                    request: {
                        ReportKey: reportKey
                    },
                    onSuccess: function (response) {
                        _this.report = response;
                        _this.element.dialog().dialog('option', 'title', _this.report.Title);
                        _this.createPropertyGrid();
                        _this.propertyGrid.load(_this.report.InitialSettings || {});
                        _this.updateInterface();
                        _this.dialogOpen();
                    }
                });
            };
            ReportDialog.prototype.updateInterface = function () {
                this.toolbar.findButton('print-preview-button')
                    .toggle(this.report && !this.report.IsDataOnlyReport);
                this.toolbar.findButton('export-pdf-button')
                    .toggle(this.report && !this.report.IsDataOnlyReport);
                this.toolbar.findButton('export-xlsx-button')
                    .toggle(this.report && this.report.IsDataOnlyReport);
            };
            ReportDialog.prototype.executeReport = function (target, ext, download) {
                if (!this.validateForm()) {
                    return;
                }
                var opt = {};
                this.propertyGrid.save(opt);
                Common.ReportHelper.execute({
                    download: download,
                    reportKey: this.report.ReportKey,
                    extension: ext,
                    target: target,
                    params: opt
                });
            };
            ReportDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                return [
                    {
                        title: 'Preview',
                        cssClass: 'print-preview-button',
                        onClick: function () { return _this.executeReport('_blank', null, false); }
                    },
                    {
                        title: 'PDF',
                        cssClass: 'export-pdf-button',
                        onClick: function () { return _this.executeReport('_blank', 'pdf', true); }
                    },
                    {
                        title: 'Excel',
                        cssClass: 'export-xlsx-button',
                        onClick: function () { return _this.executeReport('_blank', 'xlsx', true); }
                    }
                ];
            };
            return ReportDialog;
        }(Serenity.TemplatedDialog));
        Common.ReportDialog = ReportDialog;
    })(Common = EMR.Common || (EMR.Common = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Common;
    (function (Common) {
        var ReportHelper;
        (function (ReportHelper) {
            function createToolButton(options) {
                return {
                    title: Q.coalesce(options.title, 'Report'),
                    cssClass: Q.coalesce(options.cssClass, 'print-button'),
                    icon: options.icon,
                    onClick: function () {
                        ReportHelper.execute(options);
                    }
                };
            }
            ReportHelper.createToolButton = createToolButton;
            function execute(options) {
                var opt = options.getParams ? options.getParams() : options.params;
                Q.postToUrl({
                    url: '~/Report/' + (options.download ? 'Download' : 'Render'),
                    params: {
                        key: options.reportKey,
                        ext: Q.coalesce(options.extension, 'pdf'),
                        opt: opt ? $.toJSON(opt) : ''
                    },
                    target: Q.coalesce(options.target, '_blank')
                });
            }
            ReportHelper.execute = execute;
        })(ReportHelper = Common.ReportHelper || (Common.ReportHelper = {}));
    })(Common = EMR.Common || (EMR.Common = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Common;
    (function (Common) {
        var ReportPage = /** @class */ (function (_super) {
            __extends(ReportPage, _super);
            function ReportPage(element) {
                var _this = _super.call(this, element) || this;
                $('.report-link', element).click(function (e) { return _this.reportLinkClick(e); });
                $('div.line', element).click(function (e) { return _this.categoryClick(e); });
                new Serenity.QuickSearchInput($('.s-QuickSearchBar input', element), {
                    onSearch: function (field, text, done) {
                        _this.updateMatchFlags(text);
                        done(true);
                    }
                });
                return _this;
            }
            ReportPage.prototype.updateMatchFlags = function (text) {
                var liList = $('.report-list', this.element).find('li').removeClass('non-match');
                text = Q.trimToNull(text);
                if (!text) {
                    liList.children('ul').hide();
                    liList.show().removeClass('expanded');
                    return;
                }
                text = Select2.util.stripDiacritics(text).toUpperCase();
                var reportItems = liList.filter('.report-item');
                reportItems.each(function (ix, e) {
                    var x = $(e);
                    var title = Select2.util.stripDiacritics(Q.coalesce(x.text(), '').toUpperCase());
                    if (title.indexOf(text) < 0) {
                        x.addClass('non-match');
                    }
                });
                var matchingItems = reportItems.not('.non-match');
                var visibles = matchingItems.parents('li').add(matchingItems);
                var nonVisibles = liList.not(visibles);
                nonVisibles.hide().addClass('non-match');
                visibles.show();
                if (visibles.length <= 100) {
                    liList.children('ul').show();
                    liList.addClass('expanded');
                }
            };
            ReportPage.prototype.categoryClick = function (e) {
                var li = $(e.target).closest('li');
                if (li.hasClass('expanded')) {
                    li.find('ul').hide('fast');
                    li.removeClass('expanded');
                    li.find('li').removeClass('expanded');
                }
                else {
                    li.addClass('expanded');
                    li.children('ul').show('fast');
                    if (li.children('ul').children('li').length === 1 && !li.children('ul').children('li').hasClass('expanded')) {
                        li.children('ul').children('li').children('.line').click();
                    }
                }
            };
            ReportPage.prototype.reportLinkClick = function (e) {
                e.preventDefault();
                new Common.ReportDialog({
                    reportKey: $(e.target).data('key')
                }).dialogOpen();
            };
            return ReportPage;
        }(Serenity.Widget));
        Common.ReportPage = ReportPage;
    })(Common = EMR.Common || (EMR.Common = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Common;
    (function (Common) {
        var UserPreferenceStorage = /** @class */ (function () {
            function UserPreferenceStorage() {
            }
            UserPreferenceStorage.prototype.getItem = function (key) {
                var value;
                Common.UserPreferenceService.Retrieve({
                    PreferenceType: "UserPreferenceStorage",
                    Name: key
                }, function (response) { return value = response.Value; }, {
                    async: false
                });
                return value;
            };
            UserPreferenceStorage.prototype.setItem = function (key, data) {
                Common.UserPreferenceService.Update({
                    PreferenceType: "UserPreferenceStorage",
                    Name: key,
                    Value: data
                });
            };
            return UserPreferenceStorage;
        }());
        Common.UserPreferenceStorage = UserPreferenceStorage;
    })(Common = EMR.Common || (EMR.Common = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var BloodStatusDialog = /** @class */ (function (_super) {
            __extends(BloodStatusDialog, _super);
            function BloodStatusDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.BloodStatusForm(_this.idPrefix);
                return _this;
            }
            BloodStatusDialog.prototype.getFormKey = function () { return Configs.BloodStatusForm.formKey; };
            BloodStatusDialog.prototype.getIdProperty = function () { return Configs.BloodStatusRow.idProperty; };
            BloodStatusDialog.prototype.getLocalTextPrefix = function () { return Configs.BloodStatusRow.localTextPrefix; };
            BloodStatusDialog.prototype.getNameProperty = function () { return Configs.BloodStatusRow.nameProperty; };
            BloodStatusDialog.prototype.getService = function () { return Configs.BloodStatusService.baseUrl; };
            BloodStatusDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], BloodStatusDialog);
            return BloodStatusDialog;
        }(Serenity.EntityDialog));
        Configs.BloodStatusDialog = BloodStatusDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var BloodStatusGrid = /** @class */ (function (_super) {
            __extends(BloodStatusGrid, _super);
            function BloodStatusGrid(container) {
                return _super.call(this, container) || this;
            }
            BloodStatusGrid.prototype.getColumnsKey = function () { return 'Configs.BloodStatus'; };
            BloodStatusGrid.prototype.getDialogType = function () { return Configs.BloodStatusDialog; };
            BloodStatusGrid.prototype.getIdProperty = function () { return Configs.BloodStatusRow.idProperty; };
            BloodStatusGrid.prototype.getLocalTextPrefix = function () { return Configs.BloodStatusRow.localTextPrefix; };
            BloodStatusGrid.prototype.getService = function () { return Configs.BloodStatusService.baseUrl; };
            BloodStatusGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            BloodStatusGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], BloodStatusGrid);
            return BloodStatusGrid;
        }(Serenity.EntityGrid));
        Configs.BloodStatusGrid = BloodStatusGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var CaretypesDialog = /** @class */ (function (_super) {
            __extends(CaretypesDialog, _super);
            function CaretypesDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.CaretypesForm(_this.idPrefix);
                return _this;
            }
            CaretypesDialog.prototype.getFormKey = function () { return Configs.CaretypesForm.formKey; };
            CaretypesDialog.prototype.getIdProperty = function () { return Configs.CaretypesRow.idProperty; };
            CaretypesDialog.prototype.getLocalTextPrefix = function () { return Configs.CaretypesRow.localTextPrefix; };
            CaretypesDialog.prototype.getNameProperty = function () { return Configs.CaretypesRow.nameProperty; };
            CaretypesDialog.prototype.getService = function () { return Configs.CaretypesService.baseUrl; };
            CaretypesDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], CaretypesDialog);
            return CaretypesDialog;
        }(Serenity.EntityDialog));
        Configs.CaretypesDialog = CaretypesDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var CaretypesGrid = /** @class */ (function (_super) {
            __extends(CaretypesGrid, _super);
            function CaretypesGrid(container) {
                return _super.call(this, container) || this;
            }
            CaretypesGrid.prototype.getColumnsKey = function () { return 'Configs.Caretypes'; };
            CaretypesGrid.prototype.getDialogType = function () { return Configs.CaretypesDialog; };
            CaretypesGrid.prototype.getIdProperty = function () { return Configs.CaretypesRow.idProperty; };
            CaretypesGrid.prototype.getLocalTextPrefix = function () { return Configs.CaretypesRow.localTextPrefix; };
            CaretypesGrid.prototype.getService = function () { return Configs.CaretypesService.baseUrl; };
            CaretypesGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            CaretypesGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CaretypesGrid);
            return CaretypesGrid;
        }(Serenity.EntityGrid));
        Configs.CaretypesGrid = CaretypesGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var CountriesDialog = /** @class */ (function (_super) {
            __extends(CountriesDialog, _super);
            function CountriesDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.CountriesForm(_this.idPrefix);
                return _this;
            }
            CountriesDialog.prototype.getFormKey = function () { return Configs.CountriesForm.formKey; };
            CountriesDialog.prototype.getIdProperty = function () { return Configs.CountriesRow.idProperty; };
            CountriesDialog.prototype.getLocalTextPrefix = function () { return Configs.CountriesRow.localTextPrefix; };
            CountriesDialog.prototype.getNameProperty = function () { return Configs.CountriesRow.nameProperty; };
            CountriesDialog.prototype.getService = function () { return Configs.CountriesService.baseUrl; };
            CountriesDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], CountriesDialog);
            return CountriesDialog;
        }(Serenity.EntityDialog));
        Configs.CountriesDialog = CountriesDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var CountriesGrid = /** @class */ (function (_super) {
            __extends(CountriesGrid, _super);
            function CountriesGrid(container) {
                return _super.call(this, container) || this;
            }
            CountriesGrid.prototype.getColumnsKey = function () { return 'Configs.Countries'; };
            CountriesGrid.prototype.getDialogType = function () { return Configs.CountriesDialog; };
            CountriesGrid.prototype.getIdProperty = function () { return Configs.CountriesRow.idProperty; };
            CountriesGrid.prototype.getLocalTextPrefix = function () { return Configs.CountriesRow.localTextPrefix; };
            CountriesGrid.prototype.getService = function () { return Configs.CountriesService.baseUrl; };
            CountriesGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            CountriesGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CountriesGrid);
            return CountriesGrid;
        }(Serenity.EntityGrid));
        Configs.CountriesGrid = CountriesGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var CyclesDialog = /** @class */ (function (_super) {
            __extends(CyclesDialog, _super);
            function CyclesDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.CyclesForm(_this.idPrefix);
                return _this;
            }
            CyclesDialog.prototype.getFormKey = function () { return Configs.CyclesForm.formKey; };
            CyclesDialog.prototype.getIdProperty = function () { return Configs.CyclesRow.idProperty; };
            CyclesDialog.prototype.getLocalTextPrefix = function () { return Configs.CyclesRow.localTextPrefix; };
            CyclesDialog.prototype.getNameProperty = function () { return Configs.CyclesRow.nameProperty; };
            CyclesDialog.prototype.getService = function () { return Configs.CyclesService.baseUrl; };
            CyclesDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], CyclesDialog);
            return CyclesDialog;
        }(Serenity.EntityDialog));
        Configs.CyclesDialog = CyclesDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var CyclesGrid = /** @class */ (function (_super) {
            __extends(CyclesGrid, _super);
            function CyclesGrid(container) {
                return _super.call(this, container) || this;
            }
            CyclesGrid.prototype.getColumnsKey = function () { return 'Configs.Cycles'; };
            CyclesGrid.prototype.getDialogType = function () { return Configs.CyclesDialog; };
            CyclesGrid.prototype.getIdProperty = function () { return Configs.CyclesRow.idProperty; };
            CyclesGrid.prototype.getLocalTextPrefix = function () { return Configs.CyclesRow.localTextPrefix; };
            CyclesGrid.prototype.getService = function () { return Configs.CyclesService.baseUrl; };
            CyclesGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            CyclesGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CyclesGrid);
            return CyclesGrid;
        }(Serenity.EntityGrid));
        Configs.CyclesGrid = CyclesGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var EthnicityDialog = /** @class */ (function (_super) {
            __extends(EthnicityDialog, _super);
            function EthnicityDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.EthnicityForm(_this.idPrefix);
                return _this;
            }
            EthnicityDialog.prototype.getFormKey = function () { return Configs.EthnicityForm.formKey; };
            EthnicityDialog.prototype.getIdProperty = function () { return Configs.EthnicityRow.idProperty; };
            EthnicityDialog.prototype.getLocalTextPrefix = function () { return Configs.EthnicityRow.localTextPrefix; };
            EthnicityDialog.prototype.getNameProperty = function () { return Configs.EthnicityRow.nameProperty; };
            EthnicityDialog.prototype.getService = function () { return Configs.EthnicityService.baseUrl; };
            EthnicityDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], EthnicityDialog);
            return EthnicityDialog;
        }(Serenity.EntityDialog));
        Configs.EthnicityDialog = EthnicityDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var EthnicityGrid = /** @class */ (function (_super) {
            __extends(EthnicityGrid, _super);
            function EthnicityGrid(container) {
                return _super.call(this, container) || this;
            }
            EthnicityGrid.prototype.getColumnsKey = function () { return 'Configs.Ethnicity'; };
            EthnicityGrid.prototype.getDialogType = function () { return Configs.EthnicityDialog; };
            EthnicityGrid.prototype.getIdProperty = function () { return Configs.EthnicityRow.idProperty; };
            EthnicityGrid.prototype.getLocalTextPrefix = function () { return Configs.EthnicityRow.localTextPrefix; };
            EthnicityGrid.prototype.getService = function () { return Configs.EthnicityService.baseUrl; };
            EthnicityGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            EthnicityGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], EthnicityGrid);
            return EthnicityGrid;
        }(Serenity.EntityGrid));
        Configs.EthnicityGrid = EthnicityGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpFormDialog = /** @class */ (function (_super) {
            __extends(LkpFormDialog, _super);
            function LkpFormDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.LkpFormForm(_this.idPrefix);
                return _this;
            }
            LkpFormDialog.prototype.getFormKey = function () { return Configs.LkpFormForm.formKey; };
            LkpFormDialog.prototype.getIdProperty = function () { return Configs.LkpFormRow.idProperty; };
            LkpFormDialog.prototype.getLocalTextPrefix = function () { return Configs.LkpFormRow.localTextPrefix; };
            LkpFormDialog.prototype.getNameProperty = function () { return Configs.LkpFormRow.nameProperty; };
            LkpFormDialog.prototype.getService = function () { return Configs.LkpFormService.baseUrl; };
            LkpFormDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], LkpFormDialog);
            return LkpFormDialog;
        }(Serenity.EntityDialog));
        Configs.LkpFormDialog = LkpFormDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpFormGrid = /** @class */ (function (_super) {
            __extends(LkpFormGrid, _super);
            function LkpFormGrid(container) {
                return _super.call(this, container) || this;
            }
            LkpFormGrid.prototype.getColumnsKey = function () { return 'Configs.LkpForm'; };
            LkpFormGrid.prototype.getDialogType = function () { return Configs.LkpFormDialog; };
            LkpFormGrid.prototype.getIdProperty = function () { return Configs.LkpFormRow.idProperty; };
            LkpFormGrid.prototype.getLocalTextPrefix = function () { return Configs.LkpFormRow.localTextPrefix; };
            LkpFormGrid.prototype.getService = function () { return Configs.LkpFormService.baseUrl; };
            LkpFormGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            LkpFormGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], LkpFormGrid);
            return LkpFormGrid;
        }(Serenity.EntityGrid));
        Configs.LkpFormGrid = LkpFormGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpHistoryDialog = /** @class */ (function (_super) {
            __extends(LkpHistoryDialog, _super);
            function LkpHistoryDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.LkpHistoryForm(_this.idPrefix);
                return _this;
            }
            LkpHistoryDialog.prototype.getFormKey = function () { return Configs.LkpHistoryForm.formKey; };
            LkpHistoryDialog.prototype.getIdProperty = function () { return Configs.LkpHistoryRow.idProperty; };
            LkpHistoryDialog.prototype.getLocalTextPrefix = function () { return Configs.LkpHistoryRow.localTextPrefix; };
            LkpHistoryDialog.prototype.getNameProperty = function () { return Configs.LkpHistoryRow.nameProperty; };
            LkpHistoryDialog.prototype.getService = function () { return Configs.LkpHistoryService.baseUrl; };
            LkpHistoryDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], LkpHistoryDialog);
            return LkpHistoryDialog;
        }(Serenity.EntityDialog));
        Configs.LkpHistoryDialog = LkpHistoryDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpHistoryGrid = /** @class */ (function (_super) {
            __extends(LkpHistoryGrid, _super);
            function LkpHistoryGrid(container) {
                return _super.call(this, container) || this;
            }
            LkpHistoryGrid.prototype.getColumnsKey = function () { return 'Configs.LkpHistory'; };
            LkpHistoryGrid.prototype.getDialogType = function () { return Configs.LkpHistoryDialog; };
            LkpHistoryGrid.prototype.getIdProperty = function () { return Configs.LkpHistoryRow.idProperty; };
            LkpHistoryGrid.prototype.getLocalTextPrefix = function () { return Configs.LkpHistoryRow.localTextPrefix; };
            LkpHistoryGrid.prototype.getService = function () { return Configs.LkpHistoryService.baseUrl; };
            LkpHistoryGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            LkpHistoryGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], LkpHistoryGrid);
            return LkpHistoryGrid;
        }(Serenity.EntityGrid));
        Configs.LkpHistoryGrid = LkpHistoryGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpImagingDialog = /** @class */ (function (_super) {
            __extends(LkpImagingDialog, _super);
            function LkpImagingDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.LkpImagingForm(_this.idPrefix);
                return _this;
            }
            LkpImagingDialog.prototype.getFormKey = function () { return Configs.LkpImagingForm.formKey; };
            LkpImagingDialog.prototype.getIdProperty = function () { return Configs.LkpImagingRow.idProperty; };
            LkpImagingDialog.prototype.getLocalTextPrefix = function () { return Configs.LkpImagingRow.localTextPrefix; };
            LkpImagingDialog.prototype.getNameProperty = function () { return Configs.LkpImagingRow.nameProperty; };
            LkpImagingDialog.prototype.getService = function () { return Configs.LkpImagingService.baseUrl; };
            LkpImagingDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], LkpImagingDialog);
            return LkpImagingDialog;
        }(Serenity.EntityDialog));
        Configs.LkpImagingDialog = LkpImagingDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpImagingGrid = /** @class */ (function (_super) {
            __extends(LkpImagingGrid, _super);
            function LkpImagingGrid(container) {
                return _super.call(this, container) || this;
            }
            LkpImagingGrid.prototype.getColumnsKey = function () { return 'Configs.LkpImaging'; };
            LkpImagingGrid.prototype.getDialogType = function () { return Configs.LkpImagingDialog; };
            LkpImagingGrid.prototype.getIdProperty = function () { return Configs.LkpImagingRow.idProperty; };
            LkpImagingGrid.prototype.getLocalTextPrefix = function () { return Configs.LkpImagingRow.localTextPrefix; };
            LkpImagingGrid.prototype.getService = function () { return Configs.LkpImagingService.baseUrl; };
            LkpImagingGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            LkpImagingGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], LkpImagingGrid);
            return LkpImagingGrid;
        }(Serenity.EntityGrid));
        Configs.LkpImagingGrid = LkpImagingGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpLabTestDialog = /** @class */ (function (_super) {
            __extends(LkpLabTestDialog, _super);
            function LkpLabTestDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.LkpLabTestForm(_this.idPrefix);
                return _this;
            }
            LkpLabTestDialog.prototype.getFormKey = function () { return Configs.LkpLabTestForm.formKey; };
            LkpLabTestDialog.prototype.getIdProperty = function () { return Configs.LkpLabTestRow.idProperty; };
            LkpLabTestDialog.prototype.getLocalTextPrefix = function () { return Configs.LkpLabTestRow.localTextPrefix; };
            LkpLabTestDialog.prototype.getNameProperty = function () { return Configs.LkpLabTestRow.nameProperty; };
            LkpLabTestDialog.prototype.getService = function () { return Configs.LkpLabTestService.baseUrl; };
            LkpLabTestDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], LkpLabTestDialog);
            return LkpLabTestDialog;
        }(Serenity.EntityDialog));
        Configs.LkpLabTestDialog = LkpLabTestDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpLabTestGrid = /** @class */ (function (_super) {
            __extends(LkpLabTestGrid, _super);
            function LkpLabTestGrid(container) {
                return _super.call(this, container) || this;
            }
            LkpLabTestGrid.prototype.getColumnsKey = function () { return 'Configs.LkpLabTest'; };
            LkpLabTestGrid.prototype.getDialogType = function () { return Configs.LkpLabTestDialog; };
            LkpLabTestGrid.prototype.getIdProperty = function () { return Configs.LkpLabTestRow.idProperty; };
            LkpLabTestGrid.prototype.getLocalTextPrefix = function () { return Configs.LkpLabTestRow.localTextPrefix; };
            LkpLabTestGrid.prototype.getService = function () { return Configs.LkpLabTestService.baseUrl; };
            LkpLabTestGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            LkpLabTestGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], LkpLabTestGrid);
            return LkpLabTestGrid;
        }(Serenity.EntityGrid));
        Configs.LkpLabTestGrid = LkpLabTestGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpLosstypesDialog = /** @class */ (function (_super) {
            __extends(LkpLosstypesDialog, _super);
            function LkpLosstypesDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.LkpLosstypesForm(_this.idPrefix);
                return _this;
            }
            LkpLosstypesDialog.prototype.getFormKey = function () { return Configs.LkpLosstypesForm.formKey; };
            LkpLosstypesDialog.prototype.getIdProperty = function () { return Configs.LkpLosstypesRow.idProperty; };
            LkpLosstypesDialog.prototype.getLocalTextPrefix = function () { return Configs.LkpLosstypesRow.localTextPrefix; };
            LkpLosstypesDialog.prototype.getNameProperty = function () { return Configs.LkpLosstypesRow.nameProperty; };
            LkpLosstypesDialog.prototype.getService = function () { return Configs.LkpLosstypesService.baseUrl; };
            LkpLosstypesDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], LkpLosstypesDialog);
            return LkpLosstypesDialog;
        }(Serenity.EntityDialog));
        Configs.LkpLosstypesDialog = LkpLosstypesDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpLosstypesGrid = /** @class */ (function (_super) {
            __extends(LkpLosstypesGrid, _super);
            function LkpLosstypesGrid(container) {
                return _super.call(this, container) || this;
            }
            LkpLosstypesGrid.prototype.getColumnsKey = function () { return 'Configs.LkpLosstypes'; };
            LkpLosstypesGrid.prototype.getDialogType = function () { return Configs.LkpLosstypesDialog; };
            LkpLosstypesGrid.prototype.getIdProperty = function () { return Configs.LkpLosstypesRow.idProperty; };
            LkpLosstypesGrid.prototype.getLocalTextPrefix = function () { return Configs.LkpLosstypesRow.localTextPrefix; };
            LkpLosstypesGrid.prototype.getService = function () { return Configs.LkpLosstypesService.baseUrl; };
            LkpLosstypesGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], LkpLosstypesGrid);
            return LkpLosstypesGrid;
        }(Serenity.EntityGrid));
        Configs.LkpLosstypesGrid = LkpLosstypesGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpManufacturerDialog = /** @class */ (function (_super) {
            __extends(LkpManufacturerDialog, _super);
            function LkpManufacturerDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.LkpManufacturerForm(_this.idPrefix);
                return _this;
            }
            LkpManufacturerDialog.prototype.getFormKey = function () { return Configs.LkpManufacturerForm.formKey; };
            LkpManufacturerDialog.prototype.getIdProperty = function () { return Configs.LkpManufacturerRow.idProperty; };
            LkpManufacturerDialog.prototype.getLocalTextPrefix = function () { return Configs.LkpManufacturerRow.localTextPrefix; };
            LkpManufacturerDialog.prototype.getNameProperty = function () { return Configs.LkpManufacturerRow.nameProperty; };
            LkpManufacturerDialog.prototype.getService = function () { return Configs.LkpManufacturerService.baseUrl; };
            LkpManufacturerDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], LkpManufacturerDialog);
            return LkpManufacturerDialog;
        }(Serenity.EntityDialog));
        Configs.LkpManufacturerDialog = LkpManufacturerDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpManufacturerGrid = /** @class */ (function (_super) {
            __extends(LkpManufacturerGrid, _super);
            function LkpManufacturerGrid(container) {
                return _super.call(this, container) || this;
            }
            LkpManufacturerGrid.prototype.getColumnsKey = function () { return 'Configs.LkpManufacturer'; };
            LkpManufacturerGrid.prototype.getDialogType = function () { return Configs.LkpManufacturerDialog; };
            LkpManufacturerGrid.prototype.getIdProperty = function () { return Configs.LkpManufacturerRow.idProperty; };
            LkpManufacturerGrid.prototype.getLocalTextPrefix = function () { return Configs.LkpManufacturerRow.localTextPrefix; };
            LkpManufacturerGrid.prototype.getService = function () { return Configs.LkpManufacturerService.baseUrl; };
            LkpManufacturerGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            LkpManufacturerGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], LkpManufacturerGrid);
            return LkpManufacturerGrid;
        }(Serenity.EntityGrid));
        Configs.LkpManufacturerGrid = LkpManufacturerGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpPatientTypeDialog = /** @class */ (function (_super) {
            __extends(LkpPatientTypeDialog, _super);
            function LkpPatientTypeDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.LkpPatientTypeForm(_this.idPrefix);
                return _this;
            }
            LkpPatientTypeDialog.prototype.getFormKey = function () { return Configs.LkpPatientTypeForm.formKey; };
            LkpPatientTypeDialog.prototype.getIdProperty = function () { return Configs.LkpPatientTypeRow.idProperty; };
            LkpPatientTypeDialog.prototype.getLocalTextPrefix = function () { return Configs.LkpPatientTypeRow.localTextPrefix; };
            LkpPatientTypeDialog.prototype.getNameProperty = function () { return Configs.LkpPatientTypeRow.nameProperty; };
            LkpPatientTypeDialog.prototype.getService = function () { return Configs.LkpPatientTypeService.baseUrl; };
            LkpPatientTypeDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], LkpPatientTypeDialog);
            return LkpPatientTypeDialog;
        }(Serenity.EntityDialog));
        Configs.LkpPatientTypeDialog = LkpPatientTypeDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpPatientTypeGrid = /** @class */ (function (_super) {
            __extends(LkpPatientTypeGrid, _super);
            function LkpPatientTypeGrid(container) {
                return _super.call(this, container) || this;
            }
            LkpPatientTypeGrid.prototype.getColumnsKey = function () { return 'Configs.LkpPatientType'; };
            LkpPatientTypeGrid.prototype.getDialogType = function () { return Configs.LkpPatientTypeDialog; };
            LkpPatientTypeGrid.prototype.getIdProperty = function () { return Configs.LkpPatientTypeRow.idProperty; };
            LkpPatientTypeGrid.prototype.getLocalTextPrefix = function () { return Configs.LkpPatientTypeRow.localTextPrefix; };
            LkpPatientTypeGrid.prototype.getService = function () { return Configs.LkpPatientTypeService.baseUrl; };
            LkpPatientTypeGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            LkpPatientTypeGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], LkpPatientTypeGrid);
            return LkpPatientTypeGrid;
        }(Serenity.EntityGrid));
        Configs.LkpPatientTypeGrid = LkpPatientTypeGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpPhysExamGroupDialog = /** @class */ (function (_super) {
            __extends(LkpPhysExamGroupDialog, _super);
            function LkpPhysExamGroupDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.LkpPhysExamGroupForm(_this.idPrefix);
                return _this;
            }
            LkpPhysExamGroupDialog.prototype.getFormKey = function () { return Configs.LkpPhysExamGroupForm.formKey; };
            LkpPhysExamGroupDialog.prototype.getIdProperty = function () { return Configs.LkpPhysExamGroupRow.idProperty; };
            LkpPhysExamGroupDialog.prototype.getLocalTextPrefix = function () { return Configs.LkpPhysExamGroupRow.localTextPrefix; };
            LkpPhysExamGroupDialog.prototype.getNameProperty = function () { return Configs.LkpPhysExamGroupRow.nameProperty; };
            LkpPhysExamGroupDialog.prototype.getService = function () { return Configs.LkpPhysExamGroupService.baseUrl; };
            LkpPhysExamGroupDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], LkpPhysExamGroupDialog);
            return LkpPhysExamGroupDialog;
        }(Serenity.EntityDialog));
        Configs.LkpPhysExamGroupDialog = LkpPhysExamGroupDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpPhysExamGroupGrid = /** @class */ (function (_super) {
            __extends(LkpPhysExamGroupGrid, _super);
            function LkpPhysExamGroupGrid(container) {
                return _super.call(this, container) || this;
            }
            LkpPhysExamGroupGrid.prototype.getColumnsKey = function () { return 'Configs.LkpPhysExamGroup'; };
            LkpPhysExamGroupGrid.prototype.getDialogType = function () { return Configs.LkpPhysExamGroupDialog; };
            LkpPhysExamGroupGrid.prototype.getIdProperty = function () { return Configs.LkpPhysExamGroupRow.idProperty; };
            LkpPhysExamGroupGrid.prototype.getLocalTextPrefix = function () { return Configs.LkpPhysExamGroupRow.localTextPrefix; };
            LkpPhysExamGroupGrid.prototype.getService = function () { return Configs.LkpPhysExamGroupService.baseUrl; };
            LkpPhysExamGroupGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            LkpPhysExamGroupGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], LkpPhysExamGroupGrid);
            return LkpPhysExamGroupGrid;
        }(Serenity.EntityGrid));
        Configs.LkpPhysExamGroupGrid = LkpPhysExamGroupGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpPhysExamsDialog = /** @class */ (function (_super) {
            __extends(LkpPhysExamsDialog, _super);
            function LkpPhysExamsDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.LkpPhysExamsForm(_this.idPrefix);
                return _this;
            }
            LkpPhysExamsDialog.prototype.getFormKey = function () { return Configs.LkpPhysExamsForm.formKey; };
            LkpPhysExamsDialog.prototype.getIdProperty = function () { return Configs.LkpPhysExamsRow.idProperty; };
            LkpPhysExamsDialog.prototype.getLocalTextPrefix = function () { return Configs.LkpPhysExamsRow.localTextPrefix; };
            LkpPhysExamsDialog.prototype.getNameProperty = function () { return Configs.LkpPhysExamsRow.nameProperty; };
            LkpPhysExamsDialog.prototype.getService = function () { return Configs.LkpPhysExamsService.baseUrl; };
            LkpPhysExamsDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], LkpPhysExamsDialog);
            return LkpPhysExamsDialog;
        }(Serenity.EntityDialog));
        Configs.LkpPhysExamsDialog = LkpPhysExamsDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpPhysExamsGrid = /** @class */ (function (_super) {
            __extends(LkpPhysExamsGrid, _super);
            function LkpPhysExamsGrid(container) {
                return _super.call(this, container) || this;
            }
            LkpPhysExamsGrid.prototype.getColumnsKey = function () { return 'Configs.LkpPhysExams'; };
            LkpPhysExamsGrid.prototype.getDialogType = function () { return Configs.LkpPhysExamsDialog; };
            LkpPhysExamsGrid.prototype.getIdProperty = function () { return Configs.LkpPhysExamsRow.idProperty; };
            LkpPhysExamsGrid.prototype.getLocalTextPrefix = function () { return Configs.LkpPhysExamsRow.localTextPrefix; };
            LkpPhysExamsGrid.prototype.getService = function () { return Configs.LkpPhysExamsService.baseUrl; };
            LkpPhysExamsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            LkpPhysExamsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], LkpPhysExamsGrid);
            return LkpPhysExamsGrid;
        }(Serenity.EntityGrid));
        Configs.LkpPhysExamsGrid = LkpPhysExamsGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpRecommandsDialog = /** @class */ (function (_super) {
            __extends(LkpRecommandsDialog, _super);
            function LkpRecommandsDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.LkpRecommandsForm(_this.idPrefix);
                return _this;
            }
            LkpRecommandsDialog.prototype.getFormKey = function () { return Configs.LkpRecommandsForm.formKey; };
            LkpRecommandsDialog.prototype.getIdProperty = function () { return Configs.LkpRecommandsRow.idProperty; };
            LkpRecommandsDialog.prototype.getLocalTextPrefix = function () { return Configs.LkpRecommandsRow.localTextPrefix; };
            LkpRecommandsDialog.prototype.getNameProperty = function () { return Configs.LkpRecommandsRow.nameProperty; };
            LkpRecommandsDialog.prototype.getService = function () { return Configs.LkpRecommandsService.baseUrl; };
            LkpRecommandsDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], LkpRecommandsDialog);
            return LkpRecommandsDialog;
        }(Serenity.EntityDialog));
        Configs.LkpRecommandsDialog = LkpRecommandsDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpRecommandsGrid = /** @class */ (function (_super) {
            __extends(LkpRecommandsGrid, _super);
            function LkpRecommandsGrid(container) {
                return _super.call(this, container) || this;
            }
            LkpRecommandsGrid.prototype.getColumnsKey = function () { return 'Configs.LkpRecommands'; };
            LkpRecommandsGrid.prototype.getDialogType = function () { return Configs.LkpRecommandsDialog; };
            LkpRecommandsGrid.prototype.getIdProperty = function () { return Configs.LkpRecommandsRow.idProperty; };
            LkpRecommandsGrid.prototype.getLocalTextPrefix = function () { return Configs.LkpRecommandsRow.localTextPrefix; };
            LkpRecommandsGrid.prototype.getService = function () { return Configs.LkpRecommandsService.baseUrl; };
            LkpRecommandsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            LkpRecommandsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], LkpRecommandsGrid);
            return LkpRecommandsGrid;
        }(Serenity.EntityGrid));
        Configs.LkpRecommandsGrid = LkpRecommandsGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpTestTypesDialog = /** @class */ (function (_super) {
            __extends(LkpTestTypesDialog, _super);
            function LkpTestTypesDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.LkpTestTypesForm(_this.idPrefix);
                return _this;
            }
            LkpTestTypesDialog.prototype.getFormKey = function () { return Configs.LkpTestTypesForm.formKey; };
            LkpTestTypesDialog.prototype.getIdProperty = function () { return Configs.LkpTestTypesRow.idProperty; };
            LkpTestTypesDialog.prototype.getLocalTextPrefix = function () { return Configs.LkpTestTypesRow.localTextPrefix; };
            LkpTestTypesDialog.prototype.getNameProperty = function () { return Configs.LkpTestTypesRow.nameProperty; };
            LkpTestTypesDialog.prototype.getService = function () { return Configs.LkpTestTypesService.baseUrl; };
            LkpTestTypesDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], LkpTestTypesDialog);
            return LkpTestTypesDialog;
        }(Serenity.EntityDialog));
        Configs.LkpTestTypesDialog = LkpTestTypesDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpTestTypesGrid = /** @class */ (function (_super) {
            __extends(LkpTestTypesGrid, _super);
            function LkpTestTypesGrid(container) {
                return _super.call(this, container) || this;
            }
            LkpTestTypesGrid.prototype.getColumnsKey = function () { return 'Configs.LkpTestTypes'; };
            LkpTestTypesGrid.prototype.getDialogType = function () { return Configs.LkpTestTypesDialog; };
            LkpTestTypesGrid.prototype.getIdProperty = function () { return Configs.LkpTestTypesRow.idProperty; };
            LkpTestTypesGrid.prototype.getLocalTextPrefix = function () { return Configs.LkpTestTypesRow.localTextPrefix; };
            LkpTestTypesGrid.prototype.getService = function () { return Configs.LkpTestTypesService.baseUrl; };
            LkpTestTypesGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            LkpTestTypesGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], LkpTestTypesGrid);
            return LkpTestTypesGrid;
        }(Serenity.EntityGrid));
        Configs.LkpTestTypesGrid = LkpTestTypesGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpUnitDialog = /** @class */ (function (_super) {
            __extends(LkpUnitDialog, _super);
            function LkpUnitDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.LkpUnitForm(_this.idPrefix);
                return _this;
            }
            LkpUnitDialog.prototype.getFormKey = function () { return Configs.LkpUnitForm.formKey; };
            LkpUnitDialog.prototype.getIdProperty = function () { return Configs.LkpUnitRow.idProperty; };
            LkpUnitDialog.prototype.getLocalTextPrefix = function () { return Configs.LkpUnitRow.localTextPrefix; };
            LkpUnitDialog.prototype.getNameProperty = function () { return Configs.LkpUnitRow.nameProperty; };
            LkpUnitDialog.prototype.getService = function () { return Configs.LkpUnitService.baseUrl; };
            LkpUnitDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], LkpUnitDialog);
            return LkpUnitDialog;
        }(Serenity.EntityDialog));
        Configs.LkpUnitDialog = LkpUnitDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpUnitGrid = /** @class */ (function (_super) {
            __extends(LkpUnitGrid, _super);
            function LkpUnitGrid(container) {
                return _super.call(this, container) || this;
            }
            LkpUnitGrid.prototype.getColumnsKey = function () { return 'Configs.LkpUnit'; };
            LkpUnitGrid.prototype.getDialogType = function () { return Configs.LkpUnitDialog; };
            LkpUnitGrid.prototype.getIdProperty = function () { return Configs.LkpUnitRow.idProperty; };
            LkpUnitGrid.prototype.getLocalTextPrefix = function () { return Configs.LkpUnitRow.localTextPrefix; };
            LkpUnitGrid.prototype.getService = function () { return Configs.LkpUnitService.baseUrl; };
            LkpUnitGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            LkpUnitGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], LkpUnitGrid);
            return LkpUnitGrid;
        }(Serenity.EntityGrid));
        Configs.LkpUnitGrid = LkpUnitGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpVendorDialog = /** @class */ (function (_super) {
            __extends(LkpVendorDialog, _super);
            function LkpVendorDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.LkpVendorForm(_this.idPrefix);
                return _this;
            }
            LkpVendorDialog.prototype.getFormKey = function () { return Configs.LkpVendorForm.formKey; };
            LkpVendorDialog.prototype.getIdProperty = function () { return Configs.LkpVendorRow.idProperty; };
            LkpVendorDialog.prototype.getLocalTextPrefix = function () { return Configs.LkpVendorRow.localTextPrefix; };
            LkpVendorDialog.prototype.getNameProperty = function () { return Configs.LkpVendorRow.nameProperty; };
            LkpVendorDialog.prototype.getService = function () { return Configs.LkpVendorService.baseUrl; };
            LkpVendorDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], LkpVendorDialog);
            return LkpVendorDialog;
        }(Serenity.EntityDialog));
        Configs.LkpVendorDialog = LkpVendorDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var LkpVendorGrid = /** @class */ (function (_super) {
            __extends(LkpVendorGrid, _super);
            function LkpVendorGrid(container) {
                return _super.call(this, container) || this;
            }
            LkpVendorGrid.prototype.getColumnsKey = function () { return 'Configs.LkpVendor'; };
            LkpVendorGrid.prototype.getDialogType = function () { return Configs.LkpVendorDialog; };
            LkpVendorGrid.prototype.getIdProperty = function () { return Configs.LkpVendorRow.idProperty; };
            LkpVendorGrid.prototype.getLocalTextPrefix = function () { return Configs.LkpVendorRow.localTextPrefix; };
            LkpVendorGrid.prototype.getService = function () { return Configs.LkpVendorService.baseUrl; };
            LkpVendorGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            LkpVendorGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], LkpVendorGrid);
            return LkpVendorGrid;
        }(Serenity.EntityGrid));
        Configs.LkpVendorGrid = LkpVendorGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var StagesDialog = /** @class */ (function (_super) {
            __extends(StagesDialog, _super);
            function StagesDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.StagesForm(_this.idPrefix);
                return _this;
            }
            StagesDialog.prototype.getFormKey = function () { return Configs.StagesForm.formKey; };
            StagesDialog.prototype.getIdProperty = function () { return Configs.StagesRow.idProperty; };
            StagesDialog.prototype.getLocalTextPrefix = function () { return Configs.StagesRow.localTextPrefix; };
            StagesDialog.prototype.getNameProperty = function () { return Configs.StagesRow.nameProperty; };
            StagesDialog.prototype.getService = function () { return Configs.StagesService.baseUrl; };
            StagesDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], StagesDialog);
            return StagesDialog;
        }(Serenity.EntityDialog));
        Configs.StagesDialog = StagesDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var StagesGrid = /** @class */ (function (_super) {
            __extends(StagesGrid, _super);
            function StagesGrid(container) {
                return _super.call(this, container) || this;
            }
            StagesGrid.prototype.getColumnsKey = function () { return 'Configs.Stages'; };
            StagesGrid.prototype.getDialogType = function () { return Configs.StagesDialog; };
            StagesGrid.prototype.getIdProperty = function () { return Configs.StagesRow.idProperty; };
            StagesGrid.prototype.getLocalTextPrefix = function () { return Configs.StagesRow.localTextPrefix; };
            StagesGrid.prototype.getService = function () { return Configs.StagesService.baseUrl; };
            StagesGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], StagesGrid);
            return StagesGrid;
        }(Serenity.EntityGrid));
        Configs.StagesGrid = StagesGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblAbortionTypeDialog = /** @class */ (function (_super) {
            __extends(TblAbortionTypeDialog, _super);
            function TblAbortionTypeDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.TblAbortionTypeForm(_this.idPrefix);
                return _this;
            }
            TblAbortionTypeDialog.prototype.getFormKey = function () { return Configs.TblAbortionTypeForm.formKey; };
            TblAbortionTypeDialog.prototype.getIdProperty = function () { return Configs.TblAbortionTypeRow.idProperty; };
            TblAbortionTypeDialog.prototype.getLocalTextPrefix = function () { return Configs.TblAbortionTypeRow.localTextPrefix; };
            TblAbortionTypeDialog.prototype.getNameProperty = function () { return Configs.TblAbortionTypeRow.nameProperty; };
            TblAbortionTypeDialog.prototype.getService = function () { return Configs.TblAbortionTypeService.baseUrl; };
            TblAbortionTypeDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblAbortionTypeDialog);
            return TblAbortionTypeDialog;
        }(Serenity.EntityDialog));
        Configs.TblAbortionTypeDialog = TblAbortionTypeDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblAbortionTypeGrid = /** @class */ (function (_super) {
            __extends(TblAbortionTypeGrid, _super);
            function TblAbortionTypeGrid(container) {
                return _super.call(this, container) || this;
            }
            TblAbortionTypeGrid.prototype.getColumnsKey = function () { return 'Configs.TblAbortionType'; };
            TblAbortionTypeGrid.prototype.getDialogType = function () { return Configs.TblAbortionTypeDialog; };
            TblAbortionTypeGrid.prototype.getIdProperty = function () { return Configs.TblAbortionTypeRow.idProperty; };
            TblAbortionTypeGrid.prototype.getLocalTextPrefix = function () { return Configs.TblAbortionTypeRow.localTextPrefix; };
            TblAbortionTypeGrid.prototype.getService = function () { return Configs.TblAbortionTypeService.baseUrl; };
            TblAbortionTypeGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            TblAbortionTypeGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TblAbortionTypeGrid);
            return TblAbortionTypeGrid;
        }(Serenity.EntityGrid));
        Configs.TblAbortionTypeGrid = TblAbortionTypeGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblAgeTypesDialog = /** @class */ (function (_super) {
            __extends(TblAgeTypesDialog, _super);
            function TblAgeTypesDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.TblAgeTypesForm(_this.idPrefix);
                return _this;
            }
            TblAgeTypesDialog.prototype.getFormKey = function () { return Configs.TblAgeTypesForm.formKey; };
            TblAgeTypesDialog.prototype.getIdProperty = function () { return Configs.TblAgeTypesRow.idProperty; };
            TblAgeTypesDialog.prototype.getLocalTextPrefix = function () { return Configs.TblAgeTypesRow.localTextPrefix; };
            TblAgeTypesDialog.prototype.getNameProperty = function () { return Configs.TblAgeTypesRow.nameProperty; };
            TblAgeTypesDialog.prototype.getService = function () { return Configs.TblAgeTypesService.baseUrl; };
            TblAgeTypesDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblAgeTypesDialog);
            return TblAgeTypesDialog;
        }(Serenity.EntityDialog));
        Configs.TblAgeTypesDialog = TblAgeTypesDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblAgeTypesGrid = /** @class */ (function (_super) {
            __extends(TblAgeTypesGrid, _super);
            function TblAgeTypesGrid(container) {
                return _super.call(this, container) || this;
            }
            TblAgeTypesGrid.prototype.getColumnsKey = function () { return 'Configs.TblAgeTypes'; };
            TblAgeTypesGrid.prototype.getDialogType = function () { return Configs.TblAgeTypesDialog; };
            TblAgeTypesGrid.prototype.getIdProperty = function () { return Configs.TblAgeTypesRow.idProperty; };
            TblAgeTypesGrid.prototype.getLocalTextPrefix = function () { return Configs.TblAgeTypesRow.localTextPrefix; };
            TblAgeTypesGrid.prototype.getService = function () { return Configs.TblAgeTypesService.baseUrl; };
            TblAgeTypesGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            TblAgeTypesGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TblAgeTypesGrid);
            return TblAgeTypesGrid;
        }(Serenity.EntityGrid));
        Configs.TblAgeTypesGrid = TblAgeTypesGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblBloodGroupDialog = /** @class */ (function (_super) {
            __extends(TblBloodGroupDialog, _super);
            function TblBloodGroupDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.TblBloodGroupForm(_this.idPrefix);
                return _this;
            }
            TblBloodGroupDialog.prototype.getFormKey = function () { return Configs.TblBloodGroupForm.formKey; };
            TblBloodGroupDialog.prototype.getIdProperty = function () { return Configs.TblBloodGroupRow.idProperty; };
            TblBloodGroupDialog.prototype.getLocalTextPrefix = function () { return Configs.TblBloodGroupRow.localTextPrefix; };
            TblBloodGroupDialog.prototype.getNameProperty = function () { return Configs.TblBloodGroupRow.nameProperty; };
            TblBloodGroupDialog.prototype.getService = function () { return Configs.TblBloodGroupService.baseUrl; };
            TblBloodGroupDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblBloodGroupDialog);
            return TblBloodGroupDialog;
        }(Serenity.EntityDialog));
        Configs.TblBloodGroupDialog = TblBloodGroupDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblBloodGroupGrid = /** @class */ (function (_super) {
            __extends(TblBloodGroupGrid, _super);
            function TblBloodGroupGrid(container) {
                return _super.call(this, container) || this;
            }
            TblBloodGroupGrid.prototype.getColumnsKey = function () { return 'Configs.TblBloodGroup'; };
            TblBloodGroupGrid.prototype.getDialogType = function () { return Configs.TblBloodGroupDialog; };
            TblBloodGroupGrid.prototype.getIdProperty = function () { return Configs.TblBloodGroupRow.idProperty; };
            TblBloodGroupGrid.prototype.getLocalTextPrefix = function () { return Configs.TblBloodGroupRow.localTextPrefix; };
            TblBloodGroupGrid.prototype.getService = function () { return Configs.TblBloodGroupService.baseUrl; };
            TblBloodGroupGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            TblBloodGroupGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TblBloodGroupGrid);
            return TblBloodGroupGrid;
        }(Serenity.EntityGrid));
        Configs.TblBloodGroupGrid = TblBloodGroupGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblCaseTypesDialog = /** @class */ (function (_super) {
            __extends(TblCaseTypesDialog, _super);
            function TblCaseTypesDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.TblCaseTypesForm(_this.idPrefix);
                return _this;
            }
            TblCaseTypesDialog.prototype.getFormKey = function () { return Configs.TblCaseTypesForm.formKey; };
            TblCaseTypesDialog.prototype.getIdProperty = function () { return Configs.TblCaseTypesRow.idProperty; };
            TblCaseTypesDialog.prototype.getLocalTextPrefix = function () { return Configs.TblCaseTypesRow.localTextPrefix; };
            TblCaseTypesDialog.prototype.getNameProperty = function () { return Configs.TblCaseTypesRow.nameProperty; };
            TblCaseTypesDialog.prototype.getService = function () { return Configs.TblCaseTypesService.baseUrl; };
            TblCaseTypesDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblCaseTypesDialog);
            return TblCaseTypesDialog;
        }(Serenity.EntityDialog));
        Configs.TblCaseTypesDialog = TblCaseTypesDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblCaseTypesGrid = /** @class */ (function (_super) {
            __extends(TblCaseTypesGrid, _super);
            function TblCaseTypesGrid(container) {
                return _super.call(this, container) || this;
            }
            TblCaseTypesGrid.prototype.getColumnsKey = function () { return 'Configs.TblCaseTypes'; };
            TblCaseTypesGrid.prototype.getDialogType = function () { return Configs.TblCaseTypesDialog; };
            TblCaseTypesGrid.prototype.getIdProperty = function () { return Configs.TblCaseTypesRow.idProperty; };
            TblCaseTypesGrid.prototype.getLocalTextPrefix = function () { return Configs.TblCaseTypesRow.localTextPrefix; };
            TblCaseTypesGrid.prototype.getService = function () { return Configs.TblCaseTypesService.baseUrl; };
            TblCaseTypesGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            TblCaseTypesGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TblCaseTypesGrid);
            return TblCaseTypesGrid;
        }(Serenity.EntityGrid));
        Configs.TblCaseTypesGrid = TblCaseTypesGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblChildDialog = /** @class */ (function (_super) {
            __extends(TblChildDialog, _super);
            function TblChildDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.TblChildForm(_this.idPrefix);
                return _this;
            }
            TblChildDialog.prototype.getFormKey = function () { return Configs.TblChildForm.formKey; };
            TblChildDialog.prototype.getIdProperty = function () { return Configs.TblChildRow.idProperty; };
            TblChildDialog.prototype.getLocalTextPrefix = function () { return Configs.TblChildRow.localTextPrefix; };
            TblChildDialog.prototype.getNameProperty = function () { return Configs.TblChildRow.nameProperty; };
            TblChildDialog.prototype.getService = function () { return Configs.TblChildService.baseUrl; };
            TblChildDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblChildDialog);
            return TblChildDialog;
        }(Serenity.EntityDialog));
        Configs.TblChildDialog = TblChildDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblChildGrid = /** @class */ (function (_super) {
            __extends(TblChildGrid, _super);
            function TblChildGrid(container) {
                return _super.call(this, container) || this;
            }
            TblChildGrid.prototype.getColumnsKey = function () { return 'Configs.TblChild'; };
            TblChildGrid.prototype.getDialogType = function () { return Configs.TblChildDialog; };
            TblChildGrid.prototype.getIdProperty = function () { return Configs.TblChildRow.idProperty; };
            TblChildGrid.prototype.getLocalTextPrefix = function () { return Configs.TblChildRow.localTextPrefix; };
            TblChildGrid.prototype.getService = function () { return Configs.TblChildService.baseUrl; };
            TblChildGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            TblChildGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TblChildGrid);
            return TblChildGrid;
        }(Serenity.EntityGrid));
        Configs.TblChildGrid = TblChildGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblDeptDialog = /** @class */ (function (_super) {
            __extends(TblDeptDialog, _super);
            function TblDeptDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.TblDeptForm(_this.idPrefix);
                return _this;
            }
            TblDeptDialog.prototype.getFormKey = function () { return Configs.TblDeptForm.formKey; };
            TblDeptDialog.prototype.getIdProperty = function () { return Configs.TblDeptRow.idProperty; };
            TblDeptDialog.prototype.getLocalTextPrefix = function () { return Configs.TblDeptRow.localTextPrefix; };
            TblDeptDialog.prototype.getNameProperty = function () { return Configs.TblDeptRow.nameProperty; };
            TblDeptDialog.prototype.getService = function () { return Configs.TblDeptService.baseUrl; };
            TblDeptDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblDeptDialog);
            return TblDeptDialog;
        }(Serenity.EntityDialog));
        Configs.TblDeptDialog = TblDeptDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblDeptGrid = /** @class */ (function (_super) {
            __extends(TblDeptGrid, _super);
            function TblDeptGrid(container) {
                return _super.call(this, container) || this;
            }
            TblDeptGrid.prototype.getColumnsKey = function () { return 'Configs.TblDept'; };
            TblDeptGrid.prototype.getDialogType = function () { return Configs.TblDeptDialog; };
            TblDeptGrid.prototype.getIdProperty = function () { return Configs.TblDeptRow.idProperty; };
            TblDeptGrid.prototype.getLocalTextPrefix = function () { return Configs.TblDeptRow.localTextPrefix; };
            TblDeptGrid.prototype.getService = function () { return Configs.TblDeptService.baseUrl; };
            TblDeptGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            TblDeptGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TblDeptGrid);
            return TblDeptGrid;
        }(Serenity.EntityGrid));
        Configs.TblDeptGrid = TblDeptGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblDiagnosisDialog = /** @class */ (function (_super) {
            __extends(TblDiagnosisDialog, _super);
            function TblDiagnosisDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.TblDiagnosisForm(_this.idPrefix);
                return _this;
            }
            TblDiagnosisDialog.prototype.getFormKey = function () { return Configs.TblDiagnosisForm.formKey; };
            TblDiagnosisDialog.prototype.getIdProperty = function () { return Configs.TblDiagnosisRow.idProperty; };
            TblDiagnosisDialog.prototype.getLocalTextPrefix = function () { return Configs.TblDiagnosisRow.localTextPrefix; };
            TblDiagnosisDialog.prototype.getNameProperty = function () { return Configs.TblDiagnosisRow.nameProperty; };
            TblDiagnosisDialog.prototype.getService = function () { return Configs.TblDiagnosisService.baseUrl; };
            TblDiagnosisDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblDiagnosisDialog);
            return TblDiagnosisDialog;
        }(Serenity.EntityDialog));
        Configs.TblDiagnosisDialog = TblDiagnosisDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblDiagnosisGrid = /** @class */ (function (_super) {
            __extends(TblDiagnosisGrid, _super);
            function TblDiagnosisGrid(container) {
                return _super.call(this, container) || this;
            }
            TblDiagnosisGrid.prototype.getColumnsKey = function () { return 'Configs.TblDiagnosis'; };
            TblDiagnosisGrid.prototype.getDialogType = function () { return Configs.TblDiagnosisDialog; };
            TblDiagnosisGrid.prototype.getIdProperty = function () { return Configs.TblDiagnosisRow.idProperty; };
            TblDiagnosisGrid.prototype.getLocalTextPrefix = function () { return Configs.TblDiagnosisRow.localTextPrefix; };
            TblDiagnosisGrid.prototype.getService = function () { return Configs.TblDiagnosisService.baseUrl; };
            TblDiagnosisGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            TblDiagnosisGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TblDiagnosisGrid);
            return TblDiagnosisGrid;
        }(Serenity.EntityGrid));
        Configs.TblDiagnosisGrid = TblDiagnosisGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblDiseasesCategoryDialog = /** @class */ (function (_super) {
            __extends(TblDiseasesCategoryDialog, _super);
            function TblDiseasesCategoryDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.TblDiseasesCategoryForm(_this.idPrefix);
                return _this;
            }
            TblDiseasesCategoryDialog.prototype.getFormKey = function () { return Configs.TblDiseasesCategoryForm.formKey; };
            TblDiseasesCategoryDialog.prototype.getIdProperty = function () { return Configs.TblDiseasesCategoryRow.idProperty; };
            TblDiseasesCategoryDialog.prototype.getLocalTextPrefix = function () { return Configs.TblDiseasesCategoryRow.localTextPrefix; };
            TblDiseasesCategoryDialog.prototype.getNameProperty = function () { return Configs.TblDiseasesCategoryRow.nameProperty; };
            TblDiseasesCategoryDialog.prototype.getService = function () { return Configs.TblDiseasesCategoryService.baseUrl; };
            TblDiseasesCategoryDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblDiseasesCategoryDialog);
            return TblDiseasesCategoryDialog;
        }(Serenity.EntityDialog));
        Configs.TblDiseasesCategoryDialog = TblDiseasesCategoryDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblDiseasesCategoryGrid = /** @class */ (function (_super) {
            __extends(TblDiseasesCategoryGrid, _super);
            function TblDiseasesCategoryGrid(container) {
                return _super.call(this, container) || this;
            }
            TblDiseasesCategoryGrid.prototype.getColumnsKey = function () { return 'Configs.TblDiseasesCategory'; };
            TblDiseasesCategoryGrid.prototype.getDialogType = function () { return Configs.TblDiseasesCategoryDialog; };
            TblDiseasesCategoryGrid.prototype.getIdProperty = function () { return Configs.TblDiseasesCategoryRow.idProperty; };
            TblDiseasesCategoryGrid.prototype.getLocalTextPrefix = function () { return Configs.TblDiseasesCategoryRow.localTextPrefix; };
            TblDiseasesCategoryGrid.prototype.getService = function () { return Configs.TblDiseasesCategoryService.baseUrl; };
            TblDiseasesCategoryGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            TblDiseasesCategoryGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TblDiseasesCategoryGrid);
            return TblDiseasesCategoryGrid;
        }(Serenity.EntityGrid));
        Configs.TblDiseasesCategoryGrid = TblDiseasesCategoryGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblEducationDialog = /** @class */ (function (_super) {
            __extends(TblEducationDialog, _super);
            function TblEducationDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.TblEducationForm(_this.idPrefix);
                return _this;
            }
            TblEducationDialog.prototype.getFormKey = function () { return Configs.TblEducationForm.formKey; };
            TblEducationDialog.prototype.getIdProperty = function () { return Configs.TblEducationRow.idProperty; };
            TblEducationDialog.prototype.getLocalTextPrefix = function () { return Configs.TblEducationRow.localTextPrefix; };
            TblEducationDialog.prototype.getNameProperty = function () { return Configs.TblEducationRow.nameProperty; };
            TblEducationDialog.prototype.getService = function () { return Configs.TblEducationService.baseUrl; };
            TblEducationDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblEducationDialog);
            return TblEducationDialog;
        }(Serenity.EntityDialog));
        Configs.TblEducationDialog = TblEducationDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblEducationGrid = /** @class */ (function (_super) {
            __extends(TblEducationGrid, _super);
            function TblEducationGrid(container) {
                return _super.call(this, container) || this;
            }
            TblEducationGrid.prototype.getColumnsKey = function () { return 'Configs.TblEducation'; };
            TblEducationGrid.prototype.getDialogType = function () { return Configs.TblEducationDialog; };
            TblEducationGrid.prototype.getIdProperty = function () { return Configs.TblEducationRow.idProperty; };
            TblEducationGrid.prototype.getLocalTextPrefix = function () { return Configs.TblEducationRow.localTextPrefix; };
            TblEducationGrid.prototype.getService = function () { return Configs.TblEducationService.baseUrl; };
            TblEducationGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            TblEducationGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TblEducationGrid);
            return TblEducationGrid;
        }(Serenity.EntityGrid));
        Configs.TblEducationGrid = TblEducationGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblExaminationsDetailsDialog = /** @class */ (function (_super) {
            __extends(TblExaminationsDetailsDialog, _super);
            function TblExaminationsDetailsDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.TblExaminationsDetailsForm(_this.idPrefix);
                return _this;
            }
            TblExaminationsDetailsDialog.prototype.getFormKey = function () { return Configs.TblExaminationsDetailsForm.formKey; };
            TblExaminationsDetailsDialog.prototype.getIdProperty = function () { return Configs.TblExaminationsDetailsRow.idProperty; };
            TblExaminationsDetailsDialog.prototype.getLocalTextPrefix = function () { return Configs.TblExaminationsDetailsRow.localTextPrefix; };
            TblExaminationsDetailsDialog.prototype.getNameProperty = function () { return Configs.TblExaminationsDetailsRow.nameProperty; };
            TblExaminationsDetailsDialog.prototype.getService = function () { return Configs.TblExaminationsDetailsService.baseUrl; };
            TblExaminationsDetailsDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblExaminationsDetailsDialog);
            return TblExaminationsDetailsDialog;
        }(Serenity.EntityDialog));
        Configs.TblExaminationsDetailsDialog = TblExaminationsDetailsDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblExaminationsDetailsGrid = /** @class */ (function (_super) {
            __extends(TblExaminationsDetailsGrid, _super);
            function TblExaminationsDetailsGrid(container) {
                return _super.call(this, container) || this;
            }
            TblExaminationsDetailsGrid.prototype.getColumnsKey = function () { return 'Configs.TblExaminationsDetails'; };
            TblExaminationsDetailsGrid.prototype.getDialogType = function () { return Configs.TblExaminationsDetailsDialog; };
            TblExaminationsDetailsGrid.prototype.getIdProperty = function () { return Configs.TblExaminationsDetailsRow.idProperty; };
            TblExaminationsDetailsGrid.prototype.getLocalTextPrefix = function () { return Configs.TblExaminationsDetailsRow.localTextPrefix; };
            TblExaminationsDetailsGrid.prototype.getService = function () { return Configs.TblExaminationsDetailsService.baseUrl; };
            TblExaminationsDetailsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            TblExaminationsDetailsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TblExaminationsDetailsGrid);
            return TblExaminationsDetailsGrid;
        }(Serenity.EntityGrid));
        Configs.TblExaminationsDetailsGrid = TblExaminationsDetailsGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblGenderDialog = /** @class */ (function (_super) {
            __extends(TblGenderDialog, _super);
            function TblGenderDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.TblGenderForm(_this.idPrefix);
                return _this;
            }
            TblGenderDialog.prototype.getFormKey = function () { return Configs.TblGenderForm.formKey; };
            TblGenderDialog.prototype.getIdProperty = function () { return Configs.TblGenderRow.idProperty; };
            TblGenderDialog.prototype.getLocalTextPrefix = function () { return Configs.TblGenderRow.localTextPrefix; };
            TblGenderDialog.prototype.getNameProperty = function () { return Configs.TblGenderRow.nameProperty; };
            TblGenderDialog.prototype.getService = function () { return Configs.TblGenderService.baseUrl; };
            TblGenderDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblGenderDialog);
            return TblGenderDialog;
        }(Serenity.EntityDialog));
        Configs.TblGenderDialog = TblGenderDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblGenderGrid = /** @class */ (function (_super) {
            __extends(TblGenderGrid, _super);
            function TblGenderGrid(container) {
                return _super.call(this, container) || this;
            }
            TblGenderGrid.prototype.getColumnsKey = function () { return 'Configs.TblGender'; };
            TblGenderGrid.prototype.getDialogType = function () { return Configs.TblGenderDialog; };
            TblGenderGrid.prototype.getIdProperty = function () { return Configs.TblGenderRow.idProperty; };
            TblGenderGrid.prototype.getLocalTextPrefix = function () { return Configs.TblGenderRow.localTextPrefix; };
            TblGenderGrid.prototype.getService = function () { return Configs.TblGenderService.baseUrl; };
            TblGenderGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            TblGenderGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TblGenderGrid);
            return TblGenderGrid;
        }(Serenity.EntityGrid));
        Configs.TblGenderGrid = TblGenderGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblMaritalStatusDialog = /** @class */ (function (_super) {
            __extends(TblMaritalStatusDialog, _super);
            function TblMaritalStatusDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.TblMaritalStatusForm(_this.idPrefix);
                return _this;
            }
            TblMaritalStatusDialog.prototype.getFormKey = function () { return Configs.TblMaritalStatusForm.formKey; };
            TblMaritalStatusDialog.prototype.getIdProperty = function () { return Configs.TblMaritalStatusRow.idProperty; };
            TblMaritalStatusDialog.prototype.getLocalTextPrefix = function () { return Configs.TblMaritalStatusRow.localTextPrefix; };
            TblMaritalStatusDialog.prototype.getNameProperty = function () { return Configs.TblMaritalStatusRow.nameProperty; };
            TblMaritalStatusDialog.prototype.getService = function () { return Configs.TblMaritalStatusService.baseUrl; };
            TblMaritalStatusDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblMaritalStatusDialog);
            return TblMaritalStatusDialog;
        }(Serenity.EntityDialog));
        Configs.TblMaritalStatusDialog = TblMaritalStatusDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblMaritalStatusGrid = /** @class */ (function (_super) {
            __extends(TblMaritalStatusGrid, _super);
            function TblMaritalStatusGrid(container) {
                return _super.call(this, container) || this;
            }
            TblMaritalStatusGrid.prototype.getColumnsKey = function () { return 'Configs.TblMaritalStatus'; };
            TblMaritalStatusGrid.prototype.getDialogType = function () { return Configs.TblMaritalStatusDialog; };
            TblMaritalStatusGrid.prototype.getIdProperty = function () { return Configs.TblMaritalStatusRow.idProperty; };
            TblMaritalStatusGrid.prototype.getLocalTextPrefix = function () { return Configs.TblMaritalStatusRow.localTextPrefix; };
            TblMaritalStatusGrid.prototype.getService = function () { return Configs.TblMaritalStatusService.baseUrl; };
            TblMaritalStatusGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            TblMaritalStatusGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TblMaritalStatusGrid);
            return TblMaritalStatusGrid;
        }(Serenity.EntityGrid));
        Configs.TblMaritalStatusGrid = TblMaritalStatusGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblNbResultDialog = /** @class */ (function (_super) {
            __extends(TblNbResultDialog, _super);
            function TblNbResultDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.TblNbResultForm(_this.idPrefix);
                return _this;
            }
            TblNbResultDialog.prototype.getFormKey = function () { return Configs.TblNbResultForm.formKey; };
            TblNbResultDialog.prototype.getIdProperty = function () { return Configs.TblNbResultRow.idProperty; };
            TblNbResultDialog.prototype.getLocalTextPrefix = function () { return Configs.TblNbResultRow.localTextPrefix; };
            TblNbResultDialog.prototype.getNameProperty = function () { return Configs.TblNbResultRow.nameProperty; };
            TblNbResultDialog.prototype.getService = function () { return Configs.TblNbResultService.baseUrl; };
            TblNbResultDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblNbResultDialog);
            return TblNbResultDialog;
        }(Serenity.EntityDialog));
        Configs.TblNbResultDialog = TblNbResultDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblNbResultGrid = /** @class */ (function (_super) {
            __extends(TblNbResultGrid, _super);
            function TblNbResultGrid(container) {
                return _super.call(this, container) || this;
            }
            TblNbResultGrid.prototype.getColumnsKey = function () { return 'Configs.TblNbResult'; };
            TblNbResultGrid.prototype.getDialogType = function () { return Configs.TblNbResultDialog; };
            TblNbResultGrid.prototype.getIdProperty = function () { return Configs.TblNbResultRow.idProperty; };
            TblNbResultGrid.prototype.getLocalTextPrefix = function () { return Configs.TblNbResultRow.localTextPrefix; };
            TblNbResultGrid.prototype.getService = function () { return Configs.TblNbResultService.baseUrl; };
            TblNbResultGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            TblNbResultGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TblNbResultGrid);
            return TblNbResultGrid;
        }(Serenity.EntityGrid));
        Configs.TblNbResultGrid = TblNbResultGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblNbstatusDialog = /** @class */ (function (_super) {
            __extends(TblNbstatusDialog, _super);
            function TblNbstatusDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.TblNbstatusForm(_this.idPrefix);
                return _this;
            }
            TblNbstatusDialog.prototype.getFormKey = function () { return Configs.TblNbstatusForm.formKey; };
            TblNbstatusDialog.prototype.getIdProperty = function () { return Configs.TblNbstatusRow.idProperty; };
            TblNbstatusDialog.prototype.getLocalTextPrefix = function () { return Configs.TblNbstatusRow.localTextPrefix; };
            TblNbstatusDialog.prototype.getNameProperty = function () { return Configs.TblNbstatusRow.nameProperty; };
            TblNbstatusDialog.prototype.getService = function () { return Configs.TblNbstatusService.baseUrl; };
            TblNbstatusDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblNbstatusDialog);
            return TblNbstatusDialog;
        }(Serenity.EntityDialog));
        Configs.TblNbstatusDialog = TblNbstatusDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblNbstatusGrid = /** @class */ (function (_super) {
            __extends(TblNbstatusGrid, _super);
            function TblNbstatusGrid(container) {
                return _super.call(this, container) || this;
            }
            TblNbstatusGrid.prototype.getColumnsKey = function () { return 'Configs.TblNbstatus'; };
            TblNbstatusGrid.prototype.getDialogType = function () { return Configs.TblNbstatusDialog; };
            TblNbstatusGrid.prototype.getIdProperty = function () { return Configs.TblNbstatusRow.idProperty; };
            TblNbstatusGrid.prototype.getLocalTextPrefix = function () { return Configs.TblNbstatusRow.localTextPrefix; };
            TblNbstatusGrid.prototype.getService = function () { return Configs.TblNbstatusService.baseUrl; };
            TblNbstatusGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            TblNbstatusGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TblNbstatusGrid);
            return TblNbstatusGrid;
        }(Serenity.EntityGrid));
        Configs.TblNbstatusGrid = TblNbstatusGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblNbWeightDialog = /** @class */ (function (_super) {
            __extends(TblNbWeightDialog, _super);
            function TblNbWeightDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.TblNbWeightForm(_this.idPrefix);
                return _this;
            }
            TblNbWeightDialog.prototype.getFormKey = function () { return Configs.TblNbWeightForm.formKey; };
            TblNbWeightDialog.prototype.getIdProperty = function () { return Configs.TblNbWeightRow.idProperty; };
            TblNbWeightDialog.prototype.getLocalTextPrefix = function () { return Configs.TblNbWeightRow.localTextPrefix; };
            TblNbWeightDialog.prototype.getNameProperty = function () { return Configs.TblNbWeightRow.nameProperty; };
            TblNbWeightDialog.prototype.getService = function () { return Configs.TblNbWeightService.baseUrl; };
            TblNbWeightDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblNbWeightDialog);
            return TblNbWeightDialog;
        }(Serenity.EntityDialog));
        Configs.TblNbWeightDialog = TblNbWeightDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblNbWeightGrid = /** @class */ (function (_super) {
            __extends(TblNbWeightGrid, _super);
            function TblNbWeightGrid(container) {
                return _super.call(this, container) || this;
            }
            TblNbWeightGrid.prototype.getColumnsKey = function () { return 'Configs.TblNbWeight'; };
            TblNbWeightGrid.prototype.getDialogType = function () { return Configs.TblNbWeightDialog; };
            TblNbWeightGrid.prototype.getIdProperty = function () { return Configs.TblNbWeightRow.idProperty; };
            TblNbWeightGrid.prototype.getLocalTextPrefix = function () { return Configs.TblNbWeightRow.localTextPrefix; };
            TblNbWeightGrid.prototype.getService = function () { return Configs.TblNbWeightService.baseUrl; };
            TblNbWeightGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            TblNbWeightGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TblNbWeightGrid);
            return TblNbWeightGrid;
        }(Serenity.EntityGrid));
        Configs.TblNbWeightGrid = TblNbWeightGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblOccupationDialog = /** @class */ (function (_super) {
            __extends(TblOccupationDialog, _super);
            function TblOccupationDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.TblOccupationForm(_this.idPrefix);
                return _this;
            }
            TblOccupationDialog.prototype.getFormKey = function () { return Configs.TblOccupationForm.formKey; };
            TblOccupationDialog.prototype.getIdProperty = function () { return Configs.TblOccupationRow.idProperty; };
            TblOccupationDialog.prototype.getLocalTextPrefix = function () { return Configs.TblOccupationRow.localTextPrefix; };
            TblOccupationDialog.prototype.getNameProperty = function () { return Configs.TblOccupationRow.nameProperty; };
            TblOccupationDialog.prototype.getService = function () { return Configs.TblOccupationService.baseUrl; };
            TblOccupationDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblOccupationDialog);
            return TblOccupationDialog;
        }(Serenity.EntityDialog));
        Configs.TblOccupationDialog = TblOccupationDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblOccupationGrid = /** @class */ (function (_super) {
            __extends(TblOccupationGrid, _super);
            function TblOccupationGrid(container) {
                return _super.call(this, container) || this;
            }
            TblOccupationGrid.prototype.getColumnsKey = function () { return 'Configs.TblOccupation'; };
            TblOccupationGrid.prototype.getDialogType = function () { return Configs.TblOccupationDialog; };
            TblOccupationGrid.prototype.getIdProperty = function () { return Configs.TblOccupationRow.idProperty; };
            TblOccupationGrid.prototype.getLocalTextPrefix = function () { return Configs.TblOccupationRow.localTextPrefix; };
            TblOccupationGrid.prototype.getService = function () { return Configs.TblOccupationService.baseUrl; };
            TblOccupationGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            TblOccupationGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TblOccupationGrid);
            return TblOccupationGrid;
        }(Serenity.EntityGrid));
        Configs.TblOccupationGrid = TblOccupationGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblOutcomesMotherDialog = /** @class */ (function (_super) {
            __extends(TblOutcomesMotherDialog, _super);
            function TblOutcomesMotherDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.TblOutcomesMotherForm(_this.idPrefix);
                return _this;
            }
            TblOutcomesMotherDialog.prototype.getFormKey = function () { return Configs.TblOutcomesMotherForm.formKey; };
            TblOutcomesMotherDialog.prototype.getIdProperty = function () { return Configs.TblOutcomesMotherRow.idProperty; };
            TblOutcomesMotherDialog.prototype.getLocalTextPrefix = function () { return Configs.TblOutcomesMotherRow.localTextPrefix; };
            TblOutcomesMotherDialog.prototype.getNameProperty = function () { return Configs.TblOutcomesMotherRow.nameProperty; };
            TblOutcomesMotherDialog.prototype.getService = function () { return Configs.TblOutcomesMotherService.baseUrl; };
            TblOutcomesMotherDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblOutcomesMotherDialog);
            return TblOutcomesMotherDialog;
        }(Serenity.EntityDialog));
        Configs.TblOutcomesMotherDialog = TblOutcomesMotherDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblOutcomesMotherGrid = /** @class */ (function (_super) {
            __extends(TblOutcomesMotherGrid, _super);
            function TblOutcomesMotherGrid(container) {
                return _super.call(this, container) || this;
            }
            TblOutcomesMotherGrid.prototype.getColumnsKey = function () { return 'Configs.TblOutcomesMother'; };
            TblOutcomesMotherGrid.prototype.getDialogType = function () { return Configs.TblOutcomesMotherDialog; };
            TblOutcomesMotherGrid.prototype.getIdProperty = function () { return Configs.TblOutcomesMotherRow.idProperty; };
            TblOutcomesMotherGrid.prototype.getLocalTextPrefix = function () { return Configs.TblOutcomesMotherRow.localTextPrefix; };
            TblOutcomesMotherGrid.prototype.getService = function () { return Configs.TblOutcomesMotherService.baseUrl; };
            TblOutcomesMotherGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            TblOutcomesMotherGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TblOutcomesMotherGrid);
            return TblOutcomesMotherGrid;
        }(Serenity.EntityGrid));
        Configs.TblOutcomesMotherGrid = TblOutcomesMotherGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblPositionsDialog = /** @class */ (function (_super) {
            __extends(TblPositionsDialog, _super);
            function TblPositionsDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.TblPositionsForm(_this.idPrefix);
                return _this;
            }
            TblPositionsDialog.prototype.getFormKey = function () { return Configs.TblPositionsForm.formKey; };
            TblPositionsDialog.prototype.getIdProperty = function () { return Configs.TblPositionsRow.idProperty; };
            TblPositionsDialog.prototype.getLocalTextPrefix = function () { return Configs.TblPositionsRow.localTextPrefix; };
            TblPositionsDialog.prototype.getNameProperty = function () { return Configs.TblPositionsRow.nameProperty; };
            TblPositionsDialog.prototype.getService = function () { return Configs.TblPositionsService.baseUrl; };
            TblPositionsDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblPositionsDialog);
            return TblPositionsDialog;
        }(Serenity.EntityDialog));
        Configs.TblPositionsDialog = TblPositionsDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblPositionsGrid = /** @class */ (function (_super) {
            __extends(TblPositionsGrid, _super);
            function TblPositionsGrid(container) {
                return _super.call(this, container) || this;
            }
            TblPositionsGrid.prototype.getColumnsKey = function () { return 'Configs.TblPositions'; };
            TblPositionsGrid.prototype.getDialogType = function () { return Configs.TblPositionsDialog; };
            TblPositionsGrid.prototype.getIdProperty = function () { return Configs.TblPositionsRow.idProperty; };
            TblPositionsGrid.prototype.getLocalTextPrefix = function () { return Configs.TblPositionsRow.localTextPrefix; };
            TblPositionsGrid.prototype.getService = function () { return Configs.TblPositionsService.baseUrl; };
            TblPositionsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            TblPositionsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TblPositionsGrid);
            return TblPositionsGrid;
        }(Serenity.EntityGrid));
        Configs.TblPositionsGrid = TblPositionsGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblProfessionsDialog = /** @class */ (function (_super) {
            __extends(TblProfessionsDialog, _super);
            function TblProfessionsDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.TblProfessionsForm(_this.idPrefix);
                return _this;
            }
            TblProfessionsDialog.prototype.getFormKey = function () { return Configs.TblProfessionsForm.formKey; };
            TblProfessionsDialog.prototype.getIdProperty = function () { return Configs.TblProfessionsRow.idProperty; };
            TblProfessionsDialog.prototype.getLocalTextPrefix = function () { return Configs.TblProfessionsRow.localTextPrefix; };
            TblProfessionsDialog.prototype.getNameProperty = function () { return Configs.TblProfessionsRow.nameProperty; };
            TblProfessionsDialog.prototype.getService = function () { return Configs.TblProfessionsService.baseUrl; };
            TblProfessionsDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblProfessionsDialog);
            return TblProfessionsDialog;
        }(Serenity.EntityDialog));
        Configs.TblProfessionsDialog = TblProfessionsDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblProfessionsGrid = /** @class */ (function (_super) {
            __extends(TblProfessionsGrid, _super);
            function TblProfessionsGrid(container) {
                return _super.call(this, container) || this;
            }
            TblProfessionsGrid.prototype.getColumnsKey = function () { return 'Configs.TblProfessions'; };
            TblProfessionsGrid.prototype.getDialogType = function () { return Configs.TblProfessionsDialog; };
            TblProfessionsGrid.prototype.getIdProperty = function () { return Configs.TblProfessionsRow.idProperty; };
            TblProfessionsGrid.prototype.getLocalTextPrefix = function () { return Configs.TblProfessionsRow.localTextPrefix; };
            TblProfessionsGrid.prototype.getService = function () { return Configs.TblProfessionsService.baseUrl; };
            TblProfessionsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            TblProfessionsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TblProfessionsGrid);
            return TblProfessionsGrid;
        }(Serenity.EntityGrid));
        Configs.TblProfessionsGrid = TblProfessionsGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblRelationDialog = /** @class */ (function (_super) {
            __extends(TblRelationDialog, _super);
            function TblRelationDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.TblRelationForm(_this.idPrefix);
                return _this;
            }
            TblRelationDialog.prototype.getFormKey = function () { return Configs.TblRelationForm.formKey; };
            TblRelationDialog.prototype.getIdProperty = function () { return Configs.TblRelationRow.idProperty; };
            TblRelationDialog.prototype.getLocalTextPrefix = function () { return Configs.TblRelationRow.localTextPrefix; };
            TblRelationDialog.prototype.getNameProperty = function () { return Configs.TblRelationRow.nameProperty; };
            TblRelationDialog.prototype.getService = function () { return Configs.TblRelationService.baseUrl; };
            TblRelationDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblRelationDialog);
            return TblRelationDialog;
        }(Serenity.EntityDialog));
        Configs.TblRelationDialog = TblRelationDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblRelationGrid = /** @class */ (function (_super) {
            __extends(TblRelationGrid, _super);
            function TblRelationGrid(container) {
                return _super.call(this, container) || this;
            }
            TblRelationGrid.prototype.getColumnsKey = function () { return 'Configs.TblRelation'; };
            TblRelationGrid.prototype.getDialogType = function () { return Configs.TblRelationDialog; };
            TblRelationGrid.prototype.getIdProperty = function () { return Configs.TblRelationRow.idProperty; };
            TblRelationGrid.prototype.getLocalTextPrefix = function () { return Configs.TblRelationRow.localTextPrefix; };
            TblRelationGrid.prototype.getService = function () { return Configs.TblRelationService.baseUrl; };
            TblRelationGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            TblRelationGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TblRelationGrid);
            return TblRelationGrid;
        }(Serenity.EntityGrid));
        Configs.TblRelationGrid = TblRelationGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblWardGrid = /** @class */ (function (_super) {
            __extends(TblWardGrid, _super);
            function TblWardGrid(container) {
                return _super.call(this, container) || this;
            }
            TblWardGrid.prototype.getColumnsKey = function () { return 'Configs.TblWard'; };
            TblWardGrid.prototype.getDialogType = function () { return Configs.TblWardDialog; };
            TblWardGrid.prototype.getIdProperty = function () { return Configs.TblWardRow.idProperty; };
            TblWardGrid.prototype.getLocalTextPrefix = function () { return Configs.TblWardRow.localTextPrefix; };
            TblWardGrid.prototype.getService = function () { return Configs.TblWardService.baseUrl; };
            TblWardGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            TblWardGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TblWardGrid);
            return TblWardGrid;
        }(Serenity.EntityGrid));
        Configs.TblWardGrid = TblWardGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
/// <reference path="tblwardgrid.ts" />
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblWardCheckGrid = /** @class */ (function (_super) {
            __extends(TblWardCheckGrid, _super);
            function TblWardCheckGrid(container) {
                var _this = _super.call(this, container) || this;
                _this.rowSelection = new Serenity.GridRowSelectionMixin(_this);
                return _this;
            }
            TblWardCheckGrid.prototype.getColumnsKey = function () { return "Configs.TblWard"; };
            TblWardCheckGrid.prototype.getDialogType = function () { return Configs.TblWardDialog; };
            TblWardCheckGrid.prototype.getIdProperty = function () { return Configs.TblWardRow.idProperty; };
            TblWardCheckGrid.prototype.getLocalTextPrefix = function () { return Configs.TblWardRow.localTextPrefix; };
            TblWardCheckGrid.prototype.getService = function () { return Configs.TblWardService.baseUrl; };
            TblWardCheckGrid.prototype.getColumns = function () {
                var _this = this;
                var columns = _super.prototype.getColumns.call(this);
                columns.splice(0, 0, Serenity.GridRowSelectionMixin.createSelectColumn(function () { return _this.rowSelection; }));
                return columns;
            };
            TblWardCheckGrid.prototype.usePager = function () {
                return false;
            };
            TblWardCheckGrid.prototype.getInitialTitle = function () {
                return null;
            };
            TblWardCheckGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons = buttons.filter(function (x) { return x.cssClass != 'add-button'; });
                return buttons;
            };
            Object.defineProperty(TblWardCheckGrid.prototype, "selectedItems", {
                get: function () {
                    var _this = this;
                    return this.rowSelection.getSelectedAsInt32().map(function (x) { return _this.view.getItemById(x); });
                },
                enumerable: true,
                configurable: true
            });
            TblWardCheckGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TblWardCheckGrid);
            return TblWardCheckGrid;
        }(Serenity.EntityGrid));
        Configs.TblWardCheckGrid = TblWardCheckGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblWardDialog = /** @class */ (function (_super) {
            __extends(TblWardDialog, _super);
            function TblWardDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.TblWardForm(_this.idPrefix);
                return _this;
            }
            TblWardDialog.prototype.getFormKey = function () { return Configs.TblWardForm.formKey; };
            TblWardDialog.prototype.getIdProperty = function () { return Configs.TblWardRow.idProperty; };
            TblWardDialog.prototype.getLocalTextPrefix = function () { return Configs.TblWardRow.localTextPrefix; };
            TblWardDialog.prototype.getNameProperty = function () { return Configs.TblWardRow.nameProperty; };
            TblWardDialog.prototype.getService = function () { return Configs.TblWardService.baseUrl; };
            TblWardDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblWardDialog);
            return TblWardDialog;
        }(Serenity.EntityDialog));
        Configs.TblWardDialog = TblWardDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblWardPickerDialog = /** @class */ (function (_super) {
            __extends(TblWardPickerDialog, _super);
            function TblWardPickerDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Configs.TblWardForm(_this.idPrefix);
                _this.checkGrid = new Configs.TblWardCheckGrid(_this.byId("CheckGrid"));
                _this.dialogTitle = "Select Wards";
                return _this;
            }
            TblWardPickerDialog.prototype.getFormKey = function () { return Configs.TblWardForm.formKey; };
            TblWardPickerDialog.prototype.getIdProperty = function () { return Configs.TblWardRow.idProperty; };
            TblWardPickerDialog.prototype.getLocalTextPrefix = function () { return Configs.TblWardRow.localTextPrefix; };
            TblWardPickerDialog.prototype.getNameProperty = function () { return Configs.TblWardRow.nameProperty; };
            TblWardPickerDialog.prototype.getService = function () { return Configs.TblWardService.baseUrl; };
            TblWardPickerDialog.prototype.getTemplate = function () {
                return "<div id=\"~_CheckGrid\"></div>";
            };
            TblWardPickerDialog.prototype.getDialogOptions = function () {
                var _this = this;
                var opt = _super.prototype.getDialogOptions.call(this);
                opt.buttons = [
                    {
                        text: Q.text("Dialogs.OkButton"),
                        click: function () {
                            var selected = _this.checkGrid.selectedItems;
                            if (!selected.length) {
                                Q.notifyWarning("Please select ward!");
                                return;
                            }
                            if (!_this.onSuccess || _this.onSuccess(selected))
                                _this.dialogClose();
                        }
                    },
                    {
                        text: Q.text("Dialogs.CancelButton"),
                        click: function () {
                            _this.dialogClose();
                        }
                    }
                ];
                return opt;
            };
            Object.defineProperty(TblWardPickerDialog.prototype, "selectedItems", {
                get: function () {
                    return this.checkGrid.selectedItems;
                },
                enumerable: true,
                configurable: true
            });
            TblWardPickerDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], TblWardPickerDialog);
            return TblWardPickerDialog;
        }(Serenity.EntityDialog));
        Configs.TblWardPickerDialog = TblWardPickerDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblWardDiseasesDialog = /** @class */ (function (_super) {
            __extends(TblWardDiseasesDialog, _super);
            function TblWardDiseasesDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.TblWardDiseasesForm(_this.idPrefix);
                return _this;
            }
            TblWardDiseasesDialog.prototype.getFormKey = function () { return Configs.TblWardDiseasesForm.formKey; };
            TblWardDiseasesDialog.prototype.getIdProperty = function () { return Configs.TblWardDiseasesRow.idProperty; };
            TblWardDiseasesDialog.prototype.getLocalTextPrefix = function () { return Configs.TblWardDiseasesRow.localTextPrefix; };
            TblWardDiseasesDialog.prototype.getNameProperty = function () { return Configs.TblWardDiseasesRow.nameProperty; };
            TblWardDiseasesDialog.prototype.getService = function () { return Configs.TblWardDiseasesService.baseUrl; };
            TblWardDiseasesDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblWardDiseasesDialog);
            return TblWardDiseasesDialog;
        }(Serenity.EntityDialog));
        Configs.TblWardDiseasesDialog = TblWardDiseasesDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblWardDiseasesGrid = /** @class */ (function (_super) {
            __extends(TblWardDiseasesGrid, _super);
            function TblWardDiseasesGrid(container) {
                return _super.call(this, container) || this;
            }
            TblWardDiseasesGrid.prototype.getColumnsKey = function () { return 'Configs.TblWardDiseases'; };
            TblWardDiseasesGrid.prototype.getDialogType = function () { return Configs.TblWardDiseasesDialog; };
            TblWardDiseasesGrid.prototype.getIdProperty = function () { return Configs.TblWardDiseasesRow.idProperty; };
            TblWardDiseasesGrid.prototype.getLocalTextPrefix = function () { return Configs.TblWardDiseasesRow.localTextPrefix; };
            TblWardDiseasesGrid.prototype.getService = function () { return Configs.TblWardDiseasesService.baseUrl; };
            TblWardDiseasesGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            TblWardDiseasesGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TblWardDiseasesGrid);
            return TblWardDiseasesGrid;
        }(Serenity.EntityGrid));
        Configs.TblWardDiseasesGrid = TblWardDiseasesGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblWrdVarDialog = /** @class */ (function (_super) {
            __extends(TblWrdVarDialog, _super);
            function TblWrdVarDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.TblWrdVarForm(_this.idPrefix);
                return _this;
            }
            TblWrdVarDialog.prototype.getFormKey = function () { return Configs.TblWrdVarForm.formKey; };
            TblWrdVarDialog.prototype.getIdProperty = function () { return Configs.TblWrdVarRow.idProperty; };
            TblWrdVarDialog.prototype.getLocalTextPrefix = function () { return Configs.TblWrdVarRow.localTextPrefix; };
            TblWrdVarDialog.prototype.getNameProperty = function () { return Configs.TblWrdVarRow.nameProperty; };
            TblWrdVarDialog.prototype.getService = function () { return Configs.TblWrdVarService.baseUrl; };
            TblWrdVarDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblWrdVarDialog);
            return TblWrdVarDialog;
        }(Serenity.EntityDialog));
        Configs.TblWrdVarDialog = TblWrdVarDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TblWrdVarGrid = /** @class */ (function (_super) {
            __extends(TblWrdVarGrid, _super);
            function TblWrdVarGrid(container) {
                return _super.call(this, container) || this;
            }
            TblWrdVarGrid.prototype.getColumnsKey = function () { return 'Configs.TblWrdVar'; };
            TblWrdVarGrid.prototype.getDialogType = function () { return Configs.TblWrdVarDialog; };
            TblWrdVarGrid.prototype.getIdProperty = function () { return Configs.TblWrdVarRow.idProperty; };
            TblWrdVarGrid.prototype.getLocalTextPrefix = function () { return Configs.TblWrdVarRow.localTextPrefix; };
            TblWrdVarGrid.prototype.getService = function () { return Configs.TblWrdVarService.baseUrl; };
            TblWrdVarGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            TblWrdVarGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TblWrdVarGrid);
            return TblWrdVarGrid;
        }(Serenity.EntityGrid));
        Configs.TblWrdVarGrid = TblWrdVarGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TopographyMainDialog = /** @class */ (function (_super) {
            __extends(TopographyMainDialog, _super);
            function TopographyMainDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.TopographyMainForm(_this.idPrefix);
                return _this;
            }
            TopographyMainDialog.prototype.getFormKey = function () { return Configs.TopographyMainForm.formKey; };
            TopographyMainDialog.prototype.getIdProperty = function () { return Configs.TopographyMainRow.idProperty; };
            TopographyMainDialog.prototype.getLocalTextPrefix = function () { return Configs.TopographyMainRow.localTextPrefix; };
            TopographyMainDialog.prototype.getNameProperty = function () { return Configs.TopographyMainRow.nameProperty; };
            TopographyMainDialog.prototype.getService = function () { return Configs.TopographyMainService.baseUrl; };
            TopographyMainDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TopographyMainDialog);
            return TopographyMainDialog;
        }(Serenity.EntityDialog));
        Configs.TopographyMainDialog = TopographyMainDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TopographyMainGrid = /** @class */ (function (_super) {
            __extends(TopographyMainGrid, _super);
            function TopographyMainGrid(container) {
                return _super.call(this, container) || this;
            }
            TopographyMainGrid.prototype.getColumnsKey = function () { return 'Configs.TopographyMain'; };
            TopographyMainGrid.prototype.getDialogType = function () { return Configs.TopographyMainDialog; };
            TopographyMainGrid.prototype.getIdProperty = function () { return Configs.TopographyMainRow.idProperty; };
            TopographyMainGrid.prototype.getLocalTextPrefix = function () { return Configs.TopographyMainRow.localTextPrefix; };
            TopographyMainGrid.prototype.getService = function () { return Configs.TopographyMainService.baseUrl; };
            TopographyMainGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TopographyMainGrid);
            return TopographyMainGrid;
        }(Serenity.EntityGrid));
        Configs.TopographyMainGrid = TopographyMainGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TopographySubDialog = /** @class */ (function (_super) {
            __extends(TopographySubDialog, _super);
            function TopographySubDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.TopographySubForm(_this.idPrefix);
                return _this;
            }
            TopographySubDialog.prototype.getFormKey = function () { return Configs.TopographySubForm.formKey; };
            TopographySubDialog.prototype.getIdProperty = function () { return Configs.TopographySubRow.idProperty; };
            TopographySubDialog.prototype.getLocalTextPrefix = function () { return Configs.TopographySubRow.localTextPrefix; };
            TopographySubDialog.prototype.getNameProperty = function () { return Configs.TopographySubRow.nameProperty; };
            TopographySubDialog.prototype.getService = function () { return Configs.TopographySubService.baseUrl; };
            TopographySubDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TopographySubDialog);
            return TopographySubDialog;
        }(Serenity.EntityDialog));
        Configs.TopographySubDialog = TopographySubDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TopographySubGrid = /** @class */ (function (_super) {
            __extends(TopographySubGrid, _super);
            function TopographySubGrid(container) {
                return _super.call(this, container) || this;
            }
            TopographySubGrid.prototype.getColumnsKey = function () { return 'Configs.TopographySub'; };
            TopographySubGrid.prototype.getDialogType = function () { return Configs.TopographySubDialog; };
            TopographySubGrid.prototype.getIdProperty = function () { return Configs.TopographySubRow.idProperty; };
            TopographySubGrid.prototype.getLocalTextPrefix = function () { return Configs.TopographySubRow.localTextPrefix; };
            TopographySubGrid.prototype.getService = function () { return Configs.TopographySubService.baseUrl; };
            TopographySubGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TopographySubGrid);
            return TopographySubGrid;
        }(Serenity.EntityGrid));
        Configs.TopographySubGrid = TopographySubGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TypeofvisitDialog = /** @class */ (function (_super) {
            __extends(TypeofvisitDialog, _super);
            function TypeofvisitDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Configs.TypeofvisitForm(_this.idPrefix);
                return _this;
            }
            TypeofvisitDialog.prototype.getFormKey = function () { return Configs.TypeofvisitForm.formKey; };
            TypeofvisitDialog.prototype.getIdProperty = function () { return Configs.TypeofvisitRow.idProperty; };
            TypeofvisitDialog.prototype.getLocalTextPrefix = function () { return Configs.TypeofvisitRow.localTextPrefix; };
            TypeofvisitDialog.prototype.getNameProperty = function () { return Configs.TypeofvisitRow.nameProperty; };
            TypeofvisitDialog.prototype.getService = function () { return Configs.TypeofvisitService.baseUrl; };
            TypeofvisitDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TypeofvisitDialog);
            return TypeofvisitDialog;
        }(Serenity.EntityDialog));
        Configs.TypeofvisitDialog = TypeofvisitDialog;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Configs;
    (function (Configs) {
        var TypeofvisitGrid = /** @class */ (function (_super) {
            __extends(TypeofvisitGrid, _super);
            function TypeofvisitGrid(container) {
                return _super.call(this, container) || this;
            }
            TypeofvisitGrid.prototype.getColumnsKey = function () { return 'Configs.Typeofvisit'; };
            TypeofvisitGrid.prototype.getDialogType = function () { return Configs.TypeofvisitDialog; };
            TypeofvisitGrid.prototype.getIdProperty = function () { return Configs.TypeofvisitRow.idProperty; };
            TypeofvisitGrid.prototype.getLocalTextPrefix = function () { return Configs.TypeofvisitRow.localTextPrefix; };
            TypeofvisitGrid.prototype.getService = function () { return Configs.TypeofvisitService.baseUrl; };
            TypeofvisitGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            TypeofvisitGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TypeofvisitGrid);
            return TypeofvisitGrid;
        }(Serenity.EntityGrid));
        Configs.TypeofvisitGrid = TypeofvisitGrid;
    })(Configs = EMR.Configs || (EMR.Configs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var FM;
    (function (FM) {
        var LkpServicesDialog = /** @class */ (function (_super) {
            __extends(LkpServicesDialog, _super);
            function LkpServicesDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new FM.LkpServicesForm(_this.idPrefix);
                return _this;
            }
            LkpServicesDialog.prototype.getFormKey = function () { return FM.LkpServicesForm.formKey; };
            LkpServicesDialog.prototype.getIdProperty = function () { return FM.LkpServicesRow.idProperty; };
            LkpServicesDialog.prototype.getLocalTextPrefix = function () { return FM.LkpServicesRow.localTextPrefix; };
            LkpServicesDialog.prototype.getNameProperty = function () { return FM.LkpServicesRow.nameProperty; };
            LkpServicesDialog.prototype.getService = function () { return FM.LkpServicesService.baseUrl; };
            LkpServicesDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], LkpServicesDialog);
            return LkpServicesDialog;
        }(Serenity.EntityDialog));
        FM.LkpServicesDialog = LkpServicesDialog;
    })(FM = EMR.FM || (EMR.FM = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var FM;
    (function (FM) {
        var LkpServicesGrid = /** @class */ (function (_super) {
            __extends(LkpServicesGrid, _super);
            function LkpServicesGrid(container) {
                return _super.call(this, container) || this;
            }
            LkpServicesGrid.prototype.getColumnsKey = function () { return 'FM.LkpServices'; };
            LkpServicesGrid.prototype.getDialogType = function () { return FM.LkpServicesDialog; };
            LkpServicesGrid.prototype.getIdProperty = function () { return FM.LkpServicesRow.idProperty; };
            LkpServicesGrid.prototype.getLocalTextPrefix = function () { return FM.LkpServicesRow.localTextPrefix; };
            LkpServicesGrid.prototype.getService = function () { return FM.LkpServicesService.baseUrl; };
            LkpServicesGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            LkpServicesGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], LkpServicesGrid);
            return LkpServicesGrid;
        }(Serenity.EntityGrid));
        FM.LkpServicesGrid = LkpServicesGrid;
    })(FM = EMR.FM || (EMR.FM = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var FM;
    (function (FM) {
        var LkpServiceTypesDialog = /** @class */ (function (_super) {
            __extends(LkpServiceTypesDialog, _super);
            function LkpServiceTypesDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new FM.LkpServiceTypesForm(_this.idPrefix);
                return _this;
            }
            LkpServiceTypesDialog.prototype.getFormKey = function () { return FM.LkpServiceTypesForm.formKey; };
            LkpServiceTypesDialog.prototype.getIdProperty = function () { return FM.LkpServiceTypesRow.idProperty; };
            LkpServiceTypesDialog.prototype.getLocalTextPrefix = function () { return FM.LkpServiceTypesRow.localTextPrefix; };
            LkpServiceTypesDialog.prototype.getNameProperty = function () { return FM.LkpServiceTypesRow.nameProperty; };
            LkpServiceTypesDialog.prototype.getService = function () { return FM.LkpServiceTypesService.baseUrl; };
            LkpServiceTypesDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], LkpServiceTypesDialog);
            return LkpServiceTypesDialog;
        }(Serenity.EntityDialog));
        FM.LkpServiceTypesDialog = LkpServiceTypesDialog;
    })(FM = EMR.FM || (EMR.FM = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var FM;
    (function (FM) {
        var LkpServiceTypesGrid = /** @class */ (function (_super) {
            __extends(LkpServiceTypesGrid, _super);
            function LkpServiceTypesGrid(container) {
                return _super.call(this, container) || this;
            }
            LkpServiceTypesGrid.prototype.getColumnsKey = function () { return 'FM.LkpServiceTypes'; };
            LkpServiceTypesGrid.prototype.getDialogType = function () { return FM.LkpServiceTypesDialog; };
            LkpServiceTypesGrid.prototype.getIdProperty = function () { return FM.LkpServiceTypesRow.idProperty; };
            LkpServiceTypesGrid.prototype.getLocalTextPrefix = function () { return FM.LkpServiceTypesRow.localTextPrefix; };
            LkpServiceTypesGrid.prototype.getService = function () { return FM.LkpServiceTypesService.baseUrl; };
            LkpServiceTypesGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            LkpServiceTypesGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], LkpServiceTypesGrid);
            return LkpServiceTypesGrid;
        }(Serenity.EntityGrid));
        FM.LkpServiceTypesGrid = LkpServiceTypesGrid;
    })(FM = EMR.FM || (EMR.FM = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var FM;
    (function (FM) {
        var TblFeePaymentDialog = /** @class */ (function (_super) {
            __extends(TblFeePaymentDialog, _super);
            function TblFeePaymentDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new FM.TblFeePaymentForm(_this.idPrefix);
                return _this;
            }
            TblFeePaymentDialog.prototype.getFormKey = function () { return FM.TblFeePaymentForm.formKey; };
            TblFeePaymentDialog.prototype.getIdProperty = function () { return FM.TblFeePaymentRow.idProperty; };
            TblFeePaymentDialog.prototype.getLocalTextPrefix = function () { return FM.TblFeePaymentRow.localTextPrefix; };
            TblFeePaymentDialog.prototype.getService = function () { return FM.TblFeePaymentService.baseUrl; };
            TblFeePaymentDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblFeePaymentDialog);
            return TblFeePaymentDialog;
        }(Serenity.EntityDialog));
        FM.TblFeePaymentDialog = TblFeePaymentDialog;
    })(FM = EMR.FM || (EMR.FM = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var FM;
    (function (FM) {
        var TblFeePaymentGrid = /** @class */ (function (_super) {
            __extends(TblFeePaymentGrid, _super);
            function TblFeePaymentGrid(container) {
                return _super.call(this, container) || this;
            }
            TblFeePaymentGrid.prototype.getColumnsKey = function () { return 'FM.TblFeePayment'; };
            TblFeePaymentGrid.prototype.getDialogType = function () { return FM.TblFeePaymentDialog; };
            TblFeePaymentGrid.prototype.getIdProperty = function () { return FM.TblFeePaymentRow.idProperty; };
            TblFeePaymentGrid.prototype.getLocalTextPrefix = function () { return FM.TblFeePaymentRow.localTextPrefix; };
            TblFeePaymentGrid.prototype.getService = function () { return FM.TblFeePaymentService.baseUrl; };
            TblFeePaymentGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                return buttons;
            };
            TblFeePaymentGrid.prototype.createToolbar = function () {
            };
            TblFeePaymentGrid.prototype.createQuickSearchInput = function () {
            };
            TblFeePaymentGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TblFeePaymentGrid);
            return TblFeePaymentGrid;
        }(Serenity.EntityGrid));
        FM.TblFeePaymentGrid = TblFeePaymentGrid;
    })(FM = EMR.FM || (EMR.FM = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var FM;
    (function (FM) {
        var TblPrintDetailsDialog = /** @class */ (function (_super) {
            __extends(TblPrintDetailsDialog, _super);
            function TblPrintDetailsDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new FM.TblPrintDetailsForm(_this.idPrefix);
                return _this;
            }
            TblPrintDetailsDialog.prototype.getFormKey = function () { return FM.TblPrintDetailsForm.formKey; };
            TblPrintDetailsDialog.prototype.getIdProperty = function () { return FM.TblPrintDetailsRow.idProperty; };
            TblPrintDetailsDialog.prototype.getLocalTextPrefix = function () { return FM.TblPrintDetailsRow.localTextPrefix; };
            TblPrintDetailsDialog.prototype.getNameProperty = function () { return FM.TblPrintDetailsRow.nameProperty; };
            TblPrintDetailsDialog.prototype.getService = function () { return FM.TblPrintDetailsService.baseUrl; };
            TblPrintDetailsDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblPrintDetailsDialog);
            return TblPrintDetailsDialog;
        }(Serenity.EntityDialog));
        FM.TblPrintDetailsDialog = TblPrintDetailsDialog;
    })(FM = EMR.FM || (EMR.FM = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var FM;
    (function (FM) {
        var TblPrintDetailsGrid = /** @class */ (function (_super) {
            __extends(TblPrintDetailsGrid, _super);
            function TblPrintDetailsGrid(container) {
                return _super.call(this, container) || this;
            }
            TblPrintDetailsGrid.prototype.getColumnsKey = function () { return 'FM.TblPrintDetails'; };
            TblPrintDetailsGrid.prototype.getDialogType = function () { return FM.TblPrintDetailsDialog; };
            TblPrintDetailsGrid.prototype.getIdProperty = function () { return FM.TblPrintDetailsRow.idProperty; };
            TblPrintDetailsGrid.prototype.getLocalTextPrefix = function () { return FM.TblPrintDetailsRow.localTextPrefix; };
            TblPrintDetailsGrid.prototype.getService = function () { return FM.TblPrintDetailsService.baseUrl; };
            TblPrintDetailsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            TblPrintDetailsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TblPrintDetailsGrid);
            return TblPrintDetailsGrid;
        }(Serenity.EntityGrid));
        FM.TblPrintDetailsGrid = TblPrintDetailsGrid;
    })(FM = EMR.FM || (EMR.FM = {}));
})(EMR || (EMR = {}));
/// <reference path="../tblfeepayment/tblfeepaymentdialog.ts" />
var EMR;
(function (EMR) {
    var FM;
    (function (FM) {
        var TblFeePaymentTabDialog = /** @class */ (function (_super) {
            __extends(TblFeePaymentTabDialog, _super);
            function TblFeePaymentTabDialog() {
                return _super.call(this) || this;
            }
            TblFeePaymentTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.Mrid, true);
            };
            TblFeePaymentTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblFeePaymentTabDialog);
            return TblFeePaymentTabDialog;
        }(FM.TblFeePaymentDialog));
        FM.TblFeePaymentTabDialog = TblFeePaymentTabDialog;
    })(FM = EMR.FM || (EMR.FM = {}));
})(EMR || (EMR = {}));
/// <reference path="../tblfeepayment/tblfeepaymentgrid.ts" />
var EMR;
(function (EMR) {
    var FM;
    (function (FM) {
        var TblFeePaymentTabGrid = /** @class */ (function (_super) {
            __extends(TblFeePaymentTabGrid, _super);
            function TblFeePaymentTabGrid(container) {
                return _super.call(this, container) || this;
            }
            TblFeePaymentTabGrid.prototype.getDialogType = function () { return FM.TblFeePaymentTabDialog; };
            TblFeePaymentTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            TblFeePaymentTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            TblFeePaymentTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            TblFeePaymentTabGrid.prototype.addButtonClick = function () {
                this.editItem({ Mrid: this.Mrid });
            };
            TblFeePaymentTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            TblFeePaymentTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.Mrid;
            };
            Object.defineProperty(TblFeePaymentTabGrid.prototype, "Mrid", {
                get: function () {
                    return this._Mrid;
                },
                set: function (value) {
                    if (this._Mrid !== value) {
                        this._Mrid = value;
                        this.setEquality('Mrid', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            TblFeePaymentTabGrid = __decorate([
                Serenity.Decorators.filterable(),
                Serenity.Decorators.registerClass()
            ], TblFeePaymentTabGrid);
            return TblFeePaymentTabGrid;
        }(FM.TblFeePaymentGrid));
        FM.TblFeePaymentTabGrid = TblFeePaymentTabGrid;
    })(FM = EMR.FM || (EMR.FM = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var FM;
    (function (FM) {
        var UserFeePatientsDialog = /** @class */ (function (_super) {
            __extends(UserFeePatientsDialog, _super);
            function UserFeePatientsDialog() {
                var _this = _super.call(this) || this;
                _this.form = new FM.UserFeePatientsForm(_this.idPrefix);
                _this.form.FacilityId.changeSelect2(function (e) {
                    var facilityId = _this.form.FacilityId.value;
                    if (facilityId == null || facilityId == undefined) {
                        _this.setMRN({});
                        return;
                    }
                    var id = Serenity.EditorUtils.getValue(_this.form.FacilityId);
                    EMR.Regs.HfNoOfPatientsService.Retrieve({
                        EntityId: id
                    }, function (response) {
                        _this.setMRN(response.Entity);
                    });
                });
                _this.feePaymentGrid = new FM.TblFeePaymentTabGrid(_this.byId('TblFeePaymentGrid'));
                _this.feePaymentGrid.openDialogsAsPanel = false;
                EMR.DialogUtils.pendingChangesConfirmation(_this.element, function () { return _this.getSaveState() != _this.loadedState; });
                return _this;
            }
            UserFeePatientsDialog.prototype.getFormKey = function () { return FM.UserFeePatientsForm.formKey; };
            UserFeePatientsDialog.prototype.getIdProperty = function () { return FM.UserFeePatientsRow.idProperty; };
            UserFeePatientsDialog.prototype.getLocalTextPrefix = function () { return FM.UserFeePatientsRow.localTextPrefix; };
            UserFeePatientsDialog.prototype.getNameProperty = function () { return FM.UserFeePatientsRow.nameProperty; };
            UserFeePatientsDialog.prototype.getService = function () { return FM.UserFeePatientsService.baseUrl; };
            UserFeePatientsDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.push({
                    title: 'Add Fee',
                    cssClass: 'multiple-add-button',
                    hint: "Add Service Fee",
                    onClick: function () {
                        window.location.href = Q.resolveUrl('~/FM/ServiceFee/Add?id=' + _this.entity.Mrid);
                    }
                });
                return buttons;
            };
            UserFeePatientsDialog.prototype.getSaveState = function () {
                try {
                    return $.toJSON(this.getSaveEntity());
                }
                catch (e) {
                    return null;
                }
            };
            UserFeePatientsDialog.prototype.loadResponse = function (data) {
                _super.prototype.loadResponse.call(this, data);
                this.loadedState = this.getSaveState();
            };
            UserFeePatientsDialog.prototype.loadEntity = function (entity) {
                _super.prototype.loadEntity.call(this, entity);
                Serenity.TabsExtensions.setDisabled(this.tabs, 'TblFeePayment', this.isNewOrDeleted());
                this.feePaymentGrid.Mrid = entity.Mrid;
            };
            UserFeePatientsDialog.prototype.setMRN = function (details) {
                var facilityPart;
                var facilityIdPart;
                var MNRPart;
                var MNRIdPart;
                facilityPart = 1000000;
                MNRPart = 1000000000;
                facilityIdPart = (details.FacilityId);
                MNRIdPart = (MNRPart + details.NoOfPatients + 1);
                this.form.Mrn.value = details.FacilityId + '-' + MNRIdPart.toString().substring(1);
            };
            UserFeePatientsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], UserFeePatientsDialog);
            return UserFeePatientsDialog;
        }(Serenity.EntityDialog));
        FM.UserFeePatientsDialog = UserFeePatientsDialog;
    })(FM = EMR.FM || (EMR.FM = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var FM;
    (function (FM) {
        var UserFeePatientsGrid = /** @class */ (function (_super) {
            __extends(UserFeePatientsGrid, _super);
            function UserFeePatientsGrid(container) {
                return _super.call(this, container) || this;
            }
            UserFeePatientsGrid.prototype.getColumnsKey = function () { return 'FM.UserFeePatients'; };
            UserFeePatientsGrid.prototype.getDialogType = function () { return FM.UserFeePatientsDialog; };
            UserFeePatientsGrid.prototype.getIdProperty = function () { return FM.UserFeePatientsRow.idProperty; };
            UserFeePatientsGrid.prototype.getLocalTextPrefix = function () { return FM.UserFeePatientsRow.localTextPrefix; };
            UserFeePatientsGrid.prototype.getService = function () { return FM.UserFeePatientsService.baseUrl; };
            UserFeePatientsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], UserFeePatientsGrid);
            return UserFeePatientsGrid;
        }(Serenity.EntityGrid));
        FM.UserFeePatientsGrid = UserFeePatientsGrid;
    })(FM = EMR.FM || (EMR.FM = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Imaging;
    (function (Imaging) {
        var ImagePatientsDialog = /** @class */ (function (_super) {
            __extends(ImagePatientsDialog, _super);
            function ImagePatientsDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Imaging.ImagePatientsForm(_this.idPrefix);
                _this.imagePatients = new Imaging.ImagevisitsTabGrid(_this.byId('ImagevisitsGrid'));
                _this.imagePatients.openDialogsAsPanel = true;
                EMR.DialogUtils.pendingChangesConfirmation(_this.element, function () { return _this.getSaveState() != _this.loadedState; });
                return _this;
            }
            ImagePatientsDialog.prototype.getFormKey = function () { return Imaging.ImagePatientsForm.formKey; };
            ImagePatientsDialog.prototype.getIdProperty = function () { return Imaging.ImagePatientsRow.idProperty; };
            ImagePatientsDialog.prototype.getLocalTextPrefix = function () { return Imaging.ImagePatientsRow.localTextPrefix; };
            ImagePatientsDialog.prototype.getNameProperty = function () { return Imaging.ImagePatientsRow.nameProperty; };
            ImagePatientsDialog.prototype.getService = function () { return Imaging.ImagePatientsService.baseUrl; };
            ImagePatientsDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }), 1);
                // We could also remove delete button here, but for demonstration 
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                return buttons;
            };
            ImagePatientsDialog.prototype.getSaveState = function () {
                try {
                    return $.toJSON(this.getSaveEntity());
                }
                catch (e) {
                    return null;
                }
            };
            ImagePatientsDialog.prototype.loadResponse = function (data) {
                _super.prototype.loadResponse.call(this, data);
                this.loadedState = this.getSaveState();
            };
            ImagePatientsDialog.prototype.loadEntity = function (entity) {
                _super.prototype.loadEntity.call(this, entity);
                Serenity.TabsExtensions.setDisabled(this.tabs, 'Imagevisits', this.isNewOrDeleted());
                this.imagePatients.MrId = entity.Mrid;
            };
            ImagePatientsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], ImagePatientsDialog);
            return ImagePatientsDialog;
        }(Serenity.EntityDialog));
        Imaging.ImagePatientsDialog = ImagePatientsDialog;
    })(Imaging = EMR.Imaging || (EMR.Imaging = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Imaging;
    (function (Imaging) {
        var ImagePatientsGrid = /** @class */ (function (_super) {
            __extends(ImagePatientsGrid, _super);
            function ImagePatientsGrid(container) {
                return _super.call(this, container) || this;
            }
            ImagePatientsGrid.prototype.getColumnsKey = function () { return 'Imaging.ImagePatients'; };
            ImagePatientsGrid.prototype.getDialogType = function () { return Imaging.ImagePatientsDialog; };
            ImagePatientsGrid.prototype.getIdProperty = function () { return Imaging.ImagePatientsRow.idProperty; };
            ImagePatientsGrid.prototype.getLocalTextPrefix = function () { return Imaging.ImagePatientsRow.localTextPrefix; };
            ImagePatientsGrid.prototype.getService = function () { return Imaging.ImagePatientsService.baseUrl; };
            ImagePatientsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            ImagePatientsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ImagePatientsGrid);
            return ImagePatientsGrid;
        }(Serenity.EntityGrid));
        Imaging.ImagePatientsGrid = ImagePatientsGrid;
    })(Imaging = EMR.Imaging || (EMR.Imaging = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Imaging;
    (function (Imaging) {
        var ImagevisitsDialog = /** @class */ (function (_super) {
            __extends(ImagevisitsDialog, _super);
            function ImagevisitsDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Imaging.ImagevisitsForm(_this.idPrefix);
                _this.imagePatientsGrid = new Imaging.ImgImagingsTabGrid(_this.byId('ImgImagingsGrid'));
                _this.imagePatientsGrid.openDialogsAsPanel = true;
                EMR.DialogUtils.pendingChangesConfirmation(_this.element, function () { return _this.getSaveState() != _this.loadedState; });
                return _this;
            }
            ImagevisitsDialog.prototype.getFormKey = function () { return Imaging.ImagevisitsForm.formKey; };
            ImagevisitsDialog.prototype.getIdProperty = function () { return Imaging.ImagevisitsRow.idProperty; };
            ImagevisitsDialog.prototype.getLocalTextPrefix = function () { return Imaging.ImagevisitsRow.localTextPrefix; };
            ImagevisitsDialog.prototype.getNameProperty = function () { return Imaging.ImagevisitsRow.nameProperty; };
            ImagevisitsDialog.prototype.getService = function () { return Imaging.ImagevisitsService.baseUrl; };
            ImagevisitsDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }), 1);
                // We could also remove delete button here, but for demonstration 
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                return buttons;
            };
            ImagevisitsDialog.prototype.getSaveState = function () {
                try {
                    return $.toJSON(this.getSaveEntity());
                }
                catch (e) {
                    return null;
                }
            };
            ImagevisitsDialog.prototype.loadResponse = function (data) {
                _super.prototype.loadResponse.call(this, data);
                this.loadedState = this.getSaveState();
            };
            ImagevisitsDialog.prototype.loadEntity = function (entity) {
                _super.prototype.loadEntity.call(this, entity);
                Serenity.TabsExtensions.setDisabled(this.tabs, 'ImgImagings', this.isNewOrDeleted());
                this.imagePatientsGrid.VisitId = entity.VisitId == null ? null : entity.VisitId;
            };
            ImagevisitsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], ImagevisitsDialog);
            return ImagevisitsDialog;
        }(Serenity.EntityDialog));
        Imaging.ImagevisitsDialog = ImagevisitsDialog;
    })(Imaging = EMR.Imaging || (EMR.Imaging = {}));
})(EMR || (EMR = {}));
/// <reference path="../imagevisits/imagevisitsdialog.ts" />
var EMR;
(function (EMR) {
    var Imaging;
    (function (Imaging) {
        var ImagevisitsTabDialog = /** @class */ (function (_super) {
            __extends(ImagevisitsTabDialog, _super);
            function ImagevisitsTabDialog() {
                return _super.call(this) || this;
            }
            ImagevisitsTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.Mrid, true);
            };
            ImagevisitsTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], ImagevisitsTabDialog);
            return ImagevisitsTabDialog;
        }(Imaging.ImagevisitsDialog));
        Imaging.ImagevisitsTabDialog = ImagevisitsTabDialog;
    })(Imaging = EMR.Imaging || (EMR.Imaging = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Imaging;
    (function (Imaging) {
        var ImagevisitsGrid = /** @class */ (function (_super) {
            __extends(ImagevisitsGrid, _super);
            function ImagevisitsGrid(container) {
                return _super.call(this, container) || this;
            }
            ImagevisitsGrid.prototype.getColumnsKey = function () { return 'Imaging.Imagevisits'; };
            ImagevisitsGrid.prototype.getDialogType = function () { return Imaging.ImagevisitsDialog; };
            ImagevisitsGrid.prototype.getIdProperty = function () { return Imaging.ImagevisitsRow.idProperty; };
            ImagevisitsGrid.prototype.getLocalTextPrefix = function () { return Imaging.ImagevisitsRow.localTextPrefix; };
            ImagevisitsGrid.prototype.getService = function () { return Imaging.ImagevisitsService.baseUrl; };
            ImagevisitsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "refresh-button"; }), 1);
                return buttons;
            };
            ImagevisitsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ImagevisitsGrid);
            return ImagevisitsGrid;
        }(Serenity.EntityGrid));
        Imaging.ImagevisitsGrid = ImagevisitsGrid;
    })(Imaging = EMR.Imaging || (EMR.Imaging = {}));
})(EMR || (EMR = {}));
/// <reference path="../imagevisits/imagevisitsgrid.ts" />
var EMR;
(function (EMR) {
    var Imaging;
    (function (Imaging) {
        var ImagevisitsTabGrid = /** @class */ (function (_super) {
            __extends(ImagevisitsTabGrid, _super);
            function ImagevisitsTabGrid(container) {
                return _super.call(this, container) || this;
            }
            ImagevisitsTabGrid.prototype.getDialogType = function () { return Imaging.ImagevisitsTabDialog; };
            ImagevisitsTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            ImagevisitsTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            ImagevisitsTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            ImagevisitsTabGrid.prototype.addButtonClick = function () {
                this.editItem({ MrId: this.MrId });
            };
            ImagevisitsTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            ImagevisitsTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.MrId;
            };
            Object.defineProperty(ImagevisitsTabGrid.prototype, "MrId", {
                get: function () {
                    return this._MrId;
                },
                set: function (value) {
                    if (this._MrId !== value) {
                        this._MrId = value;
                        this.setEquality('Mrid', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            ImagevisitsTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ImagevisitsTabGrid);
            return ImagevisitsTabGrid;
        }(Imaging.ImagevisitsGrid));
        Imaging.ImagevisitsTabGrid = ImagevisitsTabGrid;
    })(Imaging = EMR.Imaging || (EMR.Imaging = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Imaging;
    (function (Imaging) {
        var ImgImagingsDialog = /** @class */ (function (_super) {
            __extends(ImgImagingsDialog, _super);
            function ImgImagingsDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Imaging.ImgImagingsForm(_this.idPrefix);
                return _this;
            }
            ImgImagingsDialog.prototype.getFormKey = function () { return Imaging.ImgImagingsForm.formKey; };
            ImgImagingsDialog.prototype.getIdProperty = function () { return Imaging.ImgImagingsRow.idProperty; };
            ImgImagingsDialog.prototype.getLocalTextPrefix = function () { return Imaging.ImgImagingsRow.localTextPrefix; };
            ImgImagingsDialog.prototype.getNameProperty = function () { return Imaging.ImgImagingsRow.nameProperty; };
            ImgImagingsDialog.prototype.getService = function () { return Imaging.ImgImagingsService.baseUrl; };
            ImgImagingsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], ImgImagingsDialog);
            return ImgImagingsDialog;
        }(Serenity.EntityDialog));
        Imaging.ImgImagingsDialog = ImgImagingsDialog;
    })(Imaging = EMR.Imaging || (EMR.Imaging = {}));
})(EMR || (EMR = {}));
/// <reference path="../imgimagings/imgimagingsdialog.ts" />
var EMR;
(function (EMR) {
    var Imaging;
    (function (Imaging) {
        var ImgImagingsTabDialog = /** @class */ (function (_super) {
            __extends(ImgImagingsTabDialog, _super);
            function ImgImagingsTabDialog() {
                return _super.call(this) || this;
            }
            ImgImagingsTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.VisitId, true);
            };
            ImgImagingsTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], ImgImagingsTabDialog);
            return ImgImagingsTabDialog;
        }(Imaging.ImgImagingsDialog));
        Imaging.ImgImagingsTabDialog = ImgImagingsTabDialog;
    })(Imaging = EMR.Imaging || (EMR.Imaging = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Imaging;
    (function (Imaging) {
        var ImgImagingsGrid = /** @class */ (function (_super) {
            __extends(ImgImagingsGrid, _super);
            function ImgImagingsGrid(container) {
                return _super.call(this, container) || this;
            }
            ImgImagingsGrid.prototype.getColumnsKey = function () { return 'Imaging.ImgImagings'; };
            ImgImagingsGrid.prototype.getDialogType = function () { return Imaging.ImgImagingsDialog; };
            ImgImagingsGrid.prototype.getIdProperty = function () { return Imaging.ImgImagingsRow.idProperty; };
            ImgImagingsGrid.prototype.getLocalTextPrefix = function () { return Imaging.ImgImagingsRow.localTextPrefix; };
            ImgImagingsGrid.prototype.getService = function () { return Imaging.ImgImagingsService.baseUrl; };
            ImgImagingsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            ImgImagingsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ImgImagingsGrid);
            return ImgImagingsGrid;
        }(Serenity.EntityGrid));
        Imaging.ImgImagingsGrid = ImgImagingsGrid;
    })(Imaging = EMR.Imaging || (EMR.Imaging = {}));
})(EMR || (EMR = {}));
/// <reference path="../imgimagings/imgimagingsgrid.ts" />
var EMR;
(function (EMR) {
    var Imaging;
    (function (Imaging) {
        var ImgImagingsTabGrid = /** @class */ (function (_super) {
            __extends(ImgImagingsTabGrid, _super);
            function ImgImagingsTabGrid(container) {
                return _super.call(this, container) || this;
            }
            ImgImagingsTabGrid.prototype.getDialogType = function () { return Imaging.ImgImagingsTabDialog; };
            ImgImagingsTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            ImgImagingsTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            ImgImagingsTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            ImgImagingsTabGrid.prototype.addButtonClick = function () {
                this.editItem({ VisitId: this.VisitId });
            };
            ImgImagingsTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            ImgImagingsTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.VisitId;
            };
            Object.defineProperty(ImgImagingsTabGrid.prototype, "VisitId", {
                get: function () {
                    return this._VisitId;
                },
                set: function (value) {
                    if (this._VisitId !== value) {
                        this._VisitId = value;
                        this.setEquality('VisitId', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            ImgImagingsTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ImgImagingsTabGrid);
            return ImgImagingsTabGrid;
        }(Imaging.ImgImagingsGrid));
        Imaging.ImgImagingsTabGrid = ImgImagingsTabGrid;
    })(Imaging = EMR.Imaging || (EMR.Imaging = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var LabTest;
    (function (LabTest) {
        var LabPatientsDialog = /** @class */ (function (_super) {
            __extends(LabPatientsDialog, _super);
            function LabPatientsDialog() {
                var _this = _super.call(this) || this;
                _this.form = new LabTest.LabPatientsForm(_this.idPrefix);
                _this.labVisits = new LabTest.LabvisitsTabGrid(_this.byId('LabvisitsGrid'));
                _this.labVisits.openDialogsAsPanel = true;
                EMR.DialogUtils.pendingChangesConfirmation(_this.element, function () { return _this.getSaveState() != _this.loadedState; });
                return _this;
            }
            LabPatientsDialog.prototype.getFormKey = function () { return LabTest.LabPatientsForm.formKey; };
            LabPatientsDialog.prototype.getIdProperty = function () { return LabTest.LabPatientsRow.idProperty; };
            LabPatientsDialog.prototype.getLocalTextPrefix = function () { return LabTest.LabPatientsRow.localTextPrefix; };
            LabPatientsDialog.prototype.getNameProperty = function () { return LabTest.LabPatientsRow.nameProperty; };
            LabPatientsDialog.prototype.getService = function () { return LabTest.LabPatientsService.baseUrl; };
            LabPatientsDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }), 1);
                // We could also remove delete button here, but for demonstration 
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                return buttons;
            };
            LabPatientsDialog.prototype.getSaveState = function () {
                try {
                    return $.toJSON(this.getSaveEntity());
                }
                catch (e) {
                    return null;
                }
            };
            LabPatientsDialog.prototype.loadResponse = function (data) {
                _super.prototype.loadResponse.call(this, data);
                this.loadedState = this.getSaveState();
            };
            LabPatientsDialog.prototype.loadEntity = function (entity) {
                _super.prototype.loadEntity.call(this, entity);
                Serenity.TabsExtensions.setDisabled(this.tabs, 'Labvisits', this.isNewOrDeleted());
                this.labVisits.MrId = entity.Mrid;
            };
            LabPatientsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], LabPatientsDialog);
            return LabPatientsDialog;
        }(Serenity.EntityDialog));
        LabTest.LabPatientsDialog = LabPatientsDialog;
    })(LabTest = EMR.LabTest || (EMR.LabTest = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var LabTest;
    (function (LabTest) {
        var LabPatientsGrid = /** @class */ (function (_super) {
            __extends(LabPatientsGrid, _super);
            function LabPatientsGrid(container) {
                return _super.call(this, container) || this;
            }
            LabPatientsGrid.prototype.getColumnsKey = function () { return 'LabTest.LabPatients'; };
            LabPatientsGrid.prototype.getDialogType = function () { return LabTest.LabPatientsDialog; };
            LabPatientsGrid.prototype.getIdProperty = function () { return LabTest.LabPatientsRow.idProperty; };
            LabPatientsGrid.prototype.getLocalTextPrefix = function () { return LabTest.LabPatientsRow.localTextPrefix; };
            LabPatientsGrid.prototype.getService = function () { return LabTest.LabPatientsService.baseUrl; };
            LabPatientsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            LabPatientsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], LabPatientsGrid);
            return LabPatientsGrid;
        }(Serenity.EntityGrid));
        LabTest.LabPatientsGrid = LabPatientsGrid;
    })(LabTest = EMR.LabTest || (EMR.LabTest = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var LabTest;
    (function (LabTest) {
        var LabvisitsDialog = /** @class */ (function (_super) {
            __extends(LabvisitsDialog, _super);
            function LabvisitsDialog() {
                var _this = _super.call(this) || this;
                _this.form = new LabTest.LabvisitsForm(_this.idPrefix);
                _this.labTestVisits = new LabTest.LabTestsTabGrid(_this.byId('LabTestsGrid'));
                _this.labTestVisits.openDialogsAsPanel = true;
                EMR.DialogUtils.pendingChangesConfirmation(_this.element, function () { return _this.getSaveState() != _this.loadedState; });
                return _this;
            }
            LabvisitsDialog.prototype.getFormKey = function () { return LabTest.LabvisitsForm.formKey; };
            LabvisitsDialog.prototype.getIdProperty = function () { return LabTest.LabvisitsRow.idProperty; };
            LabvisitsDialog.prototype.getLocalTextPrefix = function () { return LabTest.LabvisitsRow.localTextPrefix; };
            LabvisitsDialog.prototype.getNameProperty = function () { return LabTest.LabvisitsRow.nameProperty; };
            LabvisitsDialog.prototype.getService = function () { return LabTest.LabvisitsService.baseUrl; };
            LabvisitsDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }), 1);
                // We could also remove delete button here, but for demonstration 
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                return buttons;
            };
            LabvisitsDialog.prototype.getSaveState = function () {
                try {
                    return $.toJSON(this.getSaveEntity());
                }
                catch (e) {
                    return null;
                }
            };
            LabvisitsDialog.prototype.loadResponse = function (data) {
                _super.prototype.loadResponse.call(this, data);
                this.loadedState = this.getSaveState();
            };
            LabvisitsDialog.prototype.loadEntity = function (entity) {
                _super.prototype.loadEntity.call(this, entity);
                Serenity.TabsExtensions.setDisabled(this.tabs, 'LabTests', this.isNewOrDeleted());
                this.labTestVisits.VisitId = entity.VisitId == null ? null : entity.VisitId;
            };
            LabvisitsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], LabvisitsDialog);
            return LabvisitsDialog;
        }(Serenity.EntityDialog));
        LabTest.LabvisitsDialog = LabvisitsDialog;
    })(LabTest = EMR.LabTest || (EMR.LabTest = {}));
})(EMR || (EMR = {}));
/// <reference path="../labvisits/labvisitsdialog.ts" />
var EMR;
(function (EMR) {
    var LabTest;
    (function (LabTest) {
        var LabvisitsTabDialog = /** @class */ (function (_super) {
            __extends(LabvisitsTabDialog, _super);
            function LabvisitsTabDialog() {
                return _super.call(this) || this;
            }
            LabvisitsTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.Mrid, true);
            };
            LabvisitsTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], LabvisitsTabDialog);
            return LabvisitsTabDialog;
        }(LabTest.LabvisitsDialog));
        LabTest.LabvisitsTabDialog = LabvisitsTabDialog;
    })(LabTest = EMR.LabTest || (EMR.LabTest = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var LabTest;
    (function (LabTest) {
        var LabvisitsGrid = /** @class */ (function (_super) {
            __extends(LabvisitsGrid, _super);
            function LabvisitsGrid(container) {
                return _super.call(this, container) || this;
            }
            LabvisitsGrid.prototype.getColumnsKey = function () { return 'LabTest.Labvisits'; };
            LabvisitsGrid.prototype.getDialogType = function () { return LabTest.LabvisitsDialog; };
            LabvisitsGrid.prototype.getIdProperty = function () { return LabTest.LabvisitsRow.idProperty; };
            LabvisitsGrid.prototype.getLocalTextPrefix = function () { return LabTest.LabvisitsRow.localTextPrefix; };
            LabvisitsGrid.prototype.getService = function () { return LabTest.LabvisitsService.baseUrl; };
            LabvisitsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "refresh-button"; }), 1);
                return buttons;
            };
            LabvisitsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], LabvisitsGrid);
            return LabvisitsGrid;
        }(Serenity.EntityGrid));
        LabTest.LabvisitsGrid = LabvisitsGrid;
    })(LabTest = EMR.LabTest || (EMR.LabTest = {}));
})(EMR || (EMR = {}));
/// <reference path="../labvisits/labvisitsgrid.ts" />
var EMR;
(function (EMR) {
    var LabTest;
    (function (LabTest) {
        var LabvisitsTabGrid = /** @class */ (function (_super) {
            __extends(LabvisitsTabGrid, _super);
            function LabvisitsTabGrid(container) {
                return _super.call(this, container) || this;
            }
            LabvisitsTabGrid.prototype.getDialogType = function () { return LabTest.LabvisitsTabDialog; };
            LabvisitsTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            LabvisitsTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            LabvisitsTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            LabvisitsTabGrid.prototype.addButtonClick = function () {
                this.editItem({ MrId: this.MrId });
            };
            LabvisitsTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            LabvisitsTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.MrId;
            };
            Object.defineProperty(LabvisitsTabGrid.prototype, "MrId", {
                get: function () {
                    return this._MrId;
                },
                set: function (value) {
                    if (this._MrId !== value) {
                        this._MrId = value;
                        this.setEquality('Mrid', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            LabvisitsTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], LabvisitsTabGrid);
            return LabvisitsTabGrid;
        }(LabTest.LabvisitsGrid));
        LabTest.LabvisitsTabGrid = LabvisitsTabGrid;
    })(LabTest = EMR.LabTest || (EMR.LabTest = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var LabTest;
    (function (LabTest) {
        var LabTestsDialog = /** @class */ (function (_super) {
            __extends(LabTestsDialog, _super);
            function LabTestsDialog() {
                var _this = _super.call(this) || this;
                _this.form = new LabTest.LabTestsForm(_this.idPrefix);
                var getDate = new Date();
                var todyDate = getDate.getTime();
                _this.form.LabDateTime.addValidationRule(_this.uniqueName, function (e) {
                    var newDate = _this.form.LabDateTime.valueAsDate.getTime();
                    if (newDate > todyDate) {
                        return "Date cannot be bigger than today! Please correct it";
                    }
                    var oneday = 24 * 60 * 60 * 1000;
                    var diff = Math.abs(getDate.getTime() - _this.form.LabDateTime.valueAsDate.getTime());
                    var diffdays = Math.ceil(diff / oneday);
                    if (diffdays > 5) {
                        return "The date is too early to enter. Pleae enter a valid date";
                    }
                });
                _this.form.LabDateTime.change(function (e) {
                    _this.form.SlabDate.value = convertToShamsi(_this.form.LabDateTime.valueAsDate);
                });
                _this.form.SlabDate.change(function (e) {
                    _this.form.LabDateTime.valueAsDate = convertToGregorian(_this.form.SlabDate.value.toString());
                });
                return _this;
            }
            LabTestsDialog.prototype.getFormKey = function () { return LabTest.LabTestsForm.formKey; };
            LabTestsDialog.prototype.getIdProperty = function () { return LabTest.LabTestsRow.idProperty; };
            LabTestsDialog.prototype.getLocalTextPrefix = function () { return LabTest.LabTestsRow.localTextPrefix; };
            LabTestsDialog.prototype.getNameProperty = function () { return LabTest.LabTestsRow.nameProperty; };
            LabTestsDialog.prototype.getService = function () { return LabTest.LabTestsService.baseUrl; };
            LabTestsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], LabTestsDialog);
            return LabTestsDialog;
        }(Serenity.EntityDialog));
        LabTest.LabTestsDialog = LabTestsDialog;
    })(LabTest = EMR.LabTest || (EMR.LabTest = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var LabTest;
    (function (LabTest) {
        var LabTestsGrid = /** @class */ (function (_super) {
            __extends(LabTestsGrid, _super);
            function LabTestsGrid(container) {
                return _super.call(this, container) || this;
            }
            LabTestsGrid.prototype.getColumnsKey = function () { return 'LabTest.LabTests'; };
            LabTestsGrid.prototype.getDialogType = function () { return LabTest.LabTestsDialog; };
            LabTestsGrid.prototype.getIdProperty = function () { return LabTest.LabTestsRow.idProperty; };
            LabTestsGrid.prototype.getLocalTextPrefix = function () { return LabTest.LabTestsRow.localTextPrefix; };
            LabTestsGrid.prototype.getService = function () { return LabTest.LabTestsService.baseUrl; };
            LabTestsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            LabTestsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], LabTestsGrid);
            return LabTestsGrid;
        }(Serenity.EntityGrid));
        LabTest.LabTestsGrid = LabTestsGrid;
    })(LabTest = EMR.LabTest || (EMR.LabTest = {}));
})(EMR || (EMR = {}));
/// <reference path="../labtests/labtestsdialog.ts" />
var EMR;
(function (EMR) {
    var LabTest;
    (function (LabTest) {
        var LabTestsTabDialog = /** @class */ (function (_super) {
            __extends(LabTestsTabDialog, _super);
            function LabTestsTabDialog() {
                return _super.call(this) || this;
            }
            LabTestsTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.VisitId, true);
            };
            LabTestsTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], LabTestsTabDialog);
            return LabTestsTabDialog;
        }(LabTest.LabTestsDialog));
        LabTest.LabTestsTabDialog = LabTestsTabDialog;
    })(LabTest = EMR.LabTest || (EMR.LabTest = {}));
})(EMR || (EMR = {}));
/// <reference path="../labtests/labtestsgrid.ts" />
var EMR;
(function (EMR) {
    var LabTest;
    (function (LabTest) {
        var LabTestsTabGrid = /** @class */ (function (_super) {
            __extends(LabTestsTabGrid, _super);
            function LabTestsTabGrid(container) {
                return _super.call(this, container) || this;
            }
            LabTestsTabGrid.prototype.getDialogType = function () { return LabTest.LabTestsTabDialog; };
            LabTestsTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            LabTestsTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            LabTestsTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            LabTestsTabGrid.prototype.addButtonClick = function () {
                this.editItem({ VisitId: this.VisitId });
            };
            LabTestsTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            LabTestsTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.VisitId;
            };
            Object.defineProperty(LabTestsTabGrid.prototype, "VisitId", {
                get: function () {
                    return this._VisitId;
                },
                set: function (value) {
                    if (this._VisitId !== value) {
                        this._VisitId = value;
                        this.setEquality('VisitId', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            LabTestsTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], LabTestsTabGrid);
            return LabTestsTabGrid;
        }(LabTest.LabTestsGrid));
        LabTest.LabTestsTabGrid = LabTestsTabGrid;
    })(LabTest = EMR.LabTest || (EMR.LabTest = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Locations;
    (function (Locations) {
        var DistrictsDialog = /** @class */ (function (_super) {
            __extends(DistrictsDialog, _super);
            function DistrictsDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Locations.DistrictsForm(_this.idPrefix);
                return _this;
            }
            DistrictsDialog.prototype.getFormKey = function () { return Locations.DistrictsForm.formKey; };
            DistrictsDialog.prototype.getIdProperty = function () { return Locations.DistrictsRow.idProperty; };
            DistrictsDialog.prototype.getLocalTextPrefix = function () { return Locations.DistrictsRow.localTextPrefix; };
            DistrictsDialog.prototype.getNameProperty = function () { return Locations.DistrictsRow.nameProperty; };
            DistrictsDialog.prototype.getService = function () { return Locations.DistrictsService.baseUrl; };
            DistrictsDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], DistrictsDialog);
            return DistrictsDialog;
        }(Serenity.EntityDialog));
        Locations.DistrictsDialog = DistrictsDialog;
    })(Locations = EMR.Locations || (EMR.Locations = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Locations;
    (function (Locations) {
        var DistrictsGrid = /** @class */ (function (_super) {
            __extends(DistrictsGrid, _super);
            function DistrictsGrid(container) {
                return _super.call(this, container) || this;
            }
            DistrictsGrid.prototype.getColumnsKey = function () { return 'Locations.Districts'; };
            DistrictsGrid.prototype.getDialogType = function () { return Locations.DistrictsDialog; };
            DistrictsGrid.prototype.getIdProperty = function () { return Locations.DistrictsRow.idProperty; };
            DistrictsGrid.prototype.getLocalTextPrefix = function () { return Locations.DistrictsRow.localTextPrefix; };
            DistrictsGrid.prototype.getService = function () { return Locations.DistrictsService.baseUrl; };
            DistrictsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            DistrictsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], DistrictsGrid);
            return DistrictsGrid;
        }(Serenity.EntityGrid));
        Locations.DistrictsGrid = DistrictsGrid;
    })(Locations = EMR.Locations || (EMR.Locations = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Locations;
    (function (Locations) {
        var FacilityInfoDialog = /** @class */ (function (_super) {
            __extends(FacilityInfoDialog, _super);
            function FacilityInfoDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Locations.FacilityInfoForm(_this.idPrefix);
                return _this;
            }
            FacilityInfoDialog.prototype.getFormKey = function () { return Locations.FacilityInfoForm.formKey; };
            FacilityInfoDialog.prototype.getIdProperty = function () { return Locations.FacilityInfoRow.idProperty; };
            FacilityInfoDialog.prototype.getLocalTextPrefix = function () { return Locations.FacilityInfoRow.localTextPrefix; };
            FacilityInfoDialog.prototype.getNameProperty = function () { return Locations.FacilityInfoRow.nameProperty; };
            FacilityInfoDialog.prototype.getService = function () { return Locations.FacilityInfoService.baseUrl; };
            FacilityInfoDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], FacilityInfoDialog);
            return FacilityInfoDialog;
        }(Serenity.EntityDialog));
        Locations.FacilityInfoDialog = FacilityInfoDialog;
    })(Locations = EMR.Locations || (EMR.Locations = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Locations;
    (function (Locations) {
        var FacilityInfoGrid = /** @class */ (function (_super) {
            __extends(FacilityInfoGrid, _super);
            function FacilityInfoGrid(container) {
                return _super.call(this, container) || this;
            }
            FacilityInfoGrid.prototype.getColumnsKey = function () { return 'Locations.FacilityInfo'; };
            FacilityInfoGrid.prototype.getDialogType = function () { return Locations.FacilityInfoDialog; };
            FacilityInfoGrid.prototype.getIdProperty = function () { return Locations.FacilityInfoRow.idProperty; };
            FacilityInfoGrid.prototype.getLocalTextPrefix = function () { return Locations.FacilityInfoRow.localTextPrefix; };
            FacilityInfoGrid.prototype.getService = function () { return Locations.FacilityInfoService.baseUrl; };
            FacilityInfoGrid = __decorate([
                Serenity.Decorators.filterable(),
                Serenity.Decorators.registerClass()
            ], FacilityInfoGrid);
            return FacilityInfoGrid;
        }(Serenity.EntityGrid));
        Locations.FacilityInfoGrid = FacilityInfoGrid;
    })(Locations = EMR.Locations || (EMR.Locations = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Locations;
    (function (Locations) {
        var FacilityTypesDialog = /** @class */ (function (_super) {
            __extends(FacilityTypesDialog, _super);
            function FacilityTypesDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Locations.FacilityTypesForm(_this.idPrefix);
                return _this;
            }
            FacilityTypesDialog.prototype.getFormKey = function () { return Locations.FacilityTypesForm.formKey; };
            FacilityTypesDialog.prototype.getIdProperty = function () { return Locations.FacilityTypesRow.idProperty; };
            FacilityTypesDialog.prototype.getLocalTextPrefix = function () { return Locations.FacilityTypesRow.localTextPrefix; };
            FacilityTypesDialog.prototype.getNameProperty = function () { return Locations.FacilityTypesRow.nameProperty; };
            FacilityTypesDialog.prototype.getService = function () { return Locations.FacilityTypesService.baseUrl; };
            FacilityTypesDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], FacilityTypesDialog);
            return FacilityTypesDialog;
        }(Serenity.EntityDialog));
        Locations.FacilityTypesDialog = FacilityTypesDialog;
    })(Locations = EMR.Locations || (EMR.Locations = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Locations;
    (function (Locations) {
        var FacilityTypesGrid = /** @class */ (function (_super) {
            __extends(FacilityTypesGrid, _super);
            function FacilityTypesGrid(container) {
                return _super.call(this, container) || this;
            }
            FacilityTypesGrid.prototype.getColumnsKey = function () { return 'Locations.FacilityTypes'; };
            FacilityTypesGrid.prototype.getDialogType = function () { return Locations.FacilityTypesDialog; };
            FacilityTypesGrid.prototype.getIdProperty = function () { return Locations.FacilityTypesRow.idProperty; };
            FacilityTypesGrid.prototype.getLocalTextPrefix = function () { return Locations.FacilityTypesRow.localTextPrefix; };
            FacilityTypesGrid.prototype.getService = function () { return Locations.FacilityTypesService.baseUrl; };
            FacilityTypesGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            FacilityTypesGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], FacilityTypesGrid);
            return FacilityTypesGrid;
        }(Serenity.EntityGrid));
        Locations.FacilityTypesGrid = FacilityTypesGrid;
    })(Locations = EMR.Locations || (EMR.Locations = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Locations;
    (function (Locations) {
        var ProvincesDialog = /** @class */ (function (_super) {
            __extends(ProvincesDialog, _super);
            function ProvincesDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Locations.ProvincesForm(_this.idPrefix);
                return _this;
            }
            ProvincesDialog.prototype.getFormKey = function () { return Locations.ProvincesForm.formKey; };
            ProvincesDialog.prototype.getIdProperty = function () { return Locations.ProvincesRow.idProperty; };
            ProvincesDialog.prototype.getLocalTextPrefix = function () { return Locations.ProvincesRow.localTextPrefix; };
            ProvincesDialog.prototype.getNameProperty = function () { return Locations.ProvincesRow.nameProperty; };
            ProvincesDialog.prototype.getService = function () { return Locations.ProvincesService.baseUrl; };
            ProvincesDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], ProvincesDialog);
            return ProvincesDialog;
        }(Serenity.EntityDialog));
        Locations.ProvincesDialog = ProvincesDialog;
    })(Locations = EMR.Locations || (EMR.Locations = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Locations;
    (function (Locations) {
        var ProvincesGrid = /** @class */ (function (_super) {
            __extends(ProvincesGrid, _super);
            function ProvincesGrid(container) {
                return _super.call(this, container) || this;
            }
            ProvincesGrid.prototype.getColumnsKey = function () { return 'Locations.Provinces'; };
            ProvincesGrid.prototype.getDialogType = function () { return Locations.ProvincesDialog; };
            ProvincesGrid.prototype.getIdProperty = function () { return Locations.ProvincesRow.idProperty; };
            ProvincesGrid.prototype.getLocalTextPrefix = function () { return Locations.ProvincesRow.localTextPrefix; };
            ProvincesGrid.prototype.getService = function () { return Locations.ProvincesService.baseUrl; };
            ProvincesGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ProvincesGrid);
            return ProvincesGrid;
        }(Serenity.EntityGrid));
        Locations.ProvincesGrid = ProvincesGrid;
    })(Locations = EMR.Locations || (EMR.Locations = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var BloodTransfusionsDialog = /** @class */ (function (_super) {
            __extends(BloodTransfusionsDialog, _super);
            function BloodTransfusionsDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Medadmins.BloodTransfusionsForm(_this.idPrefix);
                var getDate = new Date();
                var todyDate = getDate.getTime();
                _this.form.TransDateTime.addValidationRule(_this.uniqueName, function (e) {
                    var newDate = _this.form.TransDateTime.valueAsDate.getTime();
                    if (newDate > todyDate) {
                        return "Date cannot be bigger than today! Please correct it";
                    }
                    var oneday = 24 * 60 * 60 * 1000;
                    var diff = Math.abs(getDate.getTime() - _this.form.TransDateTime.valueAsDate.getTime());
                    var diffdays = Math.ceil(diff / oneday);
                    if (diffdays > 5) {
                        return "The date is too early to enter. Pleae enter a valid date";
                    }
                });
                _this.form.TransDateTime.change(function (e) {
                    _this.form.STransDate.value = convertToShamsi(_this.form.TransDateTime.valueAsDate);
                });
                _this.form.STransDate.change(function (e) {
                    _this.form.TransDateTime.valueAsDate = convertToGregorian(_this.form.STransDate.value.toString());
                });
                return _this;
            }
            BloodTransfusionsDialog.prototype.getFormKey = function () { return Medadmins.BloodTransfusionsForm.formKey; };
            BloodTransfusionsDialog.prototype.getIdProperty = function () { return Medadmins.BloodTransfusionsRow.idProperty; };
            BloodTransfusionsDialog.prototype.getLocalTextPrefix = function () { return Medadmins.BloodTransfusionsRow.localTextPrefix; };
            BloodTransfusionsDialog.prototype.getNameProperty = function () { return Medadmins.BloodTransfusionsRow.nameProperty; };
            BloodTransfusionsDialog.prototype.getService = function () { return Medadmins.BloodTransfusionsService.baseUrl; };
            BloodTransfusionsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], BloodTransfusionsDialog);
            return BloodTransfusionsDialog;
        }(Serenity.EntityDialog));
        Medadmins.BloodTransfusionsDialog = BloodTransfusionsDialog;
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var BloodTransfusionsGrid = /** @class */ (function (_super) {
            __extends(BloodTransfusionsGrid, _super);
            function BloodTransfusionsGrid(container) {
                return _super.call(this, container) || this;
            }
            BloodTransfusionsGrid.prototype.getColumnsKey = function () { return 'Medadmins.BloodTransfusions'; };
            BloodTransfusionsGrid.prototype.getDialogType = function () { return Medadmins.BloodTransfusionsDialog; };
            BloodTransfusionsGrid.prototype.getIdProperty = function () { return Medadmins.BloodTransfusionsRow.idProperty; };
            BloodTransfusionsGrid.prototype.getLocalTextPrefix = function () { return Medadmins.BloodTransfusionsRow.localTextPrefix; };
            BloodTransfusionsGrid.prototype.getService = function () { return Medadmins.BloodTransfusionsService.baseUrl; };
            BloodTransfusionsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "refresh-button"; }), 1);
                return buttons;
            };
            BloodTransfusionsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], BloodTransfusionsGrid);
            return BloodTransfusionsGrid;
        }(Serenity.EntityGrid));
        Medadmins.BloodTransfusionsGrid = BloodTransfusionsGrid;
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var MedadministrationDialog = /** @class */ (function (_super) {
            __extends(MedadministrationDialog, _super);
            function MedadministrationDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Medadmins.MedadministrationForm(_this.idPrefix);
                var getDate = new Date();
                var todyDate = getDate.getTime();
                _this.form.RecDateTime.addValidationRule(_this.uniqueName, function (e) {
                    var newDate = _this.form.RecDateTime.valueAsDate.getTime();
                    if (newDate > todyDate) {
                        return "Date cannot be bigger than today! Please correct it";
                    }
                    var oneday = 24 * 60 * 60 * 1000;
                    var diff = Math.abs(getDate.getTime() - _this.form.RecDateTime.valueAsDate.getTime());
                    var diffdays = Math.ceil(diff / oneday);
                    if (diffdays > 5) {
                        return "The date is too early to enter. Pleae enter a valid date";
                    }
                });
                _this.form.AppDateTime.addValidationRule(_this.uniqueName, function (e) {
                    var newDate = _this.form.AppDateTime.valueAsDate.getTime();
                    if (newDate > todyDate) {
                        return "Date cannot be bigger than today! Please correct it";
                    }
                    var oneday = 24 * 60 * 60 * 1000;
                    var diff = Math.abs(getDate.getTime() - _this.form.AppDateTime.valueAsDate.getTime());
                    var diffdays = Math.ceil(diff / oneday);
                    if (diffdays > 5) {
                        return "The date is too early to enter. Pleae enter a valid date";
                    }
                });
                _this.form.RecDateTime.change(function (e) {
                    _this.form.RecSDate.value = convertToShamsi(_this.form.RecDateTime.valueAsDate);
                });
                _this.form.RecSDate.change(function (e) {
                    _this.form.RecDateTime.valueAsDate = convertToGregorian(_this.form.RecSDate.value.toString());
                });
                _this.form.AppDateTime.change(function (e) {
                    _this.form.AppSDate.value = convertToShamsi(_this.form.AppDateTime.valueAsDate);
                });
                _this.form.AppSDate.change(function (e) {
                    _this.form.AppDateTime.valueAsDate = convertToGregorian(_this.form.AppSDate.value.toString());
                });
                return _this;
            }
            MedadministrationDialog.prototype.getFormKey = function () { return Medadmins.MedadministrationForm.formKey; };
            MedadministrationDialog.prototype.getIdProperty = function () { return Medadmins.MedadministrationRow.idProperty; };
            MedadministrationDialog.prototype.getLocalTextPrefix = function () { return Medadmins.MedadministrationRow.localTextPrefix; };
            MedadministrationDialog.prototype.getNameProperty = function () { return Medadmins.MedadministrationRow.nameProperty; };
            MedadministrationDialog.prototype.getService = function () { return Medadmins.MedadministrationService.baseUrl; };
            MedadministrationDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }), 1);
                // We could also remove delete button here, but for demonstration 
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                return buttons;
            };
            MedadministrationDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], MedadministrationDialog);
            return MedadministrationDialog;
        }(Serenity.EntityDialog));
        Medadmins.MedadministrationDialog = MedadministrationDialog;
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var MedadministrationGrid = /** @class */ (function (_super) {
            __extends(MedadministrationGrid, _super);
            function MedadministrationGrid(container) {
                return _super.call(this, container) || this;
            }
            MedadministrationGrid.prototype.getColumnsKey = function () { return 'Medadmins.Medadministration'; };
            MedadministrationGrid.prototype.getDialogType = function () { return Medadmins.MedadministrationDialog; };
            MedadministrationGrid.prototype.getIdProperty = function () { return Medadmins.MedadministrationRow.idProperty; };
            MedadministrationGrid.prototype.getLocalTextPrefix = function () { return Medadmins.MedadministrationRow.localTextPrefix; };
            MedadministrationGrid.prototype.getService = function () { return Medadmins.MedadministrationService.baseUrl; };
            MedadministrationGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "refresh-button"; }), 1);
                return buttons;
            };
            MedadministrationGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], MedadministrationGrid);
            return MedadministrationGrid;
        }(Serenity.EntityGrid));
        Medadmins.MedadministrationGrid = MedadministrationGrid;
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var MedadminpatientsDialog = /** @class */ (function (_super) {
            __extends(MedadminpatientsDialog, _super);
            function MedadminpatientsDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Medadmins.MedadminpatientsForm(_this.idPrefix);
                _this.medVisitsGrid = new Medadmins.MedvisitsTabGrid(_this.byId('MedvisitsGrid'));
                _this.medVisitsGrid.openDialogsAsPanel = true;
                return _this;
            }
            MedadminpatientsDialog.prototype.getFormKey = function () { return Medadmins.MedadminpatientsForm.formKey; };
            MedadminpatientsDialog.prototype.getIdProperty = function () { return Medadmins.MedadminpatientsRow.idProperty; };
            MedadminpatientsDialog.prototype.getLocalTextPrefix = function () { return Medadmins.MedadminpatientsRow.localTextPrefix; };
            MedadminpatientsDialog.prototype.getNameProperty = function () { return Medadmins.MedadminpatientsRow.nameProperty; };
            MedadminpatientsDialog.prototype.getService = function () { return Medadmins.MedadminpatientsService.baseUrl; };
            MedadminpatientsDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }), 1);
                // We could also remove delete button here, but for demonstration 
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                return buttons;
            };
            MedadminpatientsDialog.prototype.getSaveState = function () {
                try {
                    return $.toJSON(this.getSaveEntity());
                }
                catch (e) {
                    return null;
                }
            };
            MedadminpatientsDialog.prototype.loadResponse = function (data) {
                _super.prototype.loadResponse.call(this, data);
                this.loadedState = this.getSaveState();
            };
            MedadminpatientsDialog.prototype.loadEntity = function (entity) {
                _super.prototype.loadEntity.call(this, entity);
                Serenity.TabsExtensions.setDisabled(this.tabs, 'Medvisits', this.isNewOrDeleted());
                this.medVisitsGrid.MrId = entity.Mrid;
            };
            MedadminpatientsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], MedadminpatientsDialog);
            return MedadminpatientsDialog;
        }(Serenity.EntityDialog));
        Medadmins.MedadminpatientsDialog = MedadminpatientsDialog;
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var MedadminpatientsGrid = /** @class */ (function (_super) {
            __extends(MedadminpatientsGrid, _super);
            function MedadminpatientsGrid(container) {
                return _super.call(this, container) || this;
            }
            MedadminpatientsGrid.prototype.getColumnsKey = function () { return 'Medadmins.Medadminpatients'; };
            MedadminpatientsGrid.prototype.getDialogType = function () { return Medadmins.MedadminpatientsDialog; };
            MedadminpatientsGrid.prototype.getIdProperty = function () { return Medadmins.MedadminpatientsRow.idProperty; };
            MedadminpatientsGrid.prototype.getLocalTextPrefix = function () { return Medadmins.MedadminpatientsRow.localTextPrefix; };
            MedadminpatientsGrid.prototype.getService = function () { return Medadmins.MedadminpatientsService.baseUrl; };
            MedadminpatientsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "refresh-button"; }), 1);
                return buttons;
            };
            MedadminpatientsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], MedadminpatientsGrid);
            return MedadminpatientsGrid;
        }(Serenity.EntityGrid));
        Medadmins.MedadminpatientsGrid = MedadminpatientsGrid;
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var MedvisitsDialog = /** @class */ (function (_super) {
            __extends(MedvisitsDialog, _super);
            function MedvisitsDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Medadmins.MedvisitsForm(_this.idPrefix);
                _this.prescriptionsGrid = new Medadmins.MPrescriptionsTabGrid(_this.byId('MPrescriptionsGrid'));
                _this.prescriptionsGrid.openDialogsAsPanel = true;
                _this.medBloodTransfusionGrid = new Medadmins.BloodTransfusionsTabGrid(_this.byId('BloodTransfusionsGrid'));
                _this.medBloodTransfusionGrid.openDialogsAsPanel = true;
                return _this;
            }
            MedvisitsDialog.prototype.getFormKey = function () { return Medadmins.MedvisitsForm.formKey; };
            MedvisitsDialog.prototype.getIdProperty = function () { return Medadmins.MedvisitsRow.idProperty; };
            MedvisitsDialog.prototype.getLocalTextPrefix = function () { return Medadmins.MedvisitsRow.localTextPrefix; };
            MedvisitsDialog.prototype.getNameProperty = function () { return Medadmins.MedvisitsRow.nameProperty; };
            MedvisitsDialog.prototype.getService = function () { return Medadmins.MedvisitsService.baseUrl; };
            MedvisitsDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }), 1);
                // We could also remove delete button here, but for demonstration 
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                return buttons;
            };
            MedvisitsDialog.prototype.getSaveState = function () {
                try {
                    return $.toJSON(this.getSaveEntity());
                }
                catch (e) {
                    return null;
                }
            };
            MedvisitsDialog.prototype.loadResponse = function (data) {
                _super.prototype.loadResponse.call(this, data);
                this.loadedState = this.getSaveState();
            };
            MedvisitsDialog.prototype.loadEntity = function (entity) {
                _super.prototype.loadEntity.call(this, entity);
                Serenity.TabsExtensions.setDisabled(this.tabs, 'MPrescriptions', this.isNewOrDeleted());
                Serenity.TabsExtensions.setDisabled(this.tabs, 'BloodTransfusions', this.isNewOrDeleted());
                this.prescriptionsGrid.VisitId = entity.VisitId;
                this.medBloodTransfusionGrid.VisitId = entity.VisitId;
            };
            MedvisitsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], MedvisitsDialog);
            return MedvisitsDialog;
        }(Serenity.EntityDialog));
        Medadmins.MedvisitsDialog = MedvisitsDialog;
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
/// <reference path="../medvisits/medvisitsdialog.ts" />
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var MedvisitsTabDialog = /** @class */ (function (_super) {
            __extends(MedvisitsTabDialog, _super);
            function MedvisitsTabDialog() {
                return _super.call(this) || this;
            }
            MedvisitsTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.Mrid, true);
            };
            MedvisitsTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], MedvisitsTabDialog);
            return MedvisitsTabDialog;
        }(Medadmins.MedvisitsDialog));
        Medadmins.MedvisitsTabDialog = MedvisitsTabDialog;
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var MedvisitsGrid = /** @class */ (function (_super) {
            __extends(MedvisitsGrid, _super);
            function MedvisitsGrid(container) {
                return _super.call(this, container) || this;
            }
            MedvisitsGrid.prototype.getColumnsKey = function () { return 'Medadmins.Medvisits'; };
            MedvisitsGrid.prototype.getDialogType = function () { return Medadmins.MedvisitsDialog; };
            MedvisitsGrid.prototype.getIdProperty = function () { return Medadmins.MedvisitsRow.idProperty; };
            MedvisitsGrid.prototype.getLocalTextPrefix = function () { return Medadmins.MedvisitsRow.localTextPrefix; };
            MedvisitsGrid.prototype.getService = function () { return Medadmins.MedvisitsService.baseUrl; };
            MedvisitsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "refresh-button"; }), 1);
                return buttons;
            };
            MedvisitsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], MedvisitsGrid);
            return MedvisitsGrid;
        }(Serenity.EntityGrid));
        Medadmins.MedvisitsGrid = MedvisitsGrid;
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
/// <reference path="../medvisits/medvisitsgrid.ts" />
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var MedvisitsTabGrid = /** @class */ (function (_super) {
            __extends(MedvisitsTabGrid, _super);
            function MedvisitsTabGrid(container) {
                return _super.call(this, container) || this;
            }
            MedvisitsTabGrid.prototype.getDialogType = function () { return Medadmins.MedvisitsTabDialog; };
            MedvisitsTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            MedvisitsTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            MedvisitsTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            MedvisitsTabGrid.prototype.addButtonClick = function () {
                this.editItem({ MrId: this.MrId });
            };
            MedvisitsTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            MedvisitsTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.MrId;
            };
            Object.defineProperty(MedvisitsTabGrid.prototype, "MrId", {
                get: function () {
                    return this._MrId;
                },
                set: function (value) {
                    if (this._MrId !== value) {
                        this._MrId = value;
                        this.setEquality('Mrid', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            MedvisitsTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], MedvisitsTabGrid);
            return MedvisitsTabGrid;
        }(Medadmins.MedvisitsGrid));
        Medadmins.MedvisitsTabGrid = MedvisitsTabGrid;
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
/// <reference path="../bloodtransfusions/bloodtransfusionsdialog.ts" />
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var BloodTransfusionsTabDialog = /** @class */ (function (_super) {
            __extends(BloodTransfusionsTabDialog, _super);
            function BloodTransfusionsTabDialog() {
                return _super.call(this) || this;
            }
            BloodTransfusionsTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.VisitId, true);
            };
            BloodTransfusionsTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], BloodTransfusionsTabDialog);
            return BloodTransfusionsTabDialog;
        }(Medadmins.BloodTransfusionsDialog));
        Medadmins.BloodTransfusionsTabDialog = BloodTransfusionsTabDialog;
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
/// <reference path="../bloodtransfusions/bloodtransfusionsgrid.ts" />
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var BloodTransfusionsTabGrid = /** @class */ (function (_super) {
            __extends(BloodTransfusionsTabGrid, _super);
            function BloodTransfusionsTabGrid(container) {
                return _super.call(this, container) || this;
            }
            BloodTransfusionsTabGrid.prototype.getDialogType = function () { return Medadmins.BloodTransfusionsTabDialog; };
            BloodTransfusionsTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            BloodTransfusionsTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            BloodTransfusionsTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            BloodTransfusionsTabGrid.prototype.addButtonClick = function () {
                this.editItem({ VisitId: this.VisitId });
            };
            BloodTransfusionsTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            BloodTransfusionsTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.VisitId;
            };
            Object.defineProperty(BloodTransfusionsTabGrid.prototype, "VisitId", {
                get: function () {
                    return this._VisitId;
                },
                set: function (value) {
                    if (this._VisitId !== value) {
                        this._VisitId = value;
                        this.setEquality('VisitId', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            BloodTransfusionsTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], BloodTransfusionsTabGrid);
            return BloodTransfusionsTabGrid;
        }(Medadmins.BloodTransfusionsGrid));
        Medadmins.BloodTransfusionsTabGrid = BloodTransfusionsTabGrid;
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var MPrescriptionsDialog = /** @class */ (function (_super) {
            __extends(MPrescriptionsDialog, _super);
            function MPrescriptionsDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Medadmins.MPrescriptionsForm(_this.idPrefix);
                _this.opdMedAdministration = new Medadmins.MMedadministrationTabGrid(_this.byId('MedadministrationGrid'));
                _this.opdMedAdministration.openDialogsAsPanel = true;
                EMR.DialogUtils.pendingChangesConfirmation(_this.element, function () { return _this.getSaveState() != _this.loadedState; });
                return _this;
            }
            MPrescriptionsDialog.prototype.getFormKey = function () { return Medadmins.MPrescriptionsForm.formKey; };
            MPrescriptionsDialog.prototype.getIdProperty = function () { return Medadmins.MPrescriptionsRow.idProperty; };
            MPrescriptionsDialog.prototype.getLocalTextPrefix = function () { return Medadmins.MPrescriptionsRow.localTextPrefix; };
            MPrescriptionsDialog.prototype.getNameProperty = function () { return Medadmins.MPrescriptionsRow.nameProperty; };
            MPrescriptionsDialog.prototype.getService = function () { return Medadmins.MPrescriptionsService.baseUrl; };
            MPrescriptionsDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }), 1);
                // We could also remove delete button here, but for demonstration 
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                return buttons;
            };
            MPrescriptionsDialog.prototype.getSaveState = function () {
                try {
                    return $.toJSON(this.getSaveEntity());
                }
                catch (e) {
                    return null;
                }
            };
            MPrescriptionsDialog.prototype.loadResponse = function (data) {
                _super.prototype.loadResponse.call(this, data);
                this.loadedState = this.getSaveState();
            };
            MPrescriptionsDialog.prototype.loadEntity = function (entity) {
                _super.prototype.loadEntity.call(this, entity);
                Serenity.TabsExtensions.setDisabled(this.tabs, 'OpdMedadministration', this.isNewOrDeleted());
                this.opdMedAdministration.OrderId = entity.OrderId == null ? null : entity.OrderId;
            };
            MPrescriptionsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], MPrescriptionsDialog);
            return MPrescriptionsDialog;
        }(Serenity.EntityDialog));
        Medadmins.MPrescriptionsDialog = MPrescriptionsDialog;
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
/// <reference path="../mprescriptions/mprescriptionsdialog.ts" />
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var MPrescriptionsTabDialog = /** @class */ (function (_super) {
            __extends(MPrescriptionsTabDialog, _super);
            function MPrescriptionsTabDialog() {
                return _super.call(this) || this;
            }
            MPrescriptionsTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.VisitId, true);
            };
            MPrescriptionsTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], MPrescriptionsTabDialog);
            return MPrescriptionsTabDialog;
        }(Medadmins.MPrescriptionsDialog));
        Medadmins.MPrescriptionsTabDialog = MPrescriptionsTabDialog;
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var MPrescriptionsGrid = /** @class */ (function (_super) {
            __extends(MPrescriptionsGrid, _super);
            function MPrescriptionsGrid(container) {
                return _super.call(this, container) || this;
            }
            MPrescriptionsGrid.prototype.getColumnsKey = function () { return 'Medadmins.MPrescriptions'; };
            MPrescriptionsGrid.prototype.getDialogType = function () { return Medadmins.MPrescriptionsDialog; };
            MPrescriptionsGrid.prototype.getIdProperty = function () { return Medadmins.MPrescriptionsRow.idProperty; };
            MPrescriptionsGrid.prototype.getLocalTextPrefix = function () { return Medadmins.MPrescriptionsRow.localTextPrefix; };
            MPrescriptionsGrid.prototype.getService = function () { return Medadmins.MPrescriptionsService.baseUrl; };
            MPrescriptionsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "refresh-button"; }), 1);
                return buttons;
            };
            MPrescriptionsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], MPrescriptionsGrid);
            return MPrescriptionsGrid;
        }(Serenity.EntityGrid));
        Medadmins.MPrescriptionsGrid = MPrescriptionsGrid;
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
/// <reference path="../mprescriptions/mprescriptionsgrid.ts" />
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var MPrescriptionsTabGrid = /** @class */ (function (_super) {
            __extends(MPrescriptionsTabGrid, _super);
            function MPrescriptionsTabGrid(container) {
                return _super.call(this, container) || this;
            }
            MPrescriptionsTabGrid.prototype.getDialogType = function () { return Medadmins.MPrescriptionsTabDialog; };
            MPrescriptionsTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            MPrescriptionsTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            MPrescriptionsTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            MPrescriptionsTabGrid.prototype.addButtonClick = function () {
                this.editItem({ VisitId: this.VisitId });
            };
            MPrescriptionsTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            MPrescriptionsTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.VisitId;
            };
            Object.defineProperty(MPrescriptionsTabGrid.prototype, "VisitId", {
                get: function () {
                    return this._VisitId;
                },
                set: function (value) {
                    if (this._VisitId !== value) {
                        this._VisitId = value;
                        this.setEquality('VisitId', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            MPrescriptionsTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], MPrescriptionsTabGrid);
            return MPrescriptionsTabGrid;
        }(Medadmins.MPrescriptionsGrid));
        Medadmins.MPrescriptionsTabGrid = MPrescriptionsTabGrid;
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
/// <reference path="../medadminpatients/medadminpatientsdialog.ts" />
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var MMedadministrationTabDialog = /** @class */ (function (_super) {
            __extends(MMedadministrationTabDialog, _super);
            function MMedadministrationTabDialog() {
                return _super.call(this) || this;
            }
            MMedadministrationTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.OrderId, true);
            };
            MMedadministrationTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], MMedadministrationTabDialog);
            return MMedadministrationTabDialog;
        }(Medadmins.MedadministrationDialog));
        Medadmins.MMedadministrationTabDialog = MMedadministrationTabDialog;
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
/// <reference path="../medadminpatients/medadminpatientsgrid.ts" />
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var MMedadministrationTabGrid = /** @class */ (function (_super) {
            __extends(MMedadministrationTabGrid, _super);
            function MMedadministrationTabGrid(container) {
                return _super.call(this, container) || this;
            }
            MMedadministrationTabGrid.prototype.getDialogType = function () { return Medadmins.MMedadministrationTabDialog; };
            MMedadministrationTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            MMedadministrationTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            MMedadministrationTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            MMedadministrationTabGrid.prototype.addButtonClick = function () {
                this.editItem({ OrderId: this.OrderId });
            };
            MMedadministrationTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            MMedadministrationTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.OrderId;
            };
            Object.defineProperty(MMedadministrationTabGrid.prototype, "OrderId", {
                get: function () {
                    return this._OrderId;
                },
                set: function (value) {
                    if (this._OrderId !== value) {
                        this._OrderId = value;
                        this.setEquality('OrderId', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            MMedadministrationTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], MMedadministrationTabGrid);
            return MMedadministrationTabGrid;
        }(Medadmins.MedadministrationGrid));
        Medadmins.MMedadministrationTabGrid = MMedadministrationTabGrid;
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var VisitsmedicineDialog = /** @class */ (function (_super) {
            __extends(VisitsmedicineDialog, _super);
            function VisitsmedicineDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Medadmins.VisitsmedicineForm(_this.idPrefix);
                return _this;
            }
            VisitsmedicineDialog.prototype.getFormKey = function () { return Medadmins.VisitsmedicineForm.formKey; };
            VisitsmedicineDialog.prototype.getIdProperty = function () { return Medadmins.VisitsmedicineRow.idProperty; };
            VisitsmedicineDialog.prototype.getLocalTextPrefix = function () { return Medadmins.VisitsmedicineRow.localTextPrefix; };
            VisitsmedicineDialog.prototype.getNameProperty = function () { return Medadmins.VisitsmedicineRow.nameProperty; };
            VisitsmedicineDialog.prototype.getService = function () { return Medadmins.VisitsmedicineService.baseUrl; };
            VisitsmedicineDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], VisitsmedicineDialog);
            return VisitsmedicineDialog;
        }(Serenity.EntityDialog));
        Medadmins.VisitsmedicineDialog = VisitsmedicineDialog;
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Medadmins;
    (function (Medadmins) {
        var VisitsmedicineGrid = /** @class */ (function (_super) {
            __extends(VisitsmedicineGrid, _super);
            function VisitsmedicineGrid(container) {
                return _super.call(this, container) || this;
            }
            VisitsmedicineGrid.prototype.getColumnsKey = function () { return 'Medadmins.Visitsmedicine'; };
            VisitsmedicineGrid.prototype.getDialogType = function () { return Medadmins.VisitsmedicineDialog; };
            VisitsmedicineGrid.prototype.getIdProperty = function () { return Medadmins.VisitsmedicineRow.idProperty; };
            VisitsmedicineGrid.prototype.getLocalTextPrefix = function () { return Medadmins.VisitsmedicineRow.localTextPrefix; };
            VisitsmedicineGrid.prototype.getService = function () { return Medadmins.VisitsmedicineService.baseUrl; };
            VisitsmedicineGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], VisitsmedicineGrid);
            return VisitsmedicineGrid;
        }(Serenity.EntityGrid));
        Medadmins.VisitsmedicineGrid = VisitsmedicineGrid;
    })(Medadmins = EMR.Medadmins || (EMR.Medadmins = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var DiagnosisDialog = /** @class */ (function (_super) {
            __extends(DiagnosisDialog, _super);
            function DiagnosisDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new OPD.DiagnosisForm(_this.idPrefix);
                return _this;
            }
            DiagnosisDialog.prototype.getFormKey = function () { return OPD.DiagnosisForm.formKey; };
            DiagnosisDialog.prototype.getIdProperty = function () { return OPD.DiagnosisRow.idProperty; };
            DiagnosisDialog.prototype.getLocalTextPrefix = function () { return OPD.DiagnosisRow.localTextPrefix; };
            DiagnosisDialog.prototype.getService = function () { return OPD.DiagnosisService.baseUrl; };
            DiagnosisDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], DiagnosisDialog);
            return DiagnosisDialog;
        }(Serenity.EntityDialog));
        OPD.DiagnosisDialog = DiagnosisDialog;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var DiagnosisGrid = /** @class */ (function (_super) {
            __extends(DiagnosisGrid, _super);
            function DiagnosisGrid(container) {
                return _super.call(this, container) || this;
            }
            DiagnosisGrid.prototype.getColumnsKey = function () { return 'OPD.Diagnosis'; };
            DiagnosisGrid.prototype.getDialogType = function () { return OPD.DiagnosisDialog; };
            DiagnosisGrid.prototype.getIdProperty = function () { return OPD.DiagnosisRow.idProperty; };
            DiagnosisGrid.prototype.getLocalTextPrefix = function () { return OPD.DiagnosisRow.localTextPrefix; };
            DiagnosisGrid.prototype.getService = function () { return OPD.DiagnosisService.baseUrl; };
            DiagnosisGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            DiagnosisGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], DiagnosisGrid);
            return DiagnosisGrid;
        }(Serenity.EntityGrid));
        OPD.DiagnosisGrid = DiagnosisGrid;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var ImagingsDialog = /** @class */ (function (_super) {
            __extends(ImagingsDialog, _super);
            function ImagingsDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new OPD.ImagingsForm(_this.idPrefix);
                return _this;
            }
            ImagingsDialog.prototype.getFormKey = function () { return OPD.ImagingsForm.formKey; };
            ImagingsDialog.prototype.getIdProperty = function () { return OPD.ImagingsRow.idProperty; };
            ImagingsDialog.prototype.getLocalTextPrefix = function () { return OPD.ImagingsRow.localTextPrefix; };
            ImagingsDialog.prototype.getNameProperty = function () { return OPD.ImagingsRow.nameProperty; };
            ImagingsDialog.prototype.getService = function () { return OPD.ImagingsService.baseUrl; };
            ImagingsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], ImagingsDialog);
            return ImagingsDialog;
        }(Serenity.EntityDialog));
        OPD.ImagingsDialog = ImagingsDialog;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var ImagingsGrid = /** @class */ (function (_super) {
            __extends(ImagingsGrid, _super);
            function ImagingsGrid(container) {
                return _super.call(this, container) || this;
            }
            ImagingsGrid.prototype.getColumnsKey = function () { return 'OPD.Imagings'; };
            ImagingsGrid.prototype.getDialogType = function () { return OPD.ImagingsDialog; };
            ImagingsGrid.prototype.getIdProperty = function () { return OPD.ImagingsRow.idProperty; };
            ImagingsGrid.prototype.getLocalTextPrefix = function () { return OPD.ImagingsRow.localTextPrefix; };
            ImagingsGrid.prototype.getService = function () { return OPD.ImagingsService.baseUrl; };
            ImagingsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            ImagingsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ImagingsGrid);
            return ImagingsGrid;
        }(Serenity.EntityGrid));
        OPD.ImagingsGrid = ImagingsGrid;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var LabTestDialog = /** @class */ (function (_super) {
            __extends(LabTestDialog, _super);
            function LabTestDialog() {
                var _this = _super.call(this) || this;
                _this.form = new OPD.LabTestForm(_this.idPrefix);
                _this.form.LabTestId.changeSelect2(function (e) {
                    var labTestId = _this.form.LabTestId.value;
                    if (labTestId == null || labTestId == undefined) {
                        _this.setLabID({});
                        return;
                    }
                    var id = Serenity.EditorUtils.getValue(_this.form.LabTestId);
                    EMR.Configs.LkpLabTestService.Retrieve({
                        EntityId: id
                    }, function (response) {
                        _this.setLabID(response.Entity);
                    });
                });
                return _this;
            }
            LabTestDialog.prototype.getFormKey = function () { return OPD.LabTestForm.formKey; };
            LabTestDialog.prototype.getIdProperty = function () { return OPD.LabTestRow.idProperty; };
            LabTestDialog.prototype.getLocalTextPrefix = function () { return OPD.LabTestRow.localTextPrefix; };
            LabTestDialog.prototype.getNameProperty = function () { return OPD.LabTestRow.nameProperty; };
            LabTestDialog.prototype.getService = function () { return OPD.LabTestService.baseUrl; };
            LabTestDialog.prototype.setLabID = function (details) {
                this.form.NormalRange.value = details.NormalRange;
                this.form.Unit.value = details.Unit;
            };
            LabTestDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], LabTestDialog);
            return LabTestDialog;
        }(Serenity.EntityDialog));
        OPD.LabTestDialog = LabTestDialog;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var LabTestGrid = /** @class */ (function (_super) {
            __extends(LabTestGrid, _super);
            function LabTestGrid(container) {
                return _super.call(this, container) || this;
            }
            LabTestGrid.prototype.getColumnsKey = function () { return 'OPD.LabTest'; };
            LabTestGrid.prototype.getDialogType = function () { return OPD.LabTestDialog; };
            LabTestGrid.prototype.getIdProperty = function () { return OPD.LabTestRow.idProperty; };
            LabTestGrid.prototype.getLocalTextPrefix = function () { return OPD.LabTestRow.localTextPrefix; };
            LabTestGrid.prototype.getService = function () { return OPD.LabTestService.baseUrl; };
            LabTestGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            LabTestGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], LabTestGrid);
            return LabTestGrid;
        }(Serenity.EntityGrid));
        OPD.LabTestGrid = LabTestGrid;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var OpdBloodTransfusionsDialog = /** @class */ (function (_super) {
            __extends(OpdBloodTransfusionsDialog, _super);
            function OpdBloodTransfusionsDialog() {
                var _this = _super.call(this) || this;
                _this.form = new OPD.OpdBloodTransfusionsForm(_this.idPrefix);
                var getDate = new Date();
                var todyDate = getDate.getTime();
                _this.form.RecDateTime.addValidationRule(_this.uniqueName, function (e) {
                    var newDate = _this.form.RecDateTime.valueAsDate.getTime();
                    if (newDate > todyDate) {
                        return "Date cannot be bigger than today! Please correct it";
                    }
                    var oneday = 24 * 60 * 60 * 1000;
                    var diff = Math.abs(getDate.getTime() - _this.form.RecDateTime.valueAsDate.getTime());
                    var diffdays = Math.ceil(diff / oneday);
                    if (diffdays > 5) {
                        return "The date is too early to enter. Pleae enter a valid date";
                    }
                });
                _this.form.RecDateTime.change(function (e) {
                    _this.form.SRecDate.value = convertToShamsi(_this.form.RecDateTime.valueAsDate);
                });
                _this.form.SRecDate.change(function (e) {
                    _this.form.RecDateTime.valueAsDate = convertToGregorian(_this.form.SRecDate.value.toString());
                });
                return _this;
            }
            OpdBloodTransfusionsDialog.prototype.getFormKey = function () { return OPD.OpdBloodTransfusionsForm.formKey; };
            OpdBloodTransfusionsDialog.prototype.getIdProperty = function () { return OPD.OpdBloodTransfusionsRow.idProperty; };
            OpdBloodTransfusionsDialog.prototype.getLocalTextPrefix = function () { return OPD.OpdBloodTransfusionsRow.localTextPrefix; };
            OpdBloodTransfusionsDialog.prototype.getNameProperty = function () { return OPD.OpdBloodTransfusionsRow.nameProperty; };
            OpdBloodTransfusionsDialog.prototype.getService = function () { return OPD.OpdBloodTransfusionsService.baseUrl; };
            OpdBloodTransfusionsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], OpdBloodTransfusionsDialog);
            return OpdBloodTransfusionsDialog;
        }(Serenity.EntityDialog));
        OPD.OpdBloodTransfusionsDialog = OpdBloodTransfusionsDialog;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var OpdBloodTransfusionsGrid = /** @class */ (function (_super) {
            __extends(OpdBloodTransfusionsGrid, _super);
            function OpdBloodTransfusionsGrid(container) {
                return _super.call(this, container) || this;
            }
            OpdBloodTransfusionsGrid.prototype.getColumnsKey = function () { return 'OPD.OpdBloodTransfusions'; };
            OpdBloodTransfusionsGrid.prototype.getDialogType = function () { return OPD.OpdBloodTransfusionsDialog; };
            OpdBloodTransfusionsGrid.prototype.getIdProperty = function () { return OPD.OpdBloodTransfusionsRow.idProperty; };
            OpdBloodTransfusionsGrid.prototype.getLocalTextPrefix = function () { return OPD.OpdBloodTransfusionsRow.localTextPrefix; };
            OpdBloodTransfusionsGrid.prototype.getService = function () { return OPD.OpdBloodTransfusionsService.baseUrl; };
            OpdBloodTransfusionsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], OpdBloodTransfusionsGrid);
            return OpdBloodTransfusionsGrid;
        }(Serenity.EntityGrid));
        OPD.OpdBloodTransfusionsGrid = OpdBloodTransfusionsGrid;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var OpdMedadministrationDialog = /** @class */ (function (_super) {
            __extends(OpdMedadministrationDialog, _super);
            function OpdMedadministrationDialog() {
                var _this = _super.call(this) || this;
                _this.form = new OPD.OpdMedadministrationForm(_this.idPrefix);
                var getDate = new Date();
                var todyDate = getDate.getTime();
                _this.form.RecDateTime.addValidationRule(_this.uniqueName, function (e) {
                    var newDate = _this.form.RecDateTime.valueAsDate.getTime();
                    if (newDate > todyDate) {
                        return "Date cannot be bigger than today! Please correct it";
                    }
                    var oneday = 24 * 60 * 60 * 1000;
                    var diff = Math.abs(getDate.getTime() - _this.form.RecDateTime.valueAsDate.getTime());
                    var diffdays = Math.ceil(diff / oneday);
                    if (diffdays > 5) {
                        return "The date is too early to enter. Pleae enter a valid date";
                    }
                });
                _this.form.AppDateTime.addValidationRule(_this.uniqueName, function (e) {
                    var newDate = _this.form.AppDateTime.valueAsDate.getTime();
                    if (newDate > todyDate) {
                        return "Date cannot be bigger than today! Please correct it";
                    }
                    var oneday = 24 * 60 * 60 * 1000;
                    var diff = Math.abs(getDate.getTime() - _this.form.AppDateTime.valueAsDate.getTime());
                    var diffdays = Math.ceil(diff / oneday);
                    if (diffdays > 5) {
                        return "The date is too early to enter. Pleae enter a valid date";
                    }
                });
                _this.form.RecDateTime.change(function (e) {
                    _this.form.RecSDate.value = convertToShamsi(_this.form.RecDateTime.valueAsDate);
                });
                _this.form.RecSDate.change(function (e) {
                    _this.form.RecDateTime.valueAsDate = convertToGregorian(_this.form.RecSDate.value.toString());
                });
                _this.form.AppDateTime.change(function (e) {
                    _this.form.AppSDate.value = convertToShamsi(_this.form.AppDateTime.valueAsDate);
                });
                _this.form.AppSDate.change(function (e) {
                    _this.form.AppDateTime.valueAsDate = convertToGregorian(_this.form.AppSDate.value.toString());
                });
                return _this;
            }
            OpdMedadministrationDialog.prototype.getFormKey = function () { return OPD.OpdMedadministrationForm.formKey; };
            OpdMedadministrationDialog.prototype.getIdProperty = function () { return OPD.OpdMedadministrationRow.idProperty; };
            OpdMedadministrationDialog.prototype.getLocalTextPrefix = function () { return OPD.OpdMedadministrationRow.localTextPrefix; };
            OpdMedadministrationDialog.prototype.getNameProperty = function () { return OPD.OpdMedadministrationRow.nameProperty; };
            OpdMedadministrationDialog.prototype.getService = function () { return OPD.OpdMedadministrationService.baseUrl; };
            OpdMedadministrationDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], OpdMedadministrationDialog);
            return OpdMedadministrationDialog;
        }(Serenity.EntityDialog));
        OPD.OpdMedadministrationDialog = OpdMedadministrationDialog;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var OpdMedadministrationGrid = /** @class */ (function (_super) {
            __extends(OpdMedadministrationGrid, _super);
            function OpdMedadministrationGrid(container) {
                return _super.call(this, container) || this;
            }
            OpdMedadministrationGrid.prototype.getColumnsKey = function () { return 'OPD.OpdMedadministration'; };
            OpdMedadministrationGrid.prototype.getDialogType = function () { return OPD.OpdMedadministrationDialog; };
            OpdMedadministrationGrid.prototype.getIdProperty = function () { return OPD.OpdMedadministrationRow.idProperty; };
            OpdMedadministrationGrid.prototype.getLocalTextPrefix = function () { return OPD.OpdMedadministrationRow.localTextPrefix; };
            OpdMedadministrationGrid.prototype.getService = function () { return OPD.OpdMedadministrationService.baseUrl; };
            OpdMedadministrationGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], OpdMedadministrationGrid);
            return OpdMedadministrationGrid;
        }(Serenity.EntityGrid));
        OPD.OpdMedadministrationGrid = OpdMedadministrationGrid;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var PatientHistoryDialog = /** @class */ (function (_super) {
            __extends(PatientHistoryDialog, _super);
            function PatientHistoryDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new OPD.PatientHistoryForm(_this.idPrefix);
                return _this;
            }
            PatientHistoryDialog.prototype.getFormKey = function () { return OPD.PatientHistoryForm.formKey; };
            PatientHistoryDialog.prototype.getIdProperty = function () { return OPD.PatientHistoryRow.idProperty; };
            PatientHistoryDialog.prototype.getLocalTextPrefix = function () { return OPD.PatientHistoryRow.localTextPrefix; };
            PatientHistoryDialog.prototype.getNameProperty = function () { return OPD.PatientHistoryRow.nameProperty; };
            PatientHistoryDialog.prototype.getService = function () { return OPD.PatientHistoryService.baseUrl; };
            PatientHistoryDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], PatientHistoryDialog);
            return PatientHistoryDialog;
        }(Serenity.EntityDialog));
        OPD.PatientHistoryDialog = PatientHistoryDialog;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var PatientHistoryGrid = /** @class */ (function (_super) {
            __extends(PatientHistoryGrid, _super);
            function PatientHistoryGrid(container) {
                return _super.call(this, container) || this;
            }
            PatientHistoryGrid.prototype.getColumnsKey = function () { return 'OPD.PatientHistory'; };
            PatientHistoryGrid.prototype.getDialogType = function () { return OPD.PatientHistoryDialog; };
            PatientHistoryGrid.prototype.getIdProperty = function () { return OPD.PatientHistoryRow.idProperty; };
            PatientHistoryGrid.prototype.getLocalTextPrefix = function () { return OPD.PatientHistoryRow.localTextPrefix; };
            PatientHistoryGrid.prototype.getService = function () { return OPD.PatientHistoryService.baseUrl; };
            PatientHistoryGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            PatientHistoryGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], PatientHistoryGrid);
            return PatientHistoryGrid;
        }(Serenity.EntityGrid));
        OPD.PatientHistoryGrid = PatientHistoryGrid;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var PatientsDialog = /** @class */ (function (_super) {
            __extends(PatientsDialog, _super);
            function PatientsDialog() {
                var _this = _super.call(this) || this;
                _this.form = new OPD.PatientsForm(_this.idPrefix);
                _this.patientVisits = new OPD.VisitsTabGrid(_this.byId('VisitsGrid'));
                _this.patientVisits.openDialogsAsPanel = true;
                EMR.DialogUtils.pendingChangesConfirmation(_this.element, function () { return _this.getSaveState() != _this.loadedState; });
                return _this;
            }
            PatientsDialog.prototype.getFormKey = function () { return OPD.PatientsForm.formKey; };
            PatientsDialog.prototype.getIdProperty = function () { return OPD.PatientsRow.idProperty; };
            PatientsDialog.prototype.getLocalTextPrefix = function () { return OPD.PatientsRow.localTextPrefix; };
            PatientsDialog.prototype.getNameProperty = function () { return OPD.PatientsRow.nameProperty; };
            PatientsDialog.prototype.getService = function () { return OPD.PatientsService.baseUrl; };
            PatientsDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }), 1);
                // We could also remove delete button here, but for demonstration 
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                buttons.push({
                    title: 'History',
                    cssClass: 'print-preview-button',
                    hint: "View all visits",
                    onClick: function () {
                        Q.postToService({ url: '/Ver/Patients#edit/' + _this.entity.Mrid, request: null, target: '_blank' });
                    }
                });
                return buttons;
            };
            PatientsDialog.prototype.getSaveState = function () {
                try {
                    return $.toJSON(this.getSaveEntity());
                }
                catch (e) {
                    return null;
                }
            };
            PatientsDialog.prototype.loadResponse = function (data) {
                _super.prototype.loadResponse.call(this, data);
                this.loadedState = this.getSaveState();
            };
            PatientsDialog.prototype.loadEntity = function (entity) {
                _super.prototype.loadEntity.call(this, entity);
                Serenity.TabsExtensions.setDisabled(this.tabs, 'Visits', this.isNewOrDeleted());
                this.patientVisits.Mrid = entity.Mrid;
            };
            PatientsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], PatientsDialog);
            return PatientsDialog;
        }(Serenity.EntityDialog));
        OPD.PatientsDialog = PatientsDialog;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var PatientsGrid = /** @class */ (function (_super) {
            __extends(PatientsGrid, _super);
            function PatientsGrid(container) {
                return _super.call(this, container) || this;
            }
            PatientsGrid.prototype.getColumnsKey = function () { return 'OPD.Patients'; };
            PatientsGrid.prototype.getDialogType = function () { return OPD.PatientsDialog; };
            PatientsGrid.prototype.getIdProperty = function () { return OPD.PatientsRow.idProperty; };
            PatientsGrid.prototype.getLocalTextPrefix = function () { return OPD.PatientsRow.localTextPrefix; };
            PatientsGrid.prototype.getService = function () { return OPD.PatientsService.baseUrl; };
            PatientsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            PatientsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], PatientsGrid);
            return PatientsGrid;
        }(Serenity.EntityGrid));
        OPD.PatientsGrid = PatientsGrid;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var VisitsDialog = /** @class */ (function (_super) {
            __extends(VisitsDialog, _super);
            function VisitsDialog() {
                var _this = _super.call(this) || this;
                _this.form = new OPD.VisitsForm(_this.idPrefix);
                _this.vitalsignGrid = new OPD.VitalSignsTabGrid(_this.byId('VitalSignsGrid'));
                _this.vitalsignGrid.openDialogsAsPanel = true;
                _this.patienthistoryGrid = new OPD.PatientHistoryTabGrid(_this.byId('PatientHistoryGrid'));
                _this.patienthistoryGrid.openDialogsAsPanel = true;
                _this.physicalexaminationGrid = new OPD.PhysicalExaminationTabGrid(_this.byId('PhysicalExaminationGrid'));
                _this.physicalexaminationGrid.openDialogsAsPanel = true;
                _this.labtestGrid = new OPD.LabTestTabGrid(_this.byId('LabTestGrid'));
                _this.labtestGrid.openDialogsAsPanel = true;
                _this.medprescriptionsGrid = new OPD.PrescriptionsTabGrid(_this.byId('PrescriptionsGrid'));
                _this.medprescriptionsGrid.openDialogsAsPanel = true;
                _this.imagingGrid = new OPD.ImagingsTabGrid(_this.byId('ImagingsGrid'));
                _this.imagingGrid.openDialogsAsPanel = true;
                _this.recommendationsGrid = new OPD.RecommedationsTabGrid(_this.byId('RecommedationsGrid'));
                _this.recommendationsGrid.openDialogsAsPanel = true;
                _this.diagnosisGrid = new OPD.DiagnosisTabGrid(_this.byId('DiagnosisGrid'));
                _this.diagnosisGrid.openDialogsAsPanel = true;
                //this.schedulesGrid = new SchedulesTabGrid(this.byId('VschedulingGrid'));
                //this.schedulesGrid.openDialogsAsPanel = true;    
                _this.bloodTransfusionGrid = new OPD.OpdBloodTransfusionsTabGrid(_this.byId('OpdBloodTransfusionsGrid'));
                _this.bloodTransfusionGrid.openDialogsAsPanel = true;
                EMR.DialogUtils.pendingChangesConfirmation(_this.element, function () { return _this.getSaveState() != _this.loadedState; });
                return _this;
            }
            VisitsDialog.prototype.getFormKey = function () { return OPD.VisitsForm.formKey; };
            VisitsDialog.prototype.getIdProperty = function () { return OPD.VisitsRow.idProperty; };
            VisitsDialog.prototype.getLocalTextPrefix = function () { return OPD.VisitsRow.localTextPrefix; };
            VisitsDialog.prototype.getNameProperty = function () { return OPD.VisitsRow.nameProperty; };
            VisitsDialog.prototype.getService = function () { return OPD.VisitsService.baseUrl; };
            VisitsDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }), 1);
                //buttons.splice(Q.indexOf(buttons, x => x.cssClass == "apply-changes-button"), 1);
                // We could also remove delete button here, but for demonstration 
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                return buttons;
            };
            VisitsDialog.prototype.getSaveState = function () {
                try {
                    return $.toJSON(this.getSaveEntity());
                }
                catch (e) {
                    return null;
                }
            };
            VisitsDialog.prototype.loadResponse = function (data) {
                _super.prototype.loadResponse.call(this, data);
                this.loadedState = this.getSaveState();
            };
            VisitsDialog.prototype.loadEntity = function (entity) {
                _super.prototype.loadEntity.call(this, entity);
                Serenity.TabsExtensions.setDisabled(this.tabs, 'VitalSigns', this.isNewOrDeleted());
                Serenity.TabsExtensions.setDisabled(this.tabs, 'PatientHistory', this.isNewOrDeleted());
                Serenity.TabsExtensions.setDisabled(this.tabs, 'LabTest', this.isNewOrDeleted());
                Serenity.TabsExtensions.setDisabled(this.tabs, 'PhysicalExamination', this.isNewOrDeleted());
                Serenity.TabsExtensions.setDisabled(this.tabs, 'Prescriptions', this.isNewOrDeleted());
                Serenity.TabsExtensions.setDisabled(this.tabs, 'Imagings', this.isNewOrDeleted());
                Serenity.TabsExtensions.setDisabled(this.tabs, 'Recommedations', this.isNewOrDeleted());
                Serenity.TabsExtensions.setDisabled(this.tabs, 'Diagnosis', this.isNewOrDeleted());
                Serenity.TabsExtensions.setDisabled(this.tabs, 'OpdBloodTransfusions', this.isNewOrDeleted());
                //Serenity.TabsExtensions.setDisabled(this.tabs, 'Vscheduling', this.isNewOrDeleted());
                this.vitalsignGrid.VisitId = entity.VisitId == null ? null : entity.VisitId;
                this.patienthistoryGrid.VisitId = entity.VisitId == null ? null : entity.VisitId;
                this.physicalexaminationGrid.VisitId = entity.VisitId == null ? null : entity.VisitId;
                this.labtestGrid.VisitId = entity.VisitId == null ? null : entity.VisitId;
                this.medprescriptionsGrid.VisitId = entity.VisitId == null ? null : entity.VisitId;
                this.imagingGrid.VisitId = entity.VisitId == null ? null : entity.VisitId;
                this.recommendationsGrid.VisitId = entity.VisitId == null ? null : entity.VisitId;
                this.diagnosisGrid.VisitId = entity.VisitId == null ? null : entity.VisitId;
                //this.schedulesGrid.VisitId = entity.VisitId == null ? null : entity.VisitId;
                this.bloodTransfusionGrid.VisitId = entity.VisitId == null ? null : entity.VisitId;
            };
            VisitsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], VisitsDialog);
            return VisitsDialog;
        }(Serenity.EntityDialog));
        OPD.VisitsDialog = VisitsDialog;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
/// <reference path="../visits/visitsdialog.ts" />
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var VisitsTabDialog = /** @class */ (function (_super) {
            __extends(VisitsTabDialog, _super);
            function VisitsTabDialog() {
                return _super.call(this) || this;
            }
            VisitsTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.Mrid, true);
            };
            VisitsTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], VisitsTabDialog);
            return VisitsTabDialog;
        }(OPD.VisitsDialog));
        OPD.VisitsTabDialog = VisitsTabDialog;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var VisitsGrid = /** @class */ (function (_super) {
            __extends(VisitsGrid, _super);
            function VisitsGrid(container) {
                return _super.call(this, container) || this;
            }
            VisitsGrid.prototype.getColumnsKey = function () { return 'OPD.Visits'; };
            VisitsGrid.prototype.getDialogType = function () { return OPD.VisitsDialog; };
            VisitsGrid.prototype.getIdProperty = function () { return OPD.VisitsRow.idProperty; };
            VisitsGrid.prototype.getLocalTextPrefix = function () { return OPD.VisitsRow.localTextPrefix; };
            VisitsGrid.prototype.getService = function () { return OPD.VisitsService.baseUrl; };
            VisitsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "refresh-button"; }), 1);
                return buttons;
            };
            VisitsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], VisitsGrid);
            return VisitsGrid;
        }(Serenity.EntityGrid));
        OPD.VisitsGrid = VisitsGrid;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
/// <reference path="../visits/visitsgrid.ts" />
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var VisitsTabGrid = /** @class */ (function (_super) {
            __extends(VisitsTabGrid, _super);
            function VisitsTabGrid(container) {
                return _super.call(this, container) || this;
            }
            VisitsTabGrid.prototype.getDialogType = function () { return OPD.VisitsTabDialog; };
            VisitsTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            VisitsTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            VisitsTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            VisitsTabGrid.prototype.addButtonClick = function () {
                this.editItem({ Mrid: this.Mrid });
            };
            VisitsTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            VisitsTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.Mrid;
            };
            Object.defineProperty(VisitsTabGrid.prototype, "Mrid", {
                get: function () {
                    return this._Mrid;
                },
                set: function (value) {
                    if (this._Mrid !== value) {
                        this._Mrid = value;
                        this.setEquality('Mrid', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            VisitsTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], VisitsTabGrid);
            return VisitsTabGrid;
        }(OPD.VisitsGrid));
        OPD.VisitsTabGrid = VisitsTabGrid;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var PhysicalExaminationDialog = /** @class */ (function (_super) {
            __extends(PhysicalExaminationDialog, _super);
            function PhysicalExaminationDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new OPD.PhysicalExaminationForm(_this.idPrefix);
                return _this;
            }
            PhysicalExaminationDialog.prototype.getFormKey = function () { return OPD.PhysicalExaminationForm.formKey; };
            PhysicalExaminationDialog.prototype.getIdProperty = function () { return OPD.PhysicalExaminationRow.idProperty; };
            PhysicalExaminationDialog.prototype.getLocalTextPrefix = function () { return OPD.PhysicalExaminationRow.localTextPrefix; };
            PhysicalExaminationDialog.prototype.getNameProperty = function () { return OPD.PhysicalExaminationRow.nameProperty; };
            PhysicalExaminationDialog.prototype.getService = function () { return OPD.PhysicalExaminationService.baseUrl; };
            PhysicalExaminationDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], PhysicalExaminationDialog);
            return PhysicalExaminationDialog;
        }(Serenity.EntityDialog));
        OPD.PhysicalExaminationDialog = PhysicalExaminationDialog;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var PhysicalExaminationGrid = /** @class */ (function (_super) {
            __extends(PhysicalExaminationGrid, _super);
            function PhysicalExaminationGrid(container) {
                return _super.call(this, container) || this;
            }
            PhysicalExaminationGrid.prototype.getColumnsKey = function () { return 'OPD.PhysicalExamination'; };
            PhysicalExaminationGrid.prototype.getDialogType = function () { return OPD.PhysicalExaminationDialog; };
            PhysicalExaminationGrid.prototype.getIdProperty = function () { return OPD.PhysicalExaminationRow.idProperty; };
            PhysicalExaminationGrid.prototype.getLocalTextPrefix = function () { return OPD.PhysicalExaminationRow.localTextPrefix; };
            PhysicalExaminationGrid.prototype.getService = function () { return OPD.PhysicalExaminationService.baseUrl; };
            PhysicalExaminationGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            PhysicalExaminationGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], PhysicalExaminationGrid);
            return PhysicalExaminationGrid;
        }(Serenity.EntityGrid));
        OPD.PhysicalExaminationGrid = PhysicalExaminationGrid;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
/// <reference path="../opdmedadministration/opdmedadministrationdialog.ts" />
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var OpdMedadministrationTabDialog = /** @class */ (function (_super) {
            __extends(OpdMedadministrationTabDialog, _super);
            function OpdMedadministrationTabDialog() {
                return _super.call(this) || this;
            }
            OpdMedadministrationTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.OrderId, true);
            };
            OpdMedadministrationTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], OpdMedadministrationTabDialog);
            return OpdMedadministrationTabDialog;
        }(OPD.OpdMedadministrationDialog));
        OPD.OpdMedadministrationTabDialog = OpdMedadministrationTabDialog;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
/// <reference path="../opdmedadministration/opdmedadministrationgrid.ts" />
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var OpdMedadministrationTabGrid = /** @class */ (function (_super) {
            __extends(OpdMedadministrationTabGrid, _super);
            function OpdMedadministrationTabGrid(container) {
                return _super.call(this, container) || this;
            }
            OpdMedadministrationTabGrid.prototype.getDialogType = function () { return OPD.OpdMedadministrationTabDialog; };
            OpdMedadministrationTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            OpdMedadministrationTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            OpdMedadministrationTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            OpdMedadministrationTabGrid.prototype.addButtonClick = function () {
                this.editItem({ OrderId: this.OrderId });
            };
            OpdMedadministrationTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            OpdMedadministrationTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.OrderId;
            };
            Object.defineProperty(OpdMedadministrationTabGrid.prototype, "OrderId", {
                get: function () {
                    return this._OrderId;
                },
                set: function (value) {
                    if (this._OrderId !== value) {
                        this._OrderId = value;
                        this.setEquality('OrderId', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            OpdMedadministrationTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], OpdMedadministrationTabGrid);
            return OpdMedadministrationTabGrid;
        }(OPD.OpdMedadministrationGrid));
        OPD.OpdMedadministrationTabGrid = OpdMedadministrationTabGrid;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var PrescriptionsDialog = /** @class */ (function (_super) {
            __extends(PrescriptionsDialog, _super);
            function PrescriptionsDialog() {
                var _this = _super.call(this) || this;
                _this.form = new OPD.PrescriptionsForm(_this.idPrefix);
                _this.opdMedAdministration = new OPD.OpdMedadministrationTabGrid(_this.byId('OpdMedadministrationGrid'));
                _this.opdMedAdministration.openDialogsAsPanel = true;
                EMR.DialogUtils.pendingChangesConfirmation(_this.element, function () { return _this.getSaveState() != _this.loadedState; });
                return _this;
            }
            PrescriptionsDialog.prototype.getFormKey = function () { return OPD.PrescriptionsForm.formKey; };
            PrescriptionsDialog.prototype.getIdProperty = function () { return OPD.PrescriptionsRow.idProperty; };
            PrescriptionsDialog.prototype.getLocalTextPrefix = function () { return OPD.PrescriptionsRow.localTextPrefix; };
            PrescriptionsDialog.prototype.getNameProperty = function () { return OPD.PrescriptionsRow.nameProperty; };
            PrescriptionsDialog.prototype.getService = function () { return OPD.PrescriptionsService.baseUrl; };
            PrescriptionsDialog.prototype.getSaveState = function () {
                try {
                    return $.toJSON(this.getSaveEntity());
                }
                catch (e) {
                    return null;
                }
            };
            PrescriptionsDialog.prototype.loadResponse = function (data) {
                _super.prototype.loadResponse.call(this, data);
                this.loadedState = this.getSaveState();
            };
            PrescriptionsDialog.prototype.loadEntity = function (entity) {
                _super.prototype.loadEntity.call(this, entity);
                Serenity.TabsExtensions.setDisabled(this.tabs, 'OpdMedadministration', this.isNewOrDeleted());
                this.opdMedAdministration.OrderId = entity.OrderId == null ? null : entity.OrderId;
                //this.opdMedAdministration.OrderId = entity.OrderId;
            };
            PrescriptionsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], PrescriptionsDialog);
            return PrescriptionsDialog;
        }(Serenity.EntityDialog));
        OPD.PrescriptionsDialog = PrescriptionsDialog;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var PrescriptionsGrid = /** @class */ (function (_super) {
            __extends(PrescriptionsGrid, _super);
            function PrescriptionsGrid(container) {
                return _super.call(this, container) || this;
            }
            PrescriptionsGrid.prototype.getColumnsKey = function () { return 'OPD.Prescriptions'; };
            PrescriptionsGrid.prototype.getDialogType = function () { return OPD.PrescriptionsDialog; };
            PrescriptionsGrid.prototype.getIdProperty = function () { return OPD.PrescriptionsRow.idProperty; };
            PrescriptionsGrid.prototype.getLocalTextPrefix = function () { return OPD.PrescriptionsRow.localTextPrefix; };
            PrescriptionsGrid.prototype.getService = function () { return OPD.PrescriptionsService.baseUrl; };
            PrescriptionsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            PrescriptionsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], PrescriptionsGrid);
            return PrescriptionsGrid;
        }(Serenity.EntityGrid));
        OPD.PrescriptionsGrid = PrescriptionsGrid;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var RecommedationsDialog = /** @class */ (function (_super) {
            __extends(RecommedationsDialog, _super);
            function RecommedationsDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new OPD.RecommedationsForm(_this.idPrefix);
                return _this;
            }
            RecommedationsDialog.prototype.getFormKey = function () { return OPD.RecommedationsForm.formKey; };
            RecommedationsDialog.prototype.getIdProperty = function () { return OPD.RecommedationsRow.idProperty; };
            RecommedationsDialog.prototype.getLocalTextPrefix = function () { return OPD.RecommedationsRow.localTextPrefix; };
            RecommedationsDialog.prototype.getNameProperty = function () { return OPD.RecommedationsRow.nameProperty; };
            RecommedationsDialog.prototype.getService = function () { return OPD.RecommedationsService.baseUrl; };
            RecommedationsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], RecommedationsDialog);
            return RecommedationsDialog;
        }(Serenity.EntityDialog));
        OPD.RecommedationsDialog = RecommedationsDialog;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var RecommedationsGrid = /** @class */ (function (_super) {
            __extends(RecommedationsGrid, _super);
            function RecommedationsGrid(container) {
                return _super.call(this, container) || this;
            }
            RecommedationsGrid.prototype.getColumnsKey = function () { return 'OPD.Recommedations'; };
            RecommedationsGrid.prototype.getDialogType = function () { return OPD.RecommedationsDialog; };
            RecommedationsGrid.prototype.getIdProperty = function () { return OPD.RecommedationsRow.idProperty; };
            RecommedationsGrid.prototype.getLocalTextPrefix = function () { return OPD.RecommedationsRow.localTextPrefix; };
            RecommedationsGrid.prototype.getService = function () { return OPD.RecommedationsService.baseUrl; };
            RecommedationsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            RecommedationsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], RecommedationsGrid);
            return RecommedationsGrid;
        }(Serenity.EntityGrid));
        OPD.RecommedationsGrid = RecommedationsGrid;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
/// <reference path="../diagnosis/diagnosisdialog.ts" />
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var DiagnosisTabDialog = /** @class */ (function (_super) {
            __extends(DiagnosisTabDialog, _super);
            function DiagnosisTabDialog() {
                return _super.call(this) || this;
            }
            DiagnosisTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.VisitId, true);
            };
            DiagnosisTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], DiagnosisTabDialog);
            return DiagnosisTabDialog;
        }(OPD.DiagnosisDialog));
        OPD.DiagnosisTabDialog = DiagnosisTabDialog;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
/// <reference path="../diagnosis/diagnosisgrid.ts" />
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var DiagnosisTabGrid = /** @class */ (function (_super) {
            __extends(DiagnosisTabGrid, _super);
            function DiagnosisTabGrid(container) {
                return _super.call(this, container) || this;
            }
            DiagnosisTabGrid.prototype.getDialogType = function () { return OPD.DiagnosisTabDialog; };
            DiagnosisTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            DiagnosisTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            DiagnosisTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            DiagnosisTabGrid.prototype.addButtonClick = function () {
                this.editItem({ VisitId: this.VisitId });
            };
            DiagnosisTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            DiagnosisTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.VisitId;
            };
            Object.defineProperty(DiagnosisTabGrid.prototype, "VisitId", {
                get: function () {
                    return this._VisitId;
                },
                set: function (value) {
                    if (this._VisitId !== value) {
                        this._VisitId = value;
                        this.setEquality('VisitId', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            DiagnosisTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], DiagnosisTabGrid);
            return DiagnosisTabGrid;
        }(OPD.DiagnosisGrid));
        OPD.DiagnosisTabGrid = DiagnosisTabGrid;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
/// <reference path="../imagings/imagingsdialog.ts" />
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var ImagingsTabDialog = /** @class */ (function (_super) {
            __extends(ImagingsTabDialog, _super);
            function ImagingsTabDialog() {
                return _super.call(this) || this;
            }
            ImagingsTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.VisitId, true);
            };
            ImagingsTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], ImagingsTabDialog);
            return ImagingsTabDialog;
        }(OPD.ImagingsDialog));
        OPD.ImagingsTabDialog = ImagingsTabDialog;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
/// <reference path="../imagings/imagingsgrid.ts" />
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var ImagingsTabGrid = /** @class */ (function (_super) {
            __extends(ImagingsTabGrid, _super);
            function ImagingsTabGrid(container) {
                return _super.call(this, container) || this;
            }
            ImagingsTabGrid.prototype.getDialogType = function () { return OPD.ImagingsTabDialog; };
            ImagingsTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            ImagingsTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            ImagingsTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            ImagingsTabGrid.prototype.addButtonClick = function () {
                this.editItem({ VisitId: this.VisitId });
            };
            ImagingsTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            ImagingsTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.VisitId;
            };
            Object.defineProperty(ImagingsTabGrid.prototype, "VisitId", {
                get: function () {
                    return this._VisitId;
                },
                set: function (value) {
                    if (this._VisitId !== value) {
                        this._VisitId = value;
                        this.setEquality('VisitId', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            ImagingsTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ImagingsTabGrid);
            return ImagingsTabGrid;
        }(OPD.ImagingsGrid));
        OPD.ImagingsTabGrid = ImagingsTabGrid;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
/// <reference path="../labtest/labtestdialog.ts" />
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var LabTestTabDialog = /** @class */ (function (_super) {
            __extends(LabTestTabDialog, _super);
            function LabTestTabDialog() {
                return _super.call(this) || this;
            }
            LabTestTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.VisitId, true);
            };
            LabTestTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], LabTestTabDialog);
            return LabTestTabDialog;
        }(OPD.LabTestDialog));
        OPD.LabTestTabDialog = LabTestTabDialog;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
/// <reference path="../labtest/labtestgrid.ts" />
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var LabTestTabGrid = /** @class */ (function (_super) {
            __extends(LabTestTabGrid, _super);
            function LabTestTabGrid(container) {
                return _super.call(this, container) || this;
            }
            LabTestTabGrid.prototype.getDialogType = function () { return OPD.LabTestTabDialog; };
            LabTestTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            LabTestTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            LabTestTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            LabTestTabGrid.prototype.addButtonClick = function () {
                this.editItem({ VisitId: this.VisitId });
            };
            LabTestTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            LabTestTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.VisitId;
            };
            Object.defineProperty(LabTestTabGrid.prototype, "VisitId", {
                get: function () {
                    return this._VisitId;
                },
                set: function (value) {
                    if (this._VisitId !== value) {
                        this._VisitId = value;
                        this.setEquality('VisitId', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            LabTestTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], LabTestTabGrid);
            return LabTestTabGrid;
        }(OPD.LabTestGrid));
        OPD.LabTestTabGrid = LabTestTabGrid;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Pharmacy;
    (function (Pharmacy) {
        var MedPrescriptionsDialog = /** @class */ (function (_super) {
            __extends(MedPrescriptionsDialog, _super);
            function MedPrescriptionsDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Pharmacy.MedPrescriptionsForm(_this.idPrefix);
                return _this;
            }
            MedPrescriptionsDialog.prototype.getFormKey = function () { return Pharmacy.MedPrescriptionsForm.formKey; };
            MedPrescriptionsDialog.prototype.getIdProperty = function () { return Pharmacy.MedPrescriptionsRow.idProperty; };
            MedPrescriptionsDialog.prototype.getLocalTextPrefix = function () { return Pharmacy.MedPrescriptionsRow.localTextPrefix; };
            MedPrescriptionsDialog.prototype.getNameProperty = function () { return Pharmacy.MedPrescriptionsRow.nameProperty; };
            MedPrescriptionsDialog.prototype.getService = function () { return Pharmacy.MedPrescriptionsService.baseUrl; };
            MedPrescriptionsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], MedPrescriptionsDialog);
            return MedPrescriptionsDialog;
        }(Serenity.EntityDialog));
        Pharmacy.MedPrescriptionsDialog = MedPrescriptionsDialog;
    })(Pharmacy = EMR.Pharmacy || (EMR.Pharmacy = {}));
})(EMR || (EMR = {}));
/// <reference path="../../pharmacy/medprescriptions/medprescriptionsdialog.ts" />
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var MedPrescriptionsTabDialog = /** @class */ (function (_super) {
            __extends(MedPrescriptionsTabDialog, _super);
            function MedPrescriptionsTabDialog() {
                return _super.call(this) || this;
            }
            MedPrescriptionsTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.VisitId, true);
            };
            MedPrescriptionsTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], MedPrescriptionsTabDialog);
            return MedPrescriptionsTabDialog;
        }(EMR.Pharmacy.MedPrescriptionsDialog));
        OPD.MedPrescriptionsTabDialog = MedPrescriptionsTabDialog;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Pharmacy;
    (function (Pharmacy) {
        var MedPrescriptionsGrid = /** @class */ (function (_super) {
            __extends(MedPrescriptionsGrid, _super);
            function MedPrescriptionsGrid(container) {
                return _super.call(this, container) || this;
            }
            MedPrescriptionsGrid.prototype.getColumnsKey = function () { return 'Pharmacy.MedPrescriptions'; };
            MedPrescriptionsGrid.prototype.getDialogType = function () { return Pharmacy.MedPrescriptionsDialog; };
            MedPrescriptionsGrid.prototype.getIdProperty = function () { return Pharmacy.MedPrescriptionsRow.idProperty; };
            MedPrescriptionsGrid.prototype.getLocalTextPrefix = function () { return Pharmacy.MedPrescriptionsRow.localTextPrefix; };
            MedPrescriptionsGrid.prototype.getService = function () { return Pharmacy.MedPrescriptionsService.baseUrl; };
            MedPrescriptionsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            MedPrescriptionsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], MedPrescriptionsGrid);
            return MedPrescriptionsGrid;
        }(Serenity.EntityGrid));
        Pharmacy.MedPrescriptionsGrid = MedPrescriptionsGrid;
    })(Pharmacy = EMR.Pharmacy || (EMR.Pharmacy = {}));
})(EMR || (EMR = {}));
/// <reference path="../../pharmacy/medprescriptions/medprescriptionsgrid.ts" />
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var MedPrescriptionsTabGrid = /** @class */ (function (_super) {
            __extends(MedPrescriptionsTabGrid, _super);
            function MedPrescriptionsTabGrid(container) {
                return _super.call(this, container) || this;
            }
            MedPrescriptionsTabGrid.prototype.getDialogType = function () { return OPD.MedPrescriptionsTabDialog; };
            MedPrescriptionsTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            MedPrescriptionsTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            MedPrescriptionsTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            MedPrescriptionsTabGrid.prototype.addButtonClick = function () {
                this.editItem({ VisitId: this.VisitId });
            };
            MedPrescriptionsTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            MedPrescriptionsTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.VisitId;
            };
            Object.defineProperty(MedPrescriptionsTabGrid.prototype, "VisitId", {
                get: function () {
                    return this._VisitId;
                },
                set: function (value) {
                    if (this._VisitId !== value) {
                        this._VisitId = value;
                        this.setEquality('VisitId', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            MedPrescriptionsTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], MedPrescriptionsTabGrid);
            return MedPrescriptionsTabGrid;
        }(EMR.Pharmacy.MedPrescriptionsGrid));
        OPD.MedPrescriptionsTabGrid = MedPrescriptionsTabGrid;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
/// <reference path="../opdbloodtransfusions/opdbloodtransfusionsdialog.ts" />
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var OpdBloodTransfusionsTabDialog = /** @class */ (function (_super) {
            __extends(OpdBloodTransfusionsTabDialog, _super);
            function OpdBloodTransfusionsTabDialog() {
                return _super.call(this) || this;
            }
            OpdBloodTransfusionsTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.VisitId, true);
            };
            OpdBloodTransfusionsTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], OpdBloodTransfusionsTabDialog);
            return OpdBloodTransfusionsTabDialog;
        }(OPD.OpdBloodTransfusionsDialog));
        OPD.OpdBloodTransfusionsTabDialog = OpdBloodTransfusionsTabDialog;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
/// <reference path="../opdbloodtransfusions/opdbloodtransfusionsgrid.ts" />
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var OpdBloodTransfusionsTabGrid = /** @class */ (function (_super) {
            __extends(OpdBloodTransfusionsTabGrid, _super);
            function OpdBloodTransfusionsTabGrid(container) {
                return _super.call(this, container) || this;
            }
            OpdBloodTransfusionsTabGrid.prototype.getDialogType = function () { return OPD.OpdBloodTransfusionsTabDialog; };
            OpdBloodTransfusionsTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            OpdBloodTransfusionsTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            OpdBloodTransfusionsTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            OpdBloodTransfusionsTabGrid.prototype.addButtonClick = function () {
                this.editItem({ VisitId: this.VisitId });
            };
            OpdBloodTransfusionsTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            OpdBloodTransfusionsTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.VisitId;
            };
            Object.defineProperty(OpdBloodTransfusionsTabGrid.prototype, "VisitId", {
                get: function () {
                    return this._VisitId;
                },
                set: function (value) {
                    if (this._VisitId !== value) {
                        this._VisitId = value;
                        this.setEquality('VisitId', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            OpdBloodTransfusionsTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], OpdBloodTransfusionsTabGrid);
            return OpdBloodTransfusionsTabGrid;
        }(OPD.OpdBloodTransfusionsGrid));
        OPD.OpdBloodTransfusionsTabGrid = OpdBloodTransfusionsTabGrid;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
/// <reference path="../patienthistory/patienthistorydialog.ts" />
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var PatientHistoryTabDialog = /** @class */ (function (_super) {
            __extends(PatientHistoryTabDialog, _super);
            function PatientHistoryTabDialog() {
                return _super.call(this) || this;
            }
            PatientHistoryTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.VisitId, true);
            };
            PatientHistoryTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], PatientHistoryTabDialog);
            return PatientHistoryTabDialog;
        }(OPD.PatientHistoryDialog));
        OPD.PatientHistoryTabDialog = PatientHistoryTabDialog;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
/// <reference path="../patienthistory/patienthistorygrid.ts" />
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var PatientHistoryTabGrid = /** @class */ (function (_super) {
            __extends(PatientHistoryTabGrid, _super);
            function PatientHistoryTabGrid(container) {
                return _super.call(this, container) || this;
            }
            PatientHistoryTabGrid.prototype.getDialogType = function () { return OPD.PatientHistoryTabDialog; };
            PatientHistoryTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            PatientHistoryTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            PatientHistoryTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            PatientHistoryTabGrid.prototype.addButtonClick = function () {
                this.editItem({ VisitId: this.VisitId });
            };
            PatientHistoryTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            PatientHistoryTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.VisitId;
            };
            Object.defineProperty(PatientHistoryTabGrid.prototype, "VisitId", {
                get: function () {
                    return this._VisitId;
                },
                set: function (value) {
                    if (this._VisitId !== value) {
                        this._VisitId = value;
                        this.setEquality('VisitId', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            PatientHistoryTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], PatientHistoryTabGrid);
            return PatientHistoryTabGrid;
        }(OPD.PatientHistoryGrid));
        OPD.PatientHistoryTabGrid = PatientHistoryTabGrid;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
/// <reference path="../physicalexamination/physicalexaminationdialog.ts" />
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var PhysicalExaminationTabDialog = /** @class */ (function (_super) {
            __extends(PhysicalExaminationTabDialog, _super);
            function PhysicalExaminationTabDialog() {
                return _super.call(this) || this;
            }
            PhysicalExaminationTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.VisitId, true);
            };
            PhysicalExaminationTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], PhysicalExaminationTabDialog);
            return PhysicalExaminationTabDialog;
        }(OPD.PhysicalExaminationDialog));
        OPD.PhysicalExaminationTabDialog = PhysicalExaminationTabDialog;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
/// <reference path="../physicalexamination/physicalexaminationgrid.ts" />
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var PhysicalExaminationTabGrid = /** @class */ (function (_super) {
            __extends(PhysicalExaminationTabGrid, _super);
            function PhysicalExaminationTabGrid(container) {
                return _super.call(this, container) || this;
            }
            PhysicalExaminationTabGrid.prototype.getDialogType = function () { return OPD.PhysicalExaminationTabDialog; };
            PhysicalExaminationTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            PhysicalExaminationTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            PhysicalExaminationTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            PhysicalExaminationTabGrid.prototype.addButtonClick = function () {
                this.editItem({ VisitId: this.VisitId });
            };
            PhysicalExaminationTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            PhysicalExaminationTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.VisitId;
            };
            Object.defineProperty(PhysicalExaminationTabGrid.prototype, "VisitId", {
                get: function () {
                    return this._VisitId;
                },
                set: function (value) {
                    if (this._VisitId !== value) {
                        this._VisitId = value;
                        this.setEquality('VisitId', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            PhysicalExaminationTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], PhysicalExaminationTabGrid);
            return PhysicalExaminationTabGrid;
        }(OPD.PhysicalExaminationGrid));
        OPD.PhysicalExaminationTabGrid = PhysicalExaminationTabGrid;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
/// <reference path="../prescriptions/prescriptionsdialog.ts" />
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var PrescriptionsTabDialog = /** @class */ (function (_super) {
            __extends(PrescriptionsTabDialog, _super);
            function PrescriptionsTabDialog() {
                return _super.call(this) || this;
            }
            PrescriptionsTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.VisitId, true);
            };
            PrescriptionsTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], PrescriptionsTabDialog);
            return PrescriptionsTabDialog;
        }(OPD.PrescriptionsDialog));
        OPD.PrescriptionsTabDialog = PrescriptionsTabDialog;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
/// <reference path="../prescriptions/prescriptionsgrid.ts" />
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var PrescriptionsTabGrid = /** @class */ (function (_super) {
            __extends(PrescriptionsTabGrid, _super);
            function PrescriptionsTabGrid(container) {
                return _super.call(this, container) || this;
            }
            PrescriptionsTabGrid.prototype.getDialogType = function () { return OPD.PrescriptionsTabDialog; };
            PrescriptionsTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            PrescriptionsTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            PrescriptionsTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            PrescriptionsTabGrid.prototype.addButtonClick = function () {
                this.editItem({ VisitId: this.VisitId });
            };
            PrescriptionsTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            PrescriptionsTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.VisitId;
            };
            Object.defineProperty(PrescriptionsTabGrid.prototype, "VisitId", {
                get: function () {
                    return this._VisitId;
                },
                set: function (value) {
                    if (this._VisitId !== value) {
                        this._VisitId = value;
                        this.setEquality('VisitId', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            PrescriptionsTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], PrescriptionsTabGrid);
            return PrescriptionsTabGrid;
        }(OPD.PrescriptionsGrid));
        OPD.PrescriptionsTabGrid = PrescriptionsTabGrid;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
/// <reference path="../recommedations/recommedationsdialog.ts" />
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var RecommedationsTabDialog = /** @class */ (function (_super) {
            __extends(RecommedationsTabDialog, _super);
            function RecommedationsTabDialog() {
                return _super.call(this) || this;
            }
            RecommedationsTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.VisitId, true);
            };
            RecommedationsTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], RecommedationsTabDialog);
            return RecommedationsTabDialog;
        }(OPD.RecommedationsDialog));
        OPD.RecommedationsTabDialog = RecommedationsTabDialog;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
/// <reference path="../recommedations/recommedationsgrid.ts" />
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var RecommedationsTabGrid = /** @class */ (function (_super) {
            __extends(RecommedationsTabGrid, _super);
            function RecommedationsTabGrid(container) {
                return _super.call(this, container) || this;
            }
            RecommedationsTabGrid.prototype.getDialogType = function () { return OPD.RecommedationsTabDialog; };
            RecommedationsTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            RecommedationsTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            RecommedationsTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            RecommedationsTabGrid.prototype.addButtonClick = function () {
                this.editItem({ VisitId: this.VisitId });
            };
            RecommedationsTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            RecommedationsTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.VisitId;
            };
            Object.defineProperty(RecommedationsTabGrid.prototype, "VisitId", {
                get: function () {
                    return this._VisitId;
                },
                set: function (value) {
                    if (this._VisitId !== value) {
                        this._VisitId = value;
                        this.setEquality('VisitId', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            RecommedationsTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], RecommedationsTabGrid);
            return RecommedationsTabGrid;
        }(OPD.RecommedationsGrid));
        OPD.RecommedationsTabGrid = RecommedationsTabGrid;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var VschedulingDialog = /** @class */ (function (_super) {
            __extends(VschedulingDialog, _super);
            function VschedulingDialog() {
                var _this = _super.call(this) || this;
                _this.form = new OPD.VschedulingForm(_this.idPrefix);
                _this.form.PlanDate.change(function (e) {
                    _this.form.SPlanDate.value = convertToShamsi(_this.form.PlanDate.valueAsDate);
                });
                _this.form.SPlanDate.change(function (e) {
                    _this.form.PlanDate.valueAsDate = convertToGregorian(_this.form.SPlanDate.value.toString());
                });
                return _this;
            }
            VschedulingDialog.prototype.getFormKey = function () { return OPD.VschedulingForm.formKey; };
            VschedulingDialog.prototype.getIdProperty = function () { return OPD.VschedulingRow.idProperty; };
            VschedulingDialog.prototype.getLocalTextPrefix = function () { return OPD.VschedulingRow.localTextPrefix; };
            VschedulingDialog.prototype.getNameProperty = function () { return OPD.VschedulingRow.nameProperty; };
            VschedulingDialog.prototype.getService = function () { return OPD.VschedulingService.baseUrl; };
            VschedulingDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], VschedulingDialog);
            return VschedulingDialog;
        }(Serenity.EntityDialog));
        OPD.VschedulingDialog = VschedulingDialog;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
/// <reference path="../vscheduling/vschedulingdialog.ts" />
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var SchedulesTabDialog = /** @class */ (function (_super) {
            __extends(SchedulesTabDialog, _super);
            function SchedulesTabDialog() {
                return _super.call(this) || this;
            }
            SchedulesTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.VisitId, true);
            };
            SchedulesTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], SchedulesTabDialog);
            return SchedulesTabDialog;
        }(OPD.VschedulingDialog));
        OPD.SchedulesTabDialog = SchedulesTabDialog;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var VschedulingGrid = /** @class */ (function (_super) {
            __extends(VschedulingGrid, _super);
            function VschedulingGrid(container) {
                return _super.call(this, container) || this;
            }
            VschedulingGrid.prototype.getColumnsKey = function () { return 'OPD.Vscheduling'; };
            VschedulingGrid.prototype.getDialogType = function () { return OPD.VschedulingDialog; };
            VschedulingGrid.prototype.getIdProperty = function () { return OPD.VschedulingRow.idProperty; };
            VschedulingGrid.prototype.getLocalTextPrefix = function () { return OPD.VschedulingRow.localTextPrefix; };
            VschedulingGrid.prototype.getService = function () { return OPD.VschedulingService.baseUrl; };
            VschedulingGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], VschedulingGrid);
            return VschedulingGrid;
        }(Serenity.EntityGrid));
        OPD.VschedulingGrid = VschedulingGrid;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
/// <reference path="../vscheduling/vschedulinggrid.ts" />
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var SchedulesTabGrid = /** @class */ (function (_super) {
            __extends(SchedulesTabGrid, _super);
            function SchedulesTabGrid(container) {
                return _super.call(this, container) || this;
            }
            SchedulesTabGrid.prototype.getDialogType = function () { return OPD.SchedulesTabDialog; };
            SchedulesTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            SchedulesTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            SchedulesTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            SchedulesTabGrid.prototype.addButtonClick = function () {
                this.editItem({ VisitId: this.VisitId });
            };
            SchedulesTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            SchedulesTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.VisitId;
            };
            Object.defineProperty(SchedulesTabGrid.prototype, "VisitId", {
                get: function () {
                    return this._VisitId;
                },
                set: function (value) {
                    if (this._VisitId !== value) {
                        this._VisitId = value;
                        this.setEquality('VisitId', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            SchedulesTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], SchedulesTabGrid);
            return SchedulesTabGrid;
        }(OPD.VschedulingGrid));
        OPD.SchedulesTabGrid = SchedulesTabGrid;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var VitalSignsDialog = /** @class */ (function (_super) {
            __extends(VitalSignsDialog, _super);
            function VitalSignsDialog() {
                var _this = _super.call(this) || this;
                _this.form = new OPD.VitalSignsForm(_this.idPrefix);
                var getDate = new Date();
                var todyDate = getDate.getTime();
                _this.form.VitalDateTime.addValidationRule(_this.uniqueName, function (e) {
                    var newDate = _this.form.VitalDateTime.valueAsDate.getTime();
                    if (newDate > todyDate) {
                        return "Date cannot be bigger than today! Please correct it";
                    }
                    var oneday = 24 * 60 * 60 * 1000;
                    var diff = Math.abs(getDate.getTime() - _this.form.VitalDateTime.valueAsDate.getTime());
                    var diffdays = Math.ceil(diff / oneday);
                    if (diffdays > 5) {
                        return "The date is too early to enter. Pleae enter a valid date";
                    }
                });
                _this.form.VitalDateTime.change(function (e) {
                    _this.form.SVitalDate.value = convertToShamsi(_this.form.VitalDateTime.valueAsDate);
                });
                _this.form.SVitalDate.change(function (e) {
                    _this.form.VitalDateTime.valueAsDate = convertToGregorian(_this.form.SVitalDate.value.toString());
                });
                return _this;
            }
            VitalSignsDialog.prototype.getFormKey = function () { return OPD.VitalSignsForm.formKey; };
            VitalSignsDialog.prototype.getIdProperty = function () { return OPD.VitalSignsRow.idProperty; };
            VitalSignsDialog.prototype.getLocalTextPrefix = function () { return OPD.VitalSignsRow.localTextPrefix; };
            VitalSignsDialog.prototype.getNameProperty = function () { return OPD.VitalSignsRow.nameProperty; };
            VitalSignsDialog.prototype.getService = function () { return OPD.VitalSignsService.baseUrl; };
            VitalSignsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], VitalSignsDialog);
            return VitalSignsDialog;
        }(Serenity.EntityDialog));
        OPD.VitalSignsDialog = VitalSignsDialog;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
/// <reference path="../vitalsigns/vitalsignsdialog.ts" />
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var VitalSignsTabDialog = /** @class */ (function (_super) {
            __extends(VitalSignsTabDialog, _super);
            function VitalSignsTabDialog() {
                return _super.call(this) || this;
            }
            VitalSignsTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.VisitId, true);
            };
            VitalSignsTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], VitalSignsTabDialog);
            return VitalSignsTabDialog;
        }(OPD.VitalSignsDialog));
        OPD.VitalSignsTabDialog = VitalSignsTabDialog;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var VitalSignsGrid = /** @class */ (function (_super) {
            __extends(VitalSignsGrid, _super);
            function VitalSignsGrid(container) {
                return _super.call(this, container) || this;
            }
            VitalSignsGrid.prototype.getColumnsKey = function () { return 'OPD.VitalSigns'; };
            VitalSignsGrid.prototype.getDialogType = function () { return OPD.VitalSignsDialog; };
            VitalSignsGrid.prototype.getIdProperty = function () { return OPD.VitalSignsRow.idProperty; };
            VitalSignsGrid.prototype.getLocalTextPrefix = function () { return OPD.VitalSignsRow.localTextPrefix; };
            VitalSignsGrid.prototype.getService = function () { return OPD.VitalSignsService.baseUrl; };
            VitalSignsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            VitalSignsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], VitalSignsGrid);
            return VitalSignsGrid;
        }(Serenity.EntityGrid));
        OPD.VitalSignsGrid = VitalSignsGrid;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
/// <reference path="../vitalsigns/vitalsignsgrid.ts" />
var EMR;
(function (EMR) {
    var OPD;
    (function (OPD) {
        var VitalSignsTabGrid = /** @class */ (function (_super) {
            __extends(VitalSignsTabGrid, _super);
            function VitalSignsTabGrid(container) {
                return _super.call(this, container) || this;
            }
            VitalSignsTabGrid.prototype.getDialogType = function () { return OPD.VitalSignsTabDialog; };
            VitalSignsTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            VitalSignsTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            VitalSignsTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            VitalSignsTabGrid.prototype.addButtonClick = function () {
                this.editItem({ VisitId: this.VisitId });
            };
            VitalSignsTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            VitalSignsTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.VisitId;
            };
            Object.defineProperty(VitalSignsTabGrid.prototype, "VisitId", {
                get: function () {
                    return this._VisitId;
                },
                set: function (value) {
                    if (this._VisitId !== value) {
                        this._VisitId = value;
                        this.setEquality('VisitId', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            VitalSignsTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], VitalSignsTabGrid);
            return VitalSignsTabGrid;
        }(OPD.VitalSignsGrid));
        OPD.VitalSignsTabGrid = VitalSignsTabGrid;
    })(OPD = EMR.OPD || (EMR.OPD = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Pharmacy;
    (function (Pharmacy) {
        var MedicinelossesDialog = /** @class */ (function (_super) {
            __extends(MedicinelossesDialog, _super);
            function MedicinelossesDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Pharmacy.MedicinelossesForm(_this.idPrefix);
                return _this;
            }
            MedicinelossesDialog.prototype.getFormKey = function () { return Pharmacy.MedicinelossesForm.formKey; };
            MedicinelossesDialog.prototype.getIdProperty = function () { return Pharmacy.MedicinelossesRow.idProperty; };
            MedicinelossesDialog.prototype.getLocalTextPrefix = function () { return Pharmacy.MedicinelossesRow.localTextPrefix; };
            MedicinelossesDialog.prototype.getService = function () { return Pharmacy.MedicinelossesService.baseUrl; };
            MedicinelossesDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel()
            ], MedicinelossesDialog);
            return MedicinelossesDialog;
        }(Serenity.EntityDialog));
        Pharmacy.MedicinelossesDialog = MedicinelossesDialog;
    })(Pharmacy = EMR.Pharmacy || (EMR.Pharmacy = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Pharmacy;
    (function (Pharmacy) {
        var MedicinelossesGrid = /** @class */ (function (_super) {
            __extends(MedicinelossesGrid, _super);
            function MedicinelossesGrid(container) {
                return _super.call(this, container) || this;
            }
            MedicinelossesGrid.prototype.getColumnsKey = function () { return 'Pharmacy.Medicinelosses'; };
            MedicinelossesGrid.prototype.getDialogType = function () { return Pharmacy.MedicinelossesDialog; };
            MedicinelossesGrid.prototype.getIdProperty = function () { return Pharmacy.MedicinelossesRow.idProperty; };
            MedicinelossesGrid.prototype.getLocalTextPrefix = function () { return Pharmacy.MedicinelossesRow.localTextPrefix; };
            MedicinelossesGrid.prototype.getService = function () { return Pharmacy.MedicinelossesService.baseUrl; };
            MedicinelossesGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], MedicinelossesGrid);
            return MedicinelossesGrid;
        }(Serenity.EntityGrid));
        Pharmacy.MedicinelossesGrid = MedicinelossesGrid;
    })(Pharmacy = EMR.Pharmacy || (EMR.Pharmacy = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Pharmacy;
    (function (Pharmacy) {
        var MedicinesGrid = /** @class */ (function (_super) {
            __extends(MedicinesGrid, _super);
            function MedicinesGrid(container) {
                return _super.call(this, container) || this;
            }
            MedicinesGrid.prototype.getColumnsKey = function () { return 'Pharmacy.Medicines'; };
            MedicinesGrid.prototype.getDialogType = function () { return Pharmacy.MedicinesDialog; };
            MedicinesGrid.prototype.getIdProperty = function () { return Pharmacy.MedicinesRow.idProperty; };
            MedicinesGrid.prototype.getLocalTextPrefix = function () { return Pharmacy.MedicinesRow.localTextPrefix; };
            MedicinesGrid.prototype.getService = function () { return Pharmacy.MedicinesService.baseUrl; };
            MedicinesGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            MedicinesGrid.prototype.getColumns = function () {
                var columns = _super.prototype.getColumns.call(this);
                // adding a specific css class to column, 
                // to be able to format cell with a different background
                Q.first(columns, function (x) { return x.field == "DaysToExpire" /* DaysToExpire */; }).cssClass += " col-expiry-cell";
                Q.first(columns, function (x) { return x.field == "Balance" /* Balance */; }).cssClass += " col-balance-cell";
                Q.first(columns, function (x) { return x.field == "QuantityUsed" /* QuantityUsed */; }).cssClass += " col-quanity-cell";
                return columns;
            };
            MedicinesGrid.prototype.getItemCssClass = function (item, index) {
                var klass = "";
                if (item.DaysToExpire <= 0 && item.Balance > 0)
                    klass += " expired-data";
                else if (item.DaysToExpire < 90)
                    klass += " nearexpire-data";
                else
                    klass += " notexpiring-data";
                if (item.Balance <= 30 && item.Balance >= 0)
                    klass += " balance-minus";
                else if (item.Balance < 0)
                    klass += " blance-less-thirty";
                if (item.QuantityUsed > item.Quantity)
                    klass += " quantity-used-over";
                return Q.trimToNull(klass);
            };
            MedicinesGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], MedicinesGrid);
            return MedicinesGrid;
        }(Serenity.EntityGrid));
        Pharmacy.MedicinesGrid = MedicinesGrid;
    })(Pharmacy = EMR.Pharmacy || (EMR.Pharmacy = {}));
})(EMR || (EMR = {}));
/// <reference path="medicinesgrid.ts" />
var EMR;
(function (EMR) {
    var Pharmacy;
    (function (Pharmacy) {
        var MedicineCheckGrid = /** @class */ (function (_super) {
            __extends(MedicineCheckGrid, _super);
            function MedicineCheckGrid(container) {
                var _this = _super.call(this, container) || this;
                _this.rowSelection = new Serenity.GridRowSelectionMixin(_this);
                return _this;
            }
            MedicineCheckGrid.prototype.getColumnsKey = function () { return "Pharmacy.LkpMedicine"; };
            MedicineCheckGrid.prototype.getDialogType = function () { return Pharmacy.MedicinesDialog; };
            MedicineCheckGrid.prototype.getIdProperty = function () { return Pharmacy.MedicinesRow.idProperty; };
            MedicineCheckGrid.prototype.getLocalTextPrefix = function () { return Pharmacy.MedicinesRow.localTextPrefix; };
            MedicineCheckGrid.prototype.getService = function () { return Pharmacy.MedicinesService.baseUrl; };
            MedicineCheckGrid.prototype.getColumns = function () {
                var _this = this;
                var columns = _super.prototype.getColumns.call(this);
                columns.splice(0, 0, Serenity.GridRowSelectionMixin.createSelectColumn(function () { return _this.rowSelection; }));
                return columns;
            };
            MedicineCheckGrid.prototype.usePager = function () {
                return false;
            };
            MedicineCheckGrid.prototype.getInitialTitle = function () {
                return null;
            };
            MedicineCheckGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons = buttons.filter(function (x) { return x.cssClass != 'add-button'; });
                return buttons;
            };
            Object.defineProperty(MedicineCheckGrid.prototype, "selectedItems", {
                get: function () {
                    var _this = this;
                    return this.rowSelection.getSelectedAsInt32().map(function (x) { return _this.view.getItemById(x); });
                },
                enumerable: true,
                configurable: true
            });
            MedicineCheckGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], MedicineCheckGrid);
            return MedicineCheckGrid;
        }(Serenity.EntityGrid));
        Pharmacy.MedicineCheckGrid = MedicineCheckGrid;
    })(Pharmacy = EMR.Pharmacy || (EMR.Pharmacy = {}));
})(EMR || (EMR = {}));
/// <reference path="../medicinelosses/medicinelossesdialog.ts" />
var EMR;
(function (EMR) {
    var Pharmacy;
    (function (Pharmacy) {
        var MedicinelossesTabDialog = /** @class */ (function (_super) {
            __extends(MedicinelossesTabDialog, _super);
            function MedicinelossesTabDialog() {
                return _super.call(this) || this;
            }
            MedicinelossesTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.MedicineId, true);
            };
            MedicinelossesTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], MedicinelossesTabDialog);
            return MedicinelossesTabDialog;
        }(Pharmacy.MedicinelossesDialog));
        Pharmacy.MedicinelossesTabDialog = MedicinelossesTabDialog;
    })(Pharmacy = EMR.Pharmacy || (EMR.Pharmacy = {}));
})(EMR || (EMR = {}));
/// <reference path="../medicinelosses/medicinelossesgrid.ts" />
var EMR;
(function (EMR) {
    var Pharmacy;
    (function (Pharmacy) {
        var MedicinelossesTabGrid = /** @class */ (function (_super) {
            __extends(MedicinelossesTabGrid, _super);
            function MedicinelossesTabGrid(container) {
                return _super.call(this, container) || this;
            }
            MedicinelossesTabGrid.prototype.getDialogType = function () { return Pharmacy.MedicinelossesTabDialog; };
            MedicinelossesTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            MedicinelossesTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            MedicinelossesTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            MedicinelossesTabGrid.prototype.addButtonClick = function () {
                this.editItem({ MedicineId: this.MedicineId });
            };
            MedicinelossesTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            MedicinelossesTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.MedicineId;
            };
            Object.defineProperty(MedicinelossesTabGrid.prototype, "MedicineId", {
                get: function () {
                    return this._MedicineId;
                },
                set: function (value) {
                    if (this._MedicineId !== value) {
                        this._MedicineId = value;
                        this.setEquality('MedicineId', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            MedicinelossesTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], MedicinelossesTabGrid);
            return MedicinelossesTabGrid;
        }(Pharmacy.MedicinelossesGrid));
        Pharmacy.MedicinelossesTabGrid = MedicinelossesTabGrid;
    })(Pharmacy = EMR.Pharmacy || (EMR.Pharmacy = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Pharmacy;
    (function (Pharmacy) {
        var MedicinePickerDialog = /** @class */ (function (_super) {
            __extends(MedicinePickerDialog, _super);
            function MedicinePickerDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Pharmacy.MedicinesForm(_this.idPrefix);
                _this.checkGrid = new Pharmacy.MedicineCheckGrid(_this.byId("CheckGrid"));
                _this.dialogTitle = "Select Medicines";
                return _this;
            }
            MedicinePickerDialog.prototype.getFormKey = function () { return Pharmacy.MedicinesForm.formKey; };
            MedicinePickerDialog.prototype.getIdProperty = function () { return Pharmacy.MedicinesRow.idProperty; };
            MedicinePickerDialog.prototype.getLocalTextPrefix = function () { return Pharmacy.MedicinesRow.localTextPrefix; };
            MedicinePickerDialog.prototype.getNameProperty = function () { return Pharmacy.MedicinesRow.nameProperty; };
            MedicinePickerDialog.prototype.getService = function () { return Pharmacy.MedicinesService.baseUrl; };
            MedicinePickerDialog.prototype.getTemplate = function () {
                return "<div id=\"~_CheckGrid\"></div>";
            };
            MedicinePickerDialog.prototype.getDialogOptions = function () {
                var _this = this;
                var opt = _super.prototype.getDialogOptions.call(this);
                opt.buttons = [
                    {
                        text: Q.text("Dialogs.OkButton"),
                        click: function () {
                            var selected = _this.checkGrid.selectedItems;
                            if (!selected.length) {
                                Q.notifyWarning("Please select medicine!");
                                return;
                            }
                            if (!_this.onSuccess || _this.onSuccess(selected))
                                _this.dialogClose();
                        }
                    },
                    {
                        text: Q.text("Dialogs.CancelButton"),
                        click: function () {
                            _this.dialogClose();
                        }
                    }
                ];
                return opt;
            };
            Object.defineProperty(MedicinePickerDialog.prototype, "selectedItems", {
                get: function () {
                    return this.checkGrid.selectedItems;
                },
                enumerable: true,
                configurable: true
            });
            MedicinePickerDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], MedicinePickerDialog);
            return MedicinePickerDialog;
        }(Serenity.EntityDialog));
        Pharmacy.MedicinePickerDialog = MedicinePickerDialog;
    })(Pharmacy = EMR.Pharmacy || (EMR.Pharmacy = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Pharmacy;
    (function (Pharmacy) {
        var MedicinesDialog = /** @class */ (function (_super) {
            __extends(MedicinesDialog, _super);
            function MedicinesDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Pharmacy.MedicinesForm(_this.idPrefix);
                var getDate = new Date();
                var todyDate = getDate.getTime();
                _this.form.InDate.addValidationRule(_this.uniqueName, function (e) {
                    var newDate = _this.form.InDate.valueAsDate.getTime();
                    if (newDate > todyDate) {
                        return "In Date cannot be bigger than today! Please correct it";
                    }
                });
                _this.form.ExpiryDate.addValidationRule(_this.uniqueName, function (e) {
                    var newDate = _this.form.ExpiryDate.valueAsDate.getTime();
                    if (newDate < todyDate) {
                        return "Expiry date must be bigger than today! Please correct it";
                    }
                });
                _this.form.SInDate.change(function (e) {
                    _this.form.InDate.valueAsDate = convertToGregorian(_this.form.SInDate.value.toString());
                });
                _this.form.SExpiryDate.change(function (e) {
                    _this.form.ExpiryDate.valueAsDate = convertToGregorian(_this.form.SExpiryDate.value.toString());
                });
                _this.form.InDate.change(function (e) {
                    _this.form.SInDate.value = convertToShamsi(_this.form.InDate.valueAsDate);
                });
                _this.form.ExpiryDate.change(function (e) {
                    _this.form.SExpiryDate.value = convertToShamsi(_this.form.ExpiryDate.valueAsDate);
                });
                _this.medicineLossesGrid = new Pharmacy.MedicinelossesTabGrid(_this.byId('MedicinelossesGrid'));
                _this.medicineLossesGrid.openDialogsAsPanel = true;
                EMR.DialogUtils.pendingChangesConfirmation(_this.element, function () { return _this.getSaveState() != _this.loadedState; });
                return _this;
            }
            MedicinesDialog.prototype.getFormKey = function () { return Pharmacy.MedicinesForm.formKey; };
            MedicinesDialog.prototype.getIdProperty = function () { return Pharmacy.MedicinesRow.idProperty; };
            MedicinesDialog.prototype.getLocalTextPrefix = function () { return Pharmacy.MedicinesRow.localTextPrefix; };
            MedicinesDialog.prototype.getNameProperty = function () { return Pharmacy.MedicinesRow.nameProperty; };
            MedicinesDialog.prototype.getService = function () { return Pharmacy.MedicinesService.baseUrl; };
            MedicinesDialog.prototype.getSaveState = function () {
                try {
                    return $.toJSON(this.getSaveEntity());
                }
                catch (e) {
                    return null;
                }
            };
            MedicinesDialog.prototype.loadResponse = function (data) {
                _super.prototype.loadResponse.call(this, data);
                this.loadedState = this.getSaveState();
            };
            MedicinesDialog.prototype.loadEntity = function (entity) {
                _super.prototype.loadEntity.call(this, entity);
                Serenity.TabsExtensions.setDisabled(this.tabs, 'Medicinelosses', this.isNewOrDeleted());
                this.medicineLossesGrid.MedicineId = entity.MedicineId == null ? null : entity.MedicineId;
            };
            MedicinesDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], MedicinesDialog);
            return MedicinesDialog;
        }(Serenity.EntityDialog));
        Pharmacy.MedicinesDialog = MedicinesDialog;
    })(Pharmacy = EMR.Pharmacy || (EMR.Pharmacy = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Pharmacy;
    (function (Pharmacy) {
        var MedPatientsDialog = /** @class */ (function (_super) {
            __extends(MedPatientsDialog, _super);
            function MedPatientsDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Pharmacy.MedPatientsForm(_this.idPrefix);
                _this.patientVisits = new Pharmacy.MedvisitsTabGrid(_this.byId('MedvisitsGrid'));
                _this.patientVisits.openDialogsAsPanel = true;
                EMR.DialogUtils.pendingChangesConfirmation(_this.element, function () { return _this.getSaveState() != _this.loadedState; });
                return _this;
            }
            MedPatientsDialog.prototype.getFormKey = function () { return Pharmacy.MedPatientsForm.formKey; };
            MedPatientsDialog.prototype.getIdProperty = function () { return Pharmacy.MedPatientsRow.idProperty; };
            MedPatientsDialog.prototype.getLocalTextPrefix = function () { return Pharmacy.MedPatientsRow.localTextPrefix; };
            MedPatientsDialog.prototype.getNameProperty = function () { return Pharmacy.MedPatientsRow.nameProperty; };
            MedPatientsDialog.prototype.getService = function () { return Pharmacy.MedPatientsService.baseUrl; };
            MedPatientsDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }), 1);
                // We could also remove delete button here, but for demonstration 
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                return buttons;
            };
            MedPatientsDialog.prototype.getSaveState = function () {
                try {
                    return $.toJSON(this.getSaveEntity());
                }
                catch (e) {
                    return null;
                }
            };
            MedPatientsDialog.prototype.loadResponse = function (data) {
                _super.prototype.loadResponse.call(this, data);
                this.loadedState = this.getSaveState();
            };
            MedPatientsDialog.prototype.loadEntity = function (entity) {
                _super.prototype.loadEntity.call(this, entity);
                Serenity.TabsExtensions.setDisabled(this.tabs, 'Medvisits', this.isNewOrDeleted());
                this.patientVisits.MrId = entity.Mrid;
            };
            MedPatientsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], MedPatientsDialog);
            return MedPatientsDialog;
        }(Serenity.EntityDialog));
        Pharmacy.MedPatientsDialog = MedPatientsDialog;
    })(Pharmacy = EMR.Pharmacy || (EMR.Pharmacy = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Pharmacy;
    (function (Pharmacy) {
        var MedPatientsGrid = /** @class */ (function (_super) {
            __extends(MedPatientsGrid, _super);
            function MedPatientsGrid(container) {
                return _super.call(this, container) || this;
            }
            MedPatientsGrid.prototype.getColumnsKey = function () { return 'Pharmacy.MedPatients'; };
            MedPatientsGrid.prototype.getDialogType = function () { return Pharmacy.MedPatientsDialog; };
            MedPatientsGrid.prototype.getIdProperty = function () { return Pharmacy.MedPatientsRow.idProperty; };
            MedPatientsGrid.prototype.getLocalTextPrefix = function () { return Pharmacy.MedPatientsRow.localTextPrefix; };
            MedPatientsGrid.prototype.getService = function () { return Pharmacy.MedPatientsService.baseUrl; };
            MedPatientsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            MedPatientsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], MedPatientsGrid);
            return MedPatientsGrid;
        }(Serenity.EntityGrid));
        Pharmacy.MedPatientsGrid = MedPatientsGrid;
    })(Pharmacy = EMR.Pharmacy || (EMR.Pharmacy = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Pharmacy;
    (function (Pharmacy) {
        var MedvisitsDialog = /** @class */ (function (_super) {
            __extends(MedvisitsDialog, _super);
            function MedvisitsDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Pharmacy.MedvisitsForm(_this.idPrefix);
                _this.prescriptionGrid = new Pharmacy.MedPrescriptionsTabGrid(_this.byId('MedPrescriptionsGrid'));
                _this.prescriptionGrid.openDialogsAsPanel = true;
                EMR.DialogUtils.pendingChangesConfirmation(_this.element, function () { return _this.getSaveState() != _this.loadedState; });
                return _this;
            }
            MedvisitsDialog.prototype.getFormKey = function () { return Pharmacy.MedvisitsForm.formKey; };
            MedvisitsDialog.prototype.getIdProperty = function () { return Pharmacy.MedvisitsRow.idProperty; };
            MedvisitsDialog.prototype.getLocalTextPrefix = function () { return Pharmacy.MedvisitsRow.localTextPrefix; };
            MedvisitsDialog.prototype.getNameProperty = function () { return Pharmacy.MedvisitsRow.nameProperty; };
            MedvisitsDialog.prototype.getService = function () { return Pharmacy.MedvisitsService.baseUrl; };
            MedvisitsDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }), 1);
                // We could also remove delete button here, but for demonstration 
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                buttons.push({
                    title: 'Print All',
                    cssClass: 'print-preview-button',
                    hint: "Print prescriptions",
                    onClick: function () {
                        //window.location.href = Q.resolveUrl('~/PReport/Index?VisitId=' + this.entity.VisitId);
                        Q.postToService({ url: '~/PReport/Index?VisitId=' + _this.entity.VisitId, request: null, target: '_blank' });
                    }
                });
                buttons.push({
                    title: 'Print Last',
                    cssClass: 'print-preview-button',
                    hint: "Print prescriptions",
                    onClick: function () {
                        //window.location.href = Q.resolveUrl('~/PReport/Index?VisitId=' + this.entity.VisitId);
                        Q.postToService({ url: '~/PReportt/Index?VisitId=' + _this.entity.VisitId, request: null, target: '_blank' });
                    }
                });
                return buttons;
            };
            MedvisitsDialog.prototype.getSaveState = function () {
                try {
                    return $.toJSON(this.getSaveEntity());
                }
                catch (e) {
                    return null;
                }
            };
            MedvisitsDialog.prototype.loadResponse = function (data) {
                _super.prototype.loadResponse.call(this, data);
                this.loadedState = this.getSaveState();
            };
            MedvisitsDialog.prototype.loadEntity = function (entity) {
                _super.prototype.loadEntity.call(this, entity);
                Serenity.TabsExtensions.setDisabled(this.tabs, 'MedPrescriptions', this.isNewOrDeleted());
                this.prescriptionGrid.VisitId = entity.VisitId == null ? null : entity.VisitId;
            };
            MedvisitsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], MedvisitsDialog);
            return MedvisitsDialog;
        }(Serenity.EntityDialog));
        Pharmacy.MedvisitsDialog = MedvisitsDialog;
    })(Pharmacy = EMR.Pharmacy || (EMR.Pharmacy = {}));
})(EMR || (EMR = {}));
/// <reference path="../medvisits/medvisitsdialog.ts" />
var EMR;
(function (EMR) {
    var Pharmacy;
    (function (Pharmacy) {
        var MedvisitsTabDialog = /** @class */ (function (_super) {
            __extends(MedvisitsTabDialog, _super);
            function MedvisitsTabDialog() {
                return _super.call(this) || this;
            }
            MedvisitsTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.Mrid, true);
            };
            MedvisitsTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], MedvisitsTabDialog);
            return MedvisitsTabDialog;
        }(Pharmacy.MedvisitsDialog));
        Pharmacy.MedvisitsTabDialog = MedvisitsTabDialog;
    })(Pharmacy = EMR.Pharmacy || (EMR.Pharmacy = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Pharmacy;
    (function (Pharmacy) {
        var MedvisitsGrid = /** @class */ (function (_super) {
            __extends(MedvisitsGrid, _super);
            function MedvisitsGrid(container) {
                return _super.call(this, container) || this;
            }
            MedvisitsGrid.prototype.getColumnsKey = function () { return 'Pharmacy.Medvisits'; };
            MedvisitsGrid.prototype.getDialogType = function () { return Pharmacy.MedvisitsDialog; };
            MedvisitsGrid.prototype.getIdProperty = function () { return Pharmacy.MedvisitsRow.idProperty; };
            MedvisitsGrid.prototype.getLocalTextPrefix = function () { return Pharmacy.MedvisitsRow.localTextPrefix; };
            MedvisitsGrid.prototype.getService = function () { return Pharmacy.MedvisitsService.baseUrl; };
            MedvisitsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "refresh-button"; }), 1);
                return buttons;
            };
            MedvisitsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], MedvisitsGrid);
            return MedvisitsGrid;
        }(Serenity.EntityGrid));
        Pharmacy.MedvisitsGrid = MedvisitsGrid;
    })(Pharmacy = EMR.Pharmacy || (EMR.Pharmacy = {}));
})(EMR || (EMR = {}));
/// <reference path="../medvisits/medvisitsgrid.ts" />
var EMR;
(function (EMR) {
    var Pharmacy;
    (function (Pharmacy) {
        var MedvisitsTabGrid = /** @class */ (function (_super) {
            __extends(MedvisitsTabGrid, _super);
            function MedvisitsTabGrid(container) {
                return _super.call(this, container) || this;
            }
            MedvisitsTabGrid.prototype.getDialogType = function () { return Pharmacy.MedvisitsTabDialog; };
            MedvisitsTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            MedvisitsTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            MedvisitsTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            MedvisitsTabGrid.prototype.addButtonClick = function () {
                this.editItem({ MrId: this.MrId });
            };
            MedvisitsTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            MedvisitsTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.MrId;
            };
            Object.defineProperty(MedvisitsTabGrid.prototype, "MrId", {
                get: function () {
                    return this._MrId;
                },
                set: function (value) {
                    if (this._MrId !== value) {
                        this._MrId = value;
                        this.setEquality('Mrid', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            MedvisitsTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], MedvisitsTabGrid);
            return MedvisitsTabGrid;
        }(Pharmacy.MedvisitsGrid));
        Pharmacy.MedvisitsTabGrid = MedvisitsTabGrid;
    })(Pharmacy = EMR.Pharmacy || (EMR.Pharmacy = {}));
})(EMR || (EMR = {}));
/// <reference path="../medprescriptions/medprescriptionsdialog.ts" />
var EMR;
(function (EMR) {
    var Pharmacy;
    (function (Pharmacy) {
        var MedPrescriptionsTabDialog = /** @class */ (function (_super) {
            __extends(MedPrescriptionsTabDialog, _super);
            function MedPrescriptionsTabDialog() {
                return _super.call(this) || this;
            }
            MedPrescriptionsTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.VisitId, true);
            };
            MedPrescriptionsTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], MedPrescriptionsTabDialog);
            return MedPrescriptionsTabDialog;
        }(Pharmacy.MedPrescriptionsDialog));
        Pharmacy.MedPrescriptionsTabDialog = MedPrescriptionsTabDialog;
    })(Pharmacy = EMR.Pharmacy || (EMR.Pharmacy = {}));
})(EMR || (EMR = {}));
/// <reference path="../medprescriptions/medprescriptionsgrid.ts" />
var EMR;
(function (EMR) {
    var Pharmacy;
    (function (Pharmacy) {
        var MedPrescriptionsTabGrid = /** @class */ (function (_super) {
            __extends(MedPrescriptionsTabGrid, _super);
            function MedPrescriptionsTabGrid(container) {
                return _super.call(this, container) || this;
            }
            MedPrescriptionsTabGrid.prototype.getDialogType = function () { return Pharmacy.MedPrescriptionsTabDialog; };
            MedPrescriptionsTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            MedPrescriptionsTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            MedPrescriptionsTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            MedPrescriptionsTabGrid.prototype.addButtonClick = function () {
                this.editItem({ VisitId: this.VisitId });
            };
            MedPrescriptionsTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            MedPrescriptionsTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.VisitId;
            };
            Object.defineProperty(MedPrescriptionsTabGrid.prototype, "VisitId", {
                get: function () {
                    return this._VisitId;
                },
                set: function (value) {
                    if (this._VisitId !== value) {
                        this._VisitId = value;
                        this.setEquality('VisitId', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            MedPrescriptionsTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], MedPrescriptionsTabGrid);
            return MedPrescriptionsTabGrid;
        }(Pharmacy.MedPrescriptionsGrid));
        Pharmacy.MedPrescriptionsTabGrid = MedPrescriptionsTabGrid;
    })(Pharmacy = EMR.Pharmacy || (EMR.Pharmacy = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Register;
    (function (Register) {
        var PatAttendantsDialog = /** @class */ (function (_super) {
            __extends(PatAttendantsDialog, _super);
            function PatAttendantsDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Register.PatAttendantsForm(_this.idPrefix);
                return _this;
            }
            PatAttendantsDialog.prototype.getFormKey = function () { return Register.PatAttendantsForm.formKey; };
            PatAttendantsDialog.prototype.getIdProperty = function () { return Register.PatAttendantsRow.idProperty; };
            PatAttendantsDialog.prototype.getLocalTextPrefix = function () { return Register.PatAttendantsRow.localTextPrefix; };
            PatAttendantsDialog.prototype.getNameProperty = function () { return Register.PatAttendantsRow.nameProperty; };
            PatAttendantsDialog.prototype.getService = function () { return Register.PatAttendantsService.baseUrl; };
            PatAttendantsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], PatAttendantsDialog);
            return PatAttendantsDialog;
        }(Serenity.EntityDialog));
        Register.PatAttendantsDialog = PatAttendantsDialog;
    })(Register = EMR.Register || (EMR.Register = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Register;
    (function (Register) {
        var PatAttendantsGrid = /** @class */ (function (_super) {
            __extends(PatAttendantsGrid, _super);
            function PatAttendantsGrid(container) {
                return _super.call(this, container) || this;
            }
            PatAttendantsGrid.prototype.getColumnsKey = function () { return 'Register.PatAttendants'; };
            PatAttendantsGrid.prototype.getDialogType = function () { return Register.PatAttendantsDialog; };
            PatAttendantsGrid.prototype.getIdProperty = function () { return Register.PatAttendantsRow.idProperty; };
            PatAttendantsGrid.prototype.getLocalTextPrefix = function () { return Register.PatAttendantsRow.localTextPrefix; };
            PatAttendantsGrid.prototype.getService = function () { return Register.PatAttendantsService.baseUrl; };
            PatAttendantsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], PatAttendantsGrid);
            return PatAttendantsGrid;
        }(Serenity.EntityGrid));
        Register.PatAttendantsGrid = PatAttendantsGrid;
    })(Register = EMR.Register || (EMR.Register = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Register;
    (function (Register) {
        var RegoutpatientsDialog = /** @class */ (function (_super) {
            __extends(RegoutpatientsDialog, _super);
            function RegoutpatientsDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Register.RegoutpatientsForm(_this.idPrefix);
                _this.form.DateOfBirth.change(function (e) {
                    _this.form.SDateOfBirth.value = convertToShamsi(_this.form.DateOfBirth.valueAsDate);
                    //calculate age
                    var today = new Date();
                    var birthDate = _this.form.DateOfBirth.valueAsDate;
                    var age = today.getFullYear() - birthDate.getFullYear();
                    var m = today.getMonth() - birthDate.getMonth();
                    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
                        age--;
                    }
                    _this.form.AgeInYear.value = age;
                });
                _this.form.AgeInYear.change(function (e) {
                    var today = new Date();
                    var currYear = today.getFullYear();
                    var birthYear = currYear - _this.form.AgeInYear.value;
                    _this.form.DateOfBirth.valueAsDate = new Date(birthYear, 1, 1);
                    _this.form.SDateOfBirth.value = convertToShamsi(_this.form.DateOfBirth.valueAsDate);
                });
                _this.form.SDateOfBirth.change(function (e) {
                    _this.form.DateOfBirth.valueAsDate = convertToGregorian(_this.form.SDateOfBirth.value.toString());
                    var today = new Date();
                    var birthDate = _this.form.DateOfBirth.valueAsDate;
                    var age = today.getFullYear() - birthDate.getFullYear();
                    var m = today.getMonth() - birthDate.getMonth();
                    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
                        age--;
                    }
                    _this.form.AgeInYear.value = age;
                });
                var getDate = new Date();
                var todyDate = getDate.getTime();
                _this.form.DateOfBirth.addValidationRule(_this.uniqueName, function (e) {
                    var newDate = _this.form.DateOfBirth.valueAsDate.getTime();
                    if (newDate > todyDate) {
                        return "Date cannot be bigger than today! Please correct it";
                    }
                    var today = new Date();
                    var birthDate = _this.form.DateOfBirth.valueAsDate;
                    var age = today.getFullYear() - birthDate.getFullYear();
                    var m = today.getMonth() - birthDate.getMonth();
                    if (m > 4) {
                        age++;
                    }
                    else if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
                        age--;
                    }
                    if (age > 95) {
                        return "The age cannot be bigger than 95 years. Please verify and correct the date of birth.";
                    }
                });
                _this.patientVisits = new Register.RegvisitsTabGrid(_this.byId('RegvisitsGrid'));
                _this.patientVisits.openDialogsAsPanel = true;
                EMR.DialogUtils.pendingChangesConfirmation(_this.element, function () { return _this.getSaveState() != _this.loadedState; });
                return _this;
            }
            RegoutpatientsDialog.prototype.getFormKey = function () { return Register.RegoutpatientsForm.formKey; };
            RegoutpatientsDialog.prototype.getIdProperty = function () { return Register.RegoutpatientsRow.idProperty; };
            RegoutpatientsDialog.prototype.getLocalTextPrefix = function () { return Register.RegoutpatientsRow.localTextPrefix; };
            RegoutpatientsDialog.prototype.getNameProperty = function () { return Register.RegoutpatientsRow.nameProperty; };
            RegoutpatientsDialog.prototype.getService = function () { return Register.RegoutpatientsService.baseUrl; };
            RegoutpatientsDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.push({
                    title: 'History',
                    cssClass: 'print-preview-button',
                    hint: "View all visits",
                    onClick: function () {
                        Q.postToService({ url: '/Ver/Patients#edit/' + _this.entity.Mrid, request: null, target: '_blank' });
                    }
                });
                return buttons;
            };
            RegoutpatientsDialog.prototype.getSaveState = function () {
                try {
                    return $.toJSON(this.getSaveEntity());
                }
                catch (e) {
                    return null;
                }
            };
            RegoutpatientsDialog.prototype.loadResponse = function (data) {
                _super.prototype.loadResponse.call(this, data);
                this.loadedState = this.getSaveState();
            };
            RegoutpatientsDialog.prototype.loadEntity = function (entity) {
                _super.prototype.loadEntity.call(this, entity);
                Serenity.TabsExtensions.setDisabled(this.tabs, 'Regvisits', this.isNewOrDeleted());
                this.patientVisits.MrId = entity.Mrid;
            };
            RegoutpatientsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], RegoutpatientsDialog);
            return RegoutpatientsDialog;
        }(Serenity.EntityDialog));
        Register.RegoutpatientsDialog = RegoutpatientsDialog;
    })(Register = EMR.Register || (EMR.Register = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Register;
    (function (Register) {
        var RegoutpatientsGrid = /** @class */ (function (_super) {
            __extends(RegoutpatientsGrid, _super);
            function RegoutpatientsGrid(container) {
                return _super.call(this, container) || this;
            }
            RegoutpatientsGrid.prototype.getColumnsKey = function () { return 'Register.Regoutpatients'; };
            RegoutpatientsGrid.prototype.getDialogType = function () { return Register.RegoutpatientsDialog; };
            RegoutpatientsGrid.prototype.getIdProperty = function () { return Register.RegoutpatientsRow.idProperty; };
            RegoutpatientsGrid.prototype.getLocalTextPrefix = function () { return Register.RegoutpatientsRow.localTextPrefix; };
            RegoutpatientsGrid.prototype.getService = function () { return Register.RegoutpatientsService.baseUrl; };
            RegoutpatientsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            RegoutpatientsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], RegoutpatientsGrid);
            return RegoutpatientsGrid;
        }(Serenity.EntityGrid));
        Register.RegoutpatientsGrid = RegoutpatientsGrid;
    })(Register = EMR.Register || (EMR.Register = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Register;
    (function (Register) {
        var RegvisitsDialog = /** @class */ (function (_super) {
            __extends(RegvisitsDialog, _super);
            function RegvisitsDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Register.RegvisitsForm(_this.idPrefix);
                var getDate = new Date();
                var todyDate = getDate.getTime();
                _this.form.DateOfVisit.addValidationRule(_this.uniqueName, function (e) {
                    var newDate = _this.form.DateOfVisit.valueAsDate.getTime();
                    if (newDate > todyDate) {
                        return "Date cannot be bigger than today! Please correct it";
                    }
                    var oneday = 24 * 60 * 60 * 1000;
                    var diff = Math.abs(getDate.getTime() - _this.form.DateOfVisit.valueAsDate.getTime());
                    var diffdays = Math.ceil(diff / oneday);
                    if (diffdays > 1505) {
                        return "The date is too early to enter. Pleae enter a valid date";
                    }
                });
                _this.attendantInfo = new Register.PatAttendantsTabGrid(_this.byId('PatAttendantsGrid'));
                _this.attendantInfo.openDialogsAsPanel = true;
                EMR.DialogUtils.pendingChangesConfirmation(_this.element, function () { return _this.getSaveState() != _this.loadedState; });
                _this.form.DateOfVisit.change(function (e) {
                    _this.form.SDateOfVisit.value = convertToShamsi(_this.form.DateOfVisit.valueAsDate);
                });
                _this.form.SDateOfVisit.change(function (e) {
                    _this.form.DateOfVisit.valueAsDate = convertToGregorian(_this.form.SDateOfVisit.value.toString());
                });
                return _this;
            }
            RegvisitsDialog.prototype.getFormKey = function () { return Register.RegvisitsForm.formKey; };
            RegvisitsDialog.prototype.getIdProperty = function () { return Register.RegvisitsRow.idProperty; };
            RegvisitsDialog.prototype.getLocalTextPrefix = function () { return Register.RegvisitsRow.localTextPrefix; };
            RegvisitsDialog.prototype.getNameProperty = function () { return Register.RegvisitsRow.nameProperty; };
            RegvisitsDialog.prototype.getService = function () { return Register.RegvisitsService.baseUrl; };
            RegvisitsDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.push({
                    title: 'Visit Report',
                    cssClass: 'print-preview-button',
                    hint: "Visit Report",
                    onClick: function () {
                        //window.location.href = Q.resolveUrl('~/PReport/Index?VisitId=' + this.entity.VisitId);
                        Q.postToService({ url: '~/VReport/Index?VisitId=' + _this.entity.VisitId, request: null, target: '_blank' });
                    }
                });
                return buttons;
            };
            RegvisitsDialog.prototype.getSaveState = function () {
                try {
                    return $.toJSON(this.getSaveEntity());
                }
                catch (e) {
                    return null;
                }
            };
            RegvisitsDialog.prototype.loadResponse = function (data) {
                _super.prototype.loadResponse.call(this, data);
                this.loadedState = this.getSaveState();
            };
            RegvisitsDialog.prototype.loadEntity = function (entity) {
                _super.prototype.loadEntity.call(this, entity);
                Serenity.TabsExtensions.setDisabled(this.tabs, 'PatAttendants', this.isNewOrDeleted());
                this.attendantInfo.VisitId = entity.VisitId;
            };
            RegvisitsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], RegvisitsDialog);
            return RegvisitsDialog;
        }(Serenity.EntityDialog));
        Register.RegvisitsDialog = RegvisitsDialog;
    })(Register = EMR.Register || (EMR.Register = {}));
})(EMR || (EMR = {}));
/// <reference path="../regvisits/regvisitsdialog.ts" />
var EMR;
(function (EMR) {
    var Register;
    (function (Register) {
        var RegvisitsTabDialog = /** @class */ (function (_super) {
            __extends(RegvisitsTabDialog, _super);
            function RegvisitsTabDialog() {
                return _super.call(this) || this;
            }
            RegvisitsTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.Mrid, true);
            };
            RegvisitsTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], RegvisitsTabDialog);
            return RegvisitsTabDialog;
        }(Register.RegvisitsDialog));
        Register.RegvisitsTabDialog = RegvisitsTabDialog;
    })(Register = EMR.Register || (EMR.Register = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Register;
    (function (Register) {
        var RegvisitsGrid = /** @class */ (function (_super) {
            __extends(RegvisitsGrid, _super);
            function RegvisitsGrid(container) {
                return _super.call(this, container) || this;
            }
            RegvisitsGrid.prototype.getColumnsKey = function () { return 'Register.Regvisits'; };
            RegvisitsGrid.prototype.getDialogType = function () { return Register.RegvisitsDialog; };
            RegvisitsGrid.prototype.getIdProperty = function () { return Register.RegvisitsRow.idProperty; };
            RegvisitsGrid.prototype.getLocalTextPrefix = function () { return Register.RegvisitsRow.localTextPrefix; };
            RegvisitsGrid.prototype.getService = function () { return Register.RegvisitsService.baseUrl; };
            RegvisitsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], RegvisitsGrid);
            return RegvisitsGrid;
        }(Serenity.EntityGrid));
        Register.RegvisitsGrid = RegvisitsGrid;
    })(Register = EMR.Register || (EMR.Register = {}));
})(EMR || (EMR = {}));
/// <reference path="../regvisits/regvisitsgrid.ts" />
var EMR;
(function (EMR) {
    var Register;
    (function (Register) {
        var RegvisitsTabGrid = /** @class */ (function (_super) {
            __extends(RegvisitsTabGrid, _super);
            function RegvisitsTabGrid(container) {
                return _super.call(this, container) || this;
            }
            RegvisitsTabGrid.prototype.getDialogType = function () { return Register.RegvisitsTabDialog; };
            RegvisitsTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            RegvisitsTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            RegvisitsTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            RegvisitsTabGrid.prototype.addButtonClick = function () {
                this.editItem({ Mrid: this.Mrid });
            };
            RegvisitsTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            RegvisitsTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.Mrid;
            };
            Object.defineProperty(RegvisitsTabGrid.prototype, "Mrid", {
                get: function () {
                    return this._Mrid;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RegvisitsTabGrid.prototype, "MrId", {
                set: function (value) {
                    if (this._Mrid !== value) {
                        this._Mrid = value;
                        this.setEquality('Mrid', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            RegvisitsTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], RegvisitsTabGrid);
            return RegvisitsTabGrid;
        }(Register.RegvisitsGrid));
        Register.RegvisitsTabGrid = RegvisitsTabGrid;
    })(Register = EMR.Register || (EMR.Register = {}));
})(EMR || (EMR = {}));
/// <reference path="../patattendants/patattendantsdialog.ts" />
var EMR;
(function (EMR) {
    var Register;
    (function (Register) {
        var PatAttendantsTabDialog = /** @class */ (function (_super) {
            __extends(PatAttendantsTabDialog, _super);
            function PatAttendantsTabDialog() {
                return _super.call(this) || this;
            }
            PatAttendantsTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.VisitId, true);
            };
            PatAttendantsTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], PatAttendantsTabDialog);
            return PatAttendantsTabDialog;
        }(Register.PatAttendantsDialog));
        Register.PatAttendantsTabDialog = PatAttendantsTabDialog;
    })(Register = EMR.Register || (EMR.Register = {}));
})(EMR || (EMR = {}));
/// <reference path="../patattendants/patattendantsgrid.ts" />
var EMR;
(function (EMR) {
    var Register;
    (function (Register) {
        var PatAttendantsTabGrid = /** @class */ (function (_super) {
            __extends(PatAttendantsTabGrid, _super);
            function PatAttendantsTabGrid(container) {
                return _super.call(this, container) || this;
            }
            PatAttendantsTabGrid.prototype.getDialogType = function () { return Register.PatAttendantsTabDialog; };
            PatAttendantsTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            PatAttendantsTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            PatAttendantsTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            PatAttendantsTabGrid.prototype.addButtonClick = function () {
                this.editItem({ VisitId: this.VisitId });
            };
            PatAttendantsTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            PatAttendantsTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.VisitId;
            };
            Object.defineProperty(PatAttendantsTabGrid.prototype, "VisitId", {
                get: function () {
                    return this._VisitId;
                },
                set: function (value) {
                    if (this._VisitId !== value) {
                        this._VisitId = value;
                        this.setEquality('VisitId', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            PatAttendantsTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], PatAttendantsTabGrid);
            return PatAttendantsTabGrid;
        }(Register.PatAttendantsGrid));
        Register.PatAttendantsTabGrid = PatAttendantsTabGrid;
    })(Register = EMR.Register || (EMR.Register = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var NoteDialog = /** @class */ (function (_super) {
            __extends(NoteDialog, _super);
            function NoteDialog() {
                var _this = _super.call(this) || this;
                _this.textEditor = new Serenity.HtmlNoteContentEditor(_this.byId('Text'));
                return _this;
            }
            NoteDialog.prototype.getTemplate = function () {
                return ("<form id='~_Form' class='s-Form'>" +
                    "<textarea id='~_Text' class='required'></textarea>" +
                    "</form>");
            };
            NoteDialog.prototype.getDialogOptions = function () {
                var _this = this;
                var opt = _super.prototype.getDialogOptions.call(this);
                opt.buttons = [{
                        text: Q.text('Dialogs.OkButton'),
                        click: function () {
                            if (!_this.validateForm()) {
                                return;
                            }
                            _this.okClick && _this.okClick();
                        }
                    }, {
                        text: Q.text('Dialogs.CancelButton'),
                        click: function () { return _this.dialogClose(); }
                    }
                ];
                return opt;
            };
            Object.defineProperty(NoteDialog.prototype, "text", {
                get: function () {
                    return this.textEditor.value;
                },
                set: function (value) {
                    this.textEditor.value = value;
                },
                enumerable: true,
                configurable: true
            });
            NoteDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], NoteDialog);
            return NoteDialog;
        }(Serenity.TemplatedDialog));
        Regs.NoteDialog = NoteDialog;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var NotesEditor = /** @class */ (function (_super) {
            __extends(NotesEditor, _super);
            function NotesEditor(div) {
                var _this = _super.call(this, div) || this;
                new Serenity.Toolbar(_this.byId('Toolbar'), {
                    buttons: [{
                            title: 'Add Note',
                            cssClass: 'add-button',
                            onClick: function (e) {
                                e.preventDefault();
                                _this.addClick();
                            }
                        }]
                });
                return _this;
            }
            NotesEditor.prototype.getTemplate = function () {
                return "<div><div id='~_Toolbar'></div><ul id='~_NoteList'></ul></div>";
            };
            NotesEditor.prototype.updateContent = function () {
                var _this = this;
                var noteList = this.byId('NoteList');
                noteList.children().remove();
                if (this.items) {
                    var index = 0;
                    for (var t1 = 0; t1 < this.items.length; t1++) {
                        var item = this.items[t1];
                        var li = $('<li/>');
                        $('<div/>').addClass('note-text').html(Q.coalesce(item.Text, '')).appendTo(li);
                        $('<a/>').attr('href', '#').addClass('note-date')
                            .text(item.InsertUserDisplayName + ' - ' +
                            Q.formatDate(item.InsertDate, 'g'))
                            .data('index', index).appendTo(li).click(function (e) { return _this.editClick(e); });
                        $('<a/>').attr('href', '#').addClass('note-delete')
                            .attr('title', 'delete note').data('index', index)
                            .appendTo(li).click(function (e) { return _this.deleteClick(e); });
                        li.appendTo(noteList);
                        index++;
                    }
                }
            };
            NotesEditor.prototype.addClick = function () {
                var _this = this;
                var dlg = new Regs.NoteDialog();
                dlg.dialogTitle = 'Add Note';
                dlg.okClick = function () {
                    var text = Q.trimToNull(dlg.text);
                    if (text == null) {
                        return;
                    }
                    _this.items = _this.items || [];
                    Q.insert(_this.items, 0, {
                        Text: text,
                        InsertUserDisplayName: EMR.Authorization.userDefinition.DisplayName,
                        InsertDate: Q.formatISODateTimeUTC(new Date())
                    });
                    _this.updateContent();
                    dlg.dialogClose();
                    _this.set_isDirty(true);
                    _this.onChange && _this.onChange();
                };
                dlg.dialogOpen();
            };
            NotesEditor.prototype.editClick = function (e) {
                var _this = this;
                e.preventDefault();
                var index = $(e.target).data('index');
                var old = this.items[index];
                var dlg = new Regs.NoteDialog();
                dlg.dialogTitle = 'Edit Note';
                dlg.text = old.Text;
                dlg.okClick = function () {
                    var text = Q.trimToNull(dlg.text);
                    if (!text) {
                        return;
                    }
                    _this.items[index].Text = text;
                    _this.updateContent();
                    dlg.dialogClose();
                    _this.set_isDirty(true);
                    _this.onChange && _this.onChange();
                };
                dlg.dialogOpen();
            };
            NotesEditor.prototype.deleteClick = function (e) {
                var _this = this;
                e.preventDefault();
                var index = $(e.target).data('index');
                Q.confirm('Delete this note?', function () {
                    _this.items.splice(index, 1);
                    _this.updateContent();
                    _this.set_isDirty(true);
                    _this.onChange && _this.onChange();
                });
            };
            Object.defineProperty(NotesEditor.prototype, "value", {
                get: function () {
                    return this.items;
                },
                set: function (value) {
                    this.items = value || [];
                    this.set_isDirty(false);
                    this.updateContent();
                },
                enumerable: true,
                configurable: true
            });
            NotesEditor.prototype.getEditValue = function (prop, target) {
                target[prop.name] = this.value;
            };
            NotesEditor.prototype.setEditValue = function (source, prop) {
                this.value = source[prop.name] || [];
            };
            NotesEditor.prototype.get_isDirty = function () {
                return this.isDirty;
            };
            NotesEditor.prototype.set_isDirty = function (value) {
                this.isDirty = value;
            };
            NotesEditor = __decorate([
                Serenity.Decorators.registerEditor([Serenity.IGetEditValue, Serenity.ISetEditValue]),
                Serenity.Decorators.element("<div/>")
            ], NotesEditor);
            return NotesEditor;
        }(Serenity.TemplatedWidget));
        Regs.NotesEditor = NotesEditor;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblNewBornManagementDialog = /** @class */ (function (_super) {
            __extends(TblNewBornManagementDialog, _super);
            function TblNewBornManagementDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Regs.TblNewBornManagementForm(_this.idPrefix);
                return _this;
            }
            TblNewBornManagementDialog.prototype.getFormKey = function () { return Regs.TblNewBornManagementForm.formKey; };
            TblNewBornManagementDialog.prototype.getIdProperty = function () { return Regs.TblNewBornManagementRow.idProperty; };
            TblNewBornManagementDialog.prototype.getLocalTextPrefix = function () { return Regs.TblNewBornManagementRow.localTextPrefix; };
            TblNewBornManagementDialog.prototype.getNameProperty = function () { return Regs.TblNewBornManagementRow.nameProperty; };
            TblNewBornManagementDialog.prototype.getService = function () { return Regs.TblNewBornManagementService.baseUrl; };
            TblNewBornManagementDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblNewBornManagementDialog);
            return TblNewBornManagementDialog;
        }(Serenity.EntityDialog));
        Regs.TblNewBornManagementDialog = TblNewBornManagementDialog;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
/// <reference path="../tblnewbornmanagement/tblnewbornmanagementdialog.ts" />
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var AdmissionsNewBornManagementDialog = /** @class */ (function (_super) {
            __extends(AdmissionsNewBornManagementDialog, _super);
            function AdmissionsNewBornManagementDialog() {
                return _super.call(this) || this;
            }
            AdmissionsNewBornManagementDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.AdId, true);
            };
            AdmissionsNewBornManagementDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], AdmissionsNewBornManagementDialog);
            return AdmissionsNewBornManagementDialog;
        }(Regs.TblNewBornManagementDialog));
        Regs.AdmissionsNewBornManagementDialog = AdmissionsNewBornManagementDialog;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblNewBornManagementGrid = /** @class */ (function (_super) {
            __extends(TblNewBornManagementGrid, _super);
            function TblNewBornManagementGrid(container) {
                return _super.call(this, container) || this;
            }
            TblNewBornManagementGrid.prototype.getColumnsKey = function () { return 'Regs.TblNewBornManagement'; };
            TblNewBornManagementGrid.prototype.getDialogType = function () { return Regs.TblNewBornManagementDialog; };
            TblNewBornManagementGrid.prototype.getIdProperty = function () { return Regs.TblNewBornManagementRow.idProperty; };
            TblNewBornManagementGrid.prototype.getLocalTextPrefix = function () { return Regs.TblNewBornManagementRow.localTextPrefix; };
            TblNewBornManagementGrid.prototype.getService = function () { return Regs.TblNewBornManagementService.baseUrl; };
            TblNewBornManagementGrid = __decorate([
                Serenity.Decorators.filterable(),
                Serenity.Decorators.registerClass()
            ], TblNewBornManagementGrid);
            return TblNewBornManagementGrid;
        }(Serenity.EntityGrid));
        Regs.TblNewBornManagementGrid = TblNewBornManagementGrid;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
/// <reference path="../tblnewbornmanagement/tblnewbornmanagementgrid.ts" />
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var AdmissionsNewBornManagementGrid = /** @class */ (function (_super) {
            __extends(AdmissionsNewBornManagementGrid, _super);
            function AdmissionsNewBornManagementGrid(container) {
                return _super.call(this, container) || this;
            }
            AdmissionsNewBornManagementGrid.prototype.getDialogType = function () { return Regs.AdmissionsNewBornManagementDialog; };
            AdmissionsNewBornManagementGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            AdmissionsNewBornManagementGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            AdmissionsNewBornManagementGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            AdmissionsNewBornManagementGrid.prototype.addButtonClick = function () {
                this.editItem({ AdId: this.AdId });
            };
            AdmissionsNewBornManagementGrid.prototype.getInitialTitle = function () {
                return null;
            };
            AdmissionsNewBornManagementGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.AdId;
            };
            Object.defineProperty(AdmissionsNewBornManagementGrid.prototype, "AdId", {
                get: function () {
                    return this.__AdId;
                },
                set: function (value) {
                    if (this.__AdId !== value) {
                        this.__AdId = value;
                        this.setEquality('AdId', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            AdmissionsNewBornManagementGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AdmissionsNewBornManagementGrid);
            return AdmissionsNewBornManagementGrid;
        }(Regs.TblNewBornManagementGrid));
        Regs.AdmissionsNewBornManagementGrid = AdmissionsNewBornManagementGrid;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblOperationsDialog = /** @class */ (function (_super) {
            __extends(TblOperationsDialog, _super);
            function TblOperationsDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Regs.TblOperationsForm(_this.idPrefix);
                return _this;
            }
            TblOperationsDialog.prototype.getFormKey = function () { return Regs.TblOperationsForm.formKey; };
            TblOperationsDialog.prototype.getIdProperty = function () { return Regs.TblOperationsRow.idProperty; };
            TblOperationsDialog.prototype.getLocalTextPrefix = function () { return Regs.TblOperationsRow.localTextPrefix; };
            TblOperationsDialog.prototype.getNameProperty = function () { return Regs.TblOperationsRow.nameProperty; };
            TblOperationsDialog.prototype.getService = function () { return Regs.TblOperationsService.baseUrl; };
            TblOperationsDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblOperationsDialog);
            return TblOperationsDialog;
        }(Serenity.EntityDialog));
        Regs.TblOperationsDialog = TblOperationsDialog;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
/// <reference path="../tbloperations/tbloperationsdialog.ts" />
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var AdmissionsOperationsDialog = /** @class */ (function (_super) {
            __extends(AdmissionsOperationsDialog, _super);
            function AdmissionsOperationsDialog() {
                return _super.call(this) || this;
            }
            AdmissionsOperationsDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.AdId, true);
            };
            AdmissionsOperationsDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], AdmissionsOperationsDialog);
            return AdmissionsOperationsDialog;
        }(Regs.TblOperationsDialog));
        Regs.AdmissionsOperationsDialog = AdmissionsOperationsDialog;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblOperationsGrid = /** @class */ (function (_super) {
            __extends(TblOperationsGrid, _super);
            function TblOperationsGrid(container) {
                return _super.call(this, container) || this;
            }
            TblOperationsGrid.prototype.getColumnsKey = function () { return 'Regs.TblOperations'; };
            TblOperationsGrid.prototype.getDialogType = function () { return Regs.TblOperationsDialog; };
            TblOperationsGrid.prototype.getIdProperty = function () { return Regs.TblOperationsRow.idProperty; };
            TblOperationsGrid.prototype.getLocalTextPrefix = function () { return Regs.TblOperationsRow.localTextPrefix; };
            TblOperationsGrid.prototype.getService = function () { return Regs.TblOperationsService.baseUrl; };
            TblOperationsGrid = __decorate([
                Serenity.Decorators.filterable(),
                Serenity.Decorators.registerClass()
            ], TblOperationsGrid);
            return TblOperationsGrid;
        }(Serenity.EntityGrid));
        Regs.TblOperationsGrid = TblOperationsGrid;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
/// <reference path="../tbloperations/tbloperationsgrid.ts" />
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var AdmissionsOperationsGrid = /** @class */ (function (_super) {
            __extends(AdmissionsOperationsGrid, _super);
            function AdmissionsOperationsGrid(container) {
                return _super.call(this, container) || this;
            }
            AdmissionsOperationsGrid.prototype.getDialogType = function () { return Regs.AdmissionsOperationsDialog; };
            AdmissionsOperationsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            AdmissionsOperationsGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            AdmissionsOperationsGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            AdmissionsOperationsGrid.prototype.addButtonClick = function () {
                this.editItem({ AdId: this.AdId });
            };
            AdmissionsOperationsGrid.prototype.getInitialTitle = function () {
                return null;
            };
            AdmissionsOperationsGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.AdId;
            };
            Object.defineProperty(AdmissionsOperationsGrid.prototype, "AdId", {
                get: function () {
                    return this.__AdId;
                },
                set: function (value) {
                    if (this.__AdId !== value) {
                        this.__AdId = value;
                        this.setEquality('AdId', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            AdmissionsOperationsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AdmissionsOperationsGrid);
            return AdmissionsOperationsGrid;
        }(Regs.TblOperationsGrid));
        Regs.AdmissionsOperationsGrid = AdmissionsOperationsGrid;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblReferralDialog = /** @class */ (function (_super) {
            __extends(TblReferralDialog, _super);
            function TblReferralDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Regs.TblReferralForm(_this.idPrefix);
                //convert date from to Shamsi and miladi
                _this.form.RefDate.change(function (e) {
                    _this.form.RefDateH.value = convertToShamsi(_this.form.RefDate.valueAsDate);
                });
                _this.form.RefDateH.change(function (e) {
                    _this.form.RefDate.valueAsDate = convertToGregorian(_this.form.RefDateH.value.toString());
                });
                return _this;
            }
            TblReferralDialog.prototype.getFormKey = function () { return Regs.TblReferralForm.formKey; };
            TblReferralDialog.prototype.getIdProperty = function () { return Regs.TblReferralRow.idProperty; };
            TblReferralDialog.prototype.getLocalTextPrefix = function () { return Regs.TblReferralRow.localTextPrefix; };
            TblReferralDialog.prototype.getNameProperty = function () { return Regs.TblReferralRow.nameProperty; };
            TblReferralDialog.prototype.getService = function () { return Regs.TblReferralService.baseUrl; };
            TblReferralDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblReferralDialog);
            return TblReferralDialog;
        }(Serenity.EntityDialog));
        Regs.TblReferralDialog = TblReferralDialog;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
/// <reference path="../tblreferral/tblreferraldialog.ts" />
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var AdmissionsReferalDialog = /** @class */ (function (_super) {
            __extends(AdmissionsReferalDialog, _super);
            function AdmissionsReferalDialog() {
                return _super.call(this) || this;
            }
            AdmissionsReferalDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.AdId, true);
            };
            AdmissionsReferalDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], AdmissionsReferalDialog);
            return AdmissionsReferalDialog;
        }(Regs.TblReferralDialog));
        Regs.AdmissionsReferalDialog = AdmissionsReferalDialog;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblReferralGrid = /** @class */ (function (_super) {
            __extends(TblReferralGrid, _super);
            function TblReferralGrid(container) {
                return _super.call(this, container) || this;
            }
            TblReferralGrid.prototype.getColumnsKey = function () { return 'Regs.TblReferral'; };
            TblReferralGrid.prototype.getDialogType = function () { return Regs.TblReferralDialog; };
            TblReferralGrid.prototype.getIdProperty = function () { return Regs.TblReferralRow.idProperty; };
            TblReferralGrid.prototype.getLocalTextPrefix = function () { return Regs.TblReferralRow.localTextPrefix; };
            TblReferralGrid.prototype.getService = function () { return Regs.TblReferralService.baseUrl; };
            TblReferralGrid = __decorate([
                Serenity.Decorators.filterable(),
                Serenity.Decorators.registerClass()
            ], TblReferralGrid);
            return TblReferralGrid;
        }(Serenity.EntityGrid));
        Regs.TblReferralGrid = TblReferralGrid;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
/// <reference path="../tblreferral/tblreferralgrid.ts" />
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var AdmissionsReferalGrid = /** @class */ (function (_super) {
            __extends(AdmissionsReferalGrid, _super);
            function AdmissionsReferalGrid(container) {
                return _super.call(this, container) || this;
            }
            AdmissionsReferalGrid.prototype.getDialogType = function () { return Regs.AdmissionsReferalDialog; };
            AdmissionsReferalGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            AdmissionsReferalGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            AdmissionsReferalGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            AdmissionsReferalGrid.prototype.addButtonClick = function () {
                this.editItem({ AdId: this.AdId });
            };
            AdmissionsReferalGrid.prototype.getInitialTitle = function () {
                return null;
            };
            AdmissionsReferalGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.AdId;
            };
            Object.defineProperty(AdmissionsReferalGrid.prototype, "AdId", {
                get: function () {
                    return this.__AdId;
                },
                set: function (value) {
                    if (this.__AdId !== value) {
                        this.__AdId = value;
                        this.setEquality('AdId', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            AdmissionsReferalGrid = __decorate([
                Serenity.Decorators.filterable(),
                Serenity.Decorators.registerClass()
            ], AdmissionsReferalGrid);
            return AdmissionsReferalGrid;
        }(Regs.TblReferralGrid));
        Regs.AdmissionsReferalGrid = AdmissionsReferalGrid;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblTestExaminationsDialog = /** @class */ (function (_super) {
            __extends(TblTestExaminationsDialog, _super);
            function TblTestExaminationsDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Regs.TblTestExaminationsForm(_this.idPrefix);
                return _this;
            }
            TblTestExaminationsDialog.prototype.getFormKey = function () { return Regs.TblTestExaminationsForm.formKey; };
            TblTestExaminationsDialog.prototype.getIdProperty = function () { return Regs.TblTestExaminationsRow.idProperty; };
            TblTestExaminationsDialog.prototype.getLocalTextPrefix = function () { return Regs.TblTestExaminationsRow.localTextPrefix; };
            TblTestExaminationsDialog.prototype.getNameProperty = function () { return Regs.TblTestExaminationsRow.nameProperty; };
            TblTestExaminationsDialog.prototype.getService = function () { return Regs.TblTestExaminationsService.baseUrl; };
            TblTestExaminationsDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblTestExaminationsDialog);
            return TblTestExaminationsDialog;
        }(Serenity.EntityDialog));
        Regs.TblTestExaminationsDialog = TblTestExaminationsDialog;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
/// <reference path="../tbltestexaminations/tbltestexaminationsdialog.ts" />
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var AdmissionsTestResultsDialog = /** @class */ (function (_super) {
            __extends(AdmissionsTestResultsDialog, _super);
            function AdmissionsTestResultsDialog() {
                return _super.call(this) || this;
            }
            AdmissionsTestResultsDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.AdId, true);
            };
            AdmissionsTestResultsDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], AdmissionsTestResultsDialog);
            return AdmissionsTestResultsDialog;
        }(Regs.TblTestExaminationsDialog));
        Regs.AdmissionsTestResultsDialog = AdmissionsTestResultsDialog;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblTestExaminationsGrid = /** @class */ (function (_super) {
            __extends(TblTestExaminationsGrid, _super);
            function TblTestExaminationsGrid(container) {
                return _super.call(this, container) || this;
            }
            TblTestExaminationsGrid.prototype.getColumnsKey = function () { return 'Regs.TblTestExaminations'; };
            TblTestExaminationsGrid.prototype.getDialogType = function () { return Regs.TblTestExaminationsDialog; };
            TblTestExaminationsGrid.prototype.getIdProperty = function () { return Regs.TblTestExaminationsRow.idProperty; };
            TblTestExaminationsGrid.prototype.getLocalTextPrefix = function () { return Regs.TblTestExaminationsRow.localTextPrefix; };
            TblTestExaminationsGrid.prototype.getService = function () { return Regs.TblTestExaminationsService.baseUrl; };
            TblTestExaminationsGrid = __decorate([
                Serenity.Decorators.filterable(),
                Serenity.Decorators.registerClass()
            ], TblTestExaminationsGrid);
            return TblTestExaminationsGrid;
        }(Serenity.EntityGrid));
        Regs.TblTestExaminationsGrid = TblTestExaminationsGrid;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
/// <reference path="../tbltestexaminations/tbltestexaminationsgrid.ts" />
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var AdmissionsTestResultsGrid = /** @class */ (function (_super) {
            __extends(AdmissionsTestResultsGrid, _super);
            function AdmissionsTestResultsGrid(container) {
                return _super.call(this, container) || this;
            }
            AdmissionsTestResultsGrid.prototype.getDialogType = function () { return Regs.AdmissionsTestResultsDialog; };
            AdmissionsTestResultsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            AdmissionsTestResultsGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            AdmissionsTestResultsGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            AdmissionsTestResultsGrid.prototype.addButtonClick = function () {
                this.editItem({ AdId: this.AdId });
            };
            AdmissionsTestResultsGrid.prototype.getInitialTitle = function () {
                return null;
            };
            AdmissionsTestResultsGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.AdId;
            };
            Object.defineProperty(AdmissionsTestResultsGrid.prototype, "AdId", {
                get: function () {
                    return this.__AdId;
                },
                set: function (value) {
                    if (this.__AdId !== value) {
                        this.__AdId = value;
                        this.setEquality('AdId', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            AdmissionsTestResultsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AdmissionsTestResultsGrid);
            return AdmissionsTestResultsGrid;
        }(Regs.TblTestExaminationsGrid));
        Regs.AdmissionsTestResultsGrid = AdmissionsTestResultsGrid;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblAdmissionsDischargeDialog = /** @class */ (function (_super) {
            __extends(TblAdmissionsDischargeDialog, _super);
            function TblAdmissionsDischargeDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Regs.TblAdmissionsDischargeForm(_this.idPrefix);
                var getDate = new Date();
                var todyDate = getDate.getDate();
                _this.form.DisDate.addValidationRule(_this.uniqueName, function (e) {
                    if (_this.form.DisDate.valueAsDate < _this.form.AdDate.valueAsDate) {
                        return Q.text('Db.Administration.Translation.DischargeLessThanAdmission');
                    }
                    if (_this.form.DisDate.valueAsDate.getDate() > todyDate) {
                        return Q.text('Db.Administration.Translation.DischargeDateEqualToday');
                    }
                    var diff = Math.abs(_this.form.DisDate.valueAsDate.getTime() - _this.form.AdDate.valueAsDate.getTime());
                    var diffdays = Math.ceil(diff / (1000 * 3600 * 24));
                    if (diffdays > 40) {
                        return Q.text('Db.Administration.Translation.DischargeDateInvalid');
                    }
                });
                _this.form.AdDate.addValidationRule(_this.uniqueName, function (e) {
                    if (_this.form.AdDate.valueAsDate.getDate() > todyDate) {
                        return Q.text('Db.Administration.Translation.AdmissionDateBigger');
                    }
                    if (_this.form.AdDate.valueAsDate.getDate() < todyDate - 41) {
                        return Q.text('Db.Administration.Translation.AdmissionDateSmaller');
                    }
                });
                _this.form.DisStatus.changeSelect2(function (e) {
                    var statusdist = _this.form.DisStatus.value;
                    if (statusdist == null || statusdist == undefined) {
                        _this.getStatusDeath({});
                        return;
                    }
                    var id = Serenity.EditorUtils.getValue(_this.form.DisStatus);
                    EMR.Configs.TblOutcomesMotherService.Retrieve({
                        EntityId: id
                    }, function (response) {
                        _this.getStatusDeath(response.Entity);
                    });
                });
                _this.form.Wardid.changeSelect2(function (e) {
                    var statusdist = _this.form.Wardid.value;
                    if (statusdist == null || statusdist == undefined) {
                        _this.unhideAbortionTypeForm({});
                        return;
                    }
                    var id = Serenity.EditorUtils.getValue(_this.form.Wardid);
                    EMR.Configs.TblWardService.Retrieve({
                        EntityId: id
                    }, function (response) {
                        _this.unhideAbortionTypeForm(response.Entity);
                    });
                });
                //convert date from to Shamsi and miladi
                _this.form.AdDate.change(function (e) {
                    _this.form.AdDateH.value = convertToShamsi(_this.form.AdDate.valueAsDate);
                });
                _this.form.AdDateH.change(function (e) {
                    _this.form.AdDate.valueAsDate = convertToGregorian(_this.form.AdDateH.value.toString());
                });
                _this.form.DisDateH.change(function (e) {
                    _this.form.DisDate.valueAsDate = convertToGregorian(_this.form.DisDateH.value.toString());
                });
                _this.form.DisDate.change(function (e) {
                    _this.form.DisDateH.value = convertToShamsi(_this.form.DisDate.valueAsDate);
                });
                _this.AdmissionNewBornGrid = new Regs.AdmissionsNewBornManagementGrid(_this.byId('TblNewBornManagementGrid'));
                _this.AdmissionNewBornGrid.openDialogsAsPanel = false;
                _this.AdmissionReferalsGrid = new Regs.AdmissionsReferalGrid(_this.byId('TblReferralGrid'));
                _this.AdmissionReferalsGrid.openDialogsAsPanel = false;
                _this.AdmissionsTestResultGrid = new Regs.AdmissionsTestResultsGrid(_this.byId('TblTestExaminationsGrid'));
                _this.AdmissionsTestResultGrid.openDialogsAsPanel = false;
                _this.AdmisionOperations = new Regs.AdmissionsOperationsGrid(_this.byId('TblOperationsGrid'));
                _this.AdmisionOperations.openDialogsAsPanel = false;
                return _this;
            }
            TblAdmissionsDischargeDialog.prototype.getFormKey = function () { return Regs.TblAdmissionsDischargeForm.formKey; };
            TblAdmissionsDischargeDialog.prototype.getIdProperty = function () { return Regs.TblAdmissionsDischargeRow.idProperty; };
            TblAdmissionsDischargeDialog.prototype.getLocalTextPrefix = function () { return Regs.TblAdmissionsDischargeRow.localTextPrefix; };
            TblAdmissionsDischargeDialog.prototype.getNameProperty = function () { return Regs.TblAdmissionsDischargeRow.nameProperty; };
            TblAdmissionsDischargeDialog.prototype.getService = function () { return Regs.TblAdmissionsDischargeService.baseUrl; };
            //show/hide field
            TblAdmissionsDischargeDialog.prototype.getStatusDeath = function (details) {
                if (details.OutcomeId == 4) {
                    this.form.DisDiagCausDeath.getGridField().toggle(true);
                }
                else {
                    this.form.DisDiagCausDeath.getGridField().toggle(false);
                }
            };
            TblAdmissionsDischargeDialog.prototype.getSaveState = function () {
                try {
                    return $.toJSON(this.getSaveEntity());
                }
                catch (e) {
                    return null;
                }
            };
            TblAdmissionsDischargeDialog.prototype.loadResponse = function (data) {
                _super.prototype.loadResponse.call(this, data);
                this.loadedState = this.getSaveState();
            };
            TblAdmissionsDischargeDialog.prototype.loadEntity = function (entity) {
                _super.prototype.loadEntity.call(this, entity);
                Serenity.TabsExtensions.setDisabled(this.tabs, 'TblNewBornManagement', this.isNewOrDeleted());
                Serenity.TabsExtensions.setDisabled(this.tabs, 'TblReferral', this.isNewOrDeleted());
                Serenity.TabsExtensions.setDisabled(this.tabs, 'TblTestExaminations', this.isNewOrDeleted());
                Serenity.TabsExtensions.setDisabled(this.tabs, 'TblOperations', this.isNewOrDeleted());
                this.AdmissionNewBornGrid.AdId = entity.AdId;
                this.AdmissionReferalsGrid.AdId = entity.AdId;
                this.AdmissionsTestResultGrid.AdId = entity.AdId;
                this.AdmisionOperations.AdId = entity.AdId;
                this.unhideAbortionType();
                this.unhideDeathResult();
            };
            TblAdmissionsDischargeDialog.prototype.unhideAbortionType = function () {
                var wardid = Serenity.EditorUtils.getValue(this.form.Wardid);
                if (wardid == 1) {
                    this.form.AbortionType.getGridField().toggle(true);
                }
                else {
                    this.form.AbortionType.getGridField().toggle(false);
                }
            };
            TblAdmissionsDischargeDialog.prototype.unhideDeathResult = function () {
                var deathid = Serenity.EditorUtils.getValue(this.form.DisStatus);
                if (deathid == 4) {
                    this.form.DisDiagCausDeath.getGridField().toggle(true);
                }
                else {
                    this.form.DisDiagCausDeath.getGridField().toggle(false);
                }
            };
            TblAdmissionsDischargeDialog.prototype.unhideAbortionTypeForm = function (details) {
                if (details.WardId == 1) {
                    this.form.AbortionType.getGridField().toggle(true);
                }
                else {
                    this.form.AbortionType.getGridField().toggle(false);
                }
            };
            TblAdmissionsDischargeDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblAdmissionsDischargeDialog);
            return TblAdmissionsDischargeDialog;
        }(Serenity.EntityDialog));
        Regs.TblAdmissionsDischargeDialog = TblAdmissionsDischargeDialog;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblAdmissionsDischargeGrid = /** @class */ (function (_super) {
            __extends(TblAdmissionsDischargeGrid, _super);
            function TblAdmissionsDischargeGrid(container) {
                return _super.call(this, container) || this;
            }
            TblAdmissionsDischargeGrid.prototype.getColumnsKey = function () { return 'Regs.TblAdmissionsDischarge'; };
            TblAdmissionsDischargeGrid.prototype.getDialogType = function () { return Regs.TblAdmissionsDischargeDialog; };
            TblAdmissionsDischargeGrid.prototype.getIdProperty = function () { return Regs.TblAdmissionsDischargeRow.idProperty; };
            TblAdmissionsDischargeGrid.prototype.getLocalTextPrefix = function () { return Regs.TblAdmissionsDischargeRow.localTextPrefix; };
            TblAdmissionsDischargeGrid.prototype.getService = function () { return Regs.TblAdmissionsDischargeService.baseUrl; };
            TblAdmissionsDischargeGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TblAdmissionsDischargeGrid);
            return TblAdmissionsDischargeGrid;
        }(Serenity.EntityGrid));
        Regs.TblAdmissionsDischargeGrid = TblAdmissionsDischargeGrid;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblDischargeDialog = /** @class */ (function (_super) {
            __extends(TblDischargeDialog, _super);
            function TblDischargeDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Regs.TblDischargeForm(_this.idPrefix);
                return _this;
            }
            TblDischargeDialog.prototype.getFormKey = function () { return Regs.TblDischargeForm.formKey; };
            TblDischargeDialog.prototype.getIdProperty = function () { return Regs.TblDischargeRow.idProperty; };
            TblDischargeDialog.prototype.getLocalTextPrefix = function () { return Regs.TblDischargeRow.localTextPrefix; };
            TblDischargeDialog.prototype.getNameProperty = function () { return Regs.TblDischargeRow.nameProperty; };
            TblDischargeDialog.prototype.getService = function () { return Regs.TblDischargeService.baseUrl; };
            TblDischargeDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblDischargeDialog);
            return TblDischargeDialog;
        }(Serenity.EntityDialog));
        Regs.TblDischargeDialog = TblDischargeDialog;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblDischargeGrid = /** @class */ (function (_super) {
            __extends(TblDischargeGrid, _super);
            function TblDischargeGrid(container) {
                return _super.call(this, container) || this;
            }
            TblDischargeGrid.prototype.getColumnsKey = function () { return 'Regs.TblDischarge'; };
            TblDischargeGrid.prototype.getDialogType = function () { return Regs.TblDischargeDialog; };
            TblDischargeGrid.prototype.getIdProperty = function () { return Regs.TblDischargeRow.idProperty; };
            TblDischargeGrid.prototype.getLocalTextPrefix = function () { return Regs.TblDischargeRow.localTextPrefix; };
            TblDischargeGrid.prototype.getService = function () { return Regs.TblDischargeService.baseUrl; };
            TblDischargeGrid = __decorate([
                Serenity.Decorators.filterable(),
                Serenity.Decorators.registerClass()
            ], TblDischargeGrid);
            return TblDischargeGrid;
        }(Serenity.EntityGrid));
        Regs.TblDischargeGrid = TblDischargeGrid;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblPatDetailsDialog = /** @class */ (function (_super) {
            __extends(TblPatDetailsDialog, _super);
            function TblPatDetailsDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Regs.TblPatDetailsForm(_this.idPrefix);
                var getDate = new Date();
                var todyDate = getDate.getTime();
                _this.form.PatDdate.addValidationRule(_this.uniqueName, function (e) {
                    var newDate = _this.form.PatDdate.valueAsDate.getTime();
                    if (newDate > todyDate) {
                        return "Date cannot be bigger than today! Please correct it";
                    }
                    var oneday = 24 * 60 * 60 * 1000;
                    var diff = Math.abs(getDate.getTime() - _this.form.PatDdate.valueAsDate.getTime());
                    var diffdays = Math.ceil(diff / oneday);
                    if (diffdays > 41) {
                        return "The date is too early to enter. Pleae enter a valid date";
                    }
                });
                _this.form.PatDdate.change(function (e) {
                    _this.form.PatDdateH.value = convertToShamsi(_this.form.PatDdate.valueAsDate);
                });
                _this.form.PatDdateH.change(function (e) {
                    _this.form.PatDdate.valueAsDate = convertToGregorian(_this.form.PatDdateH.value.toString());
                });
                return _this;
            }
            TblPatDetailsDialog.prototype.getFormKey = function () { return Regs.TblPatDetailsForm.formKey; };
            TblPatDetailsDialog.prototype.getIdProperty = function () { return Regs.TblPatDetailsRow.idProperty; };
            TblPatDetailsDialog.prototype.getLocalTextPrefix = function () { return Regs.TblPatDetailsRow.localTextPrefix; };
            TblPatDetailsDialog.prototype.getNameProperty = function () { return Regs.TblPatDetailsRow.nameProperty; };
            TblPatDetailsDialog.prototype.getService = function () { return Regs.TblPatDetailsService.baseUrl; };
            TblPatDetailsDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblPatDetailsDialog);
            return TblPatDetailsDialog;
        }(Serenity.EntityDialog));
        Regs.TblPatDetailsDialog = TblPatDetailsDialog;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblPatDetailsGrid = /** @class */ (function (_super) {
            __extends(TblPatDetailsGrid, _super);
            function TblPatDetailsGrid(container) {
                return _super.call(this, container) || this;
            }
            TblPatDetailsGrid.prototype.getColumnsKey = function () { return 'Regs.TblPatDetails'; };
            TblPatDetailsGrid.prototype.getDialogType = function () { return Regs.TblPatDetailsDialog; };
            TblPatDetailsGrid.prototype.getIdProperty = function () { return Regs.TblPatDetailsRow.idProperty; };
            TblPatDetailsGrid.prototype.getLocalTextPrefix = function () { return Regs.TblPatDetailsRow.localTextPrefix; };
            TblPatDetailsGrid.prototype.getService = function () { return Regs.TblPatDetailsService.baseUrl; };
            TblPatDetailsGrid = __decorate([
                Serenity.Decorators.filterable(),
                Serenity.Decorators.registerClass()
            ], TblPatDetailsGrid);
            return TblPatDetailsGrid;
        }(Serenity.EntityGrid));
        Regs.TblPatDetailsGrid = TblPatDetailsGrid;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblPatientNextOfKeenDialog = /** @class */ (function (_super) {
            __extends(TblPatientNextOfKeenDialog, _super);
            function TblPatientNextOfKeenDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Regs.TblPatientNextOfKeenForm(_this.idPrefix);
                return _this;
            }
            TblPatientNextOfKeenDialog.prototype.getFormKey = function () { return Regs.TblPatientNextOfKeenForm.formKey; };
            TblPatientNextOfKeenDialog.prototype.getIdProperty = function () { return Regs.TblPatientNextOfKeenRow.idProperty; };
            TblPatientNextOfKeenDialog.prototype.getLocalTextPrefix = function () { return Regs.TblPatientNextOfKeenRow.localTextPrefix; };
            TblPatientNextOfKeenDialog.prototype.getNameProperty = function () { return Regs.TblPatientNextOfKeenRow.nameProperty; };
            TblPatientNextOfKeenDialog.prototype.getService = function () { return Regs.TblPatientNextOfKeenService.baseUrl; };
            TblPatientNextOfKeenDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblPatientNextOfKeenDialog);
            return TblPatientNextOfKeenDialog;
        }(Serenity.EntityDialog));
        Regs.TblPatientNextOfKeenDialog = TblPatientNextOfKeenDialog;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblPatientNextOfKeenGrid = /** @class */ (function (_super) {
            __extends(TblPatientNextOfKeenGrid, _super);
            function TblPatientNextOfKeenGrid(container) {
                return _super.call(this, container) || this;
            }
            TblPatientNextOfKeenGrid.prototype.getColumnsKey = function () { return 'Regs.TblPatientNextOfKeen'; };
            TblPatientNextOfKeenGrid.prototype.getDialogType = function () { return Regs.TblPatientNextOfKeenDialog; };
            TblPatientNextOfKeenGrid.prototype.getIdProperty = function () { return Regs.TblPatientNextOfKeenRow.idProperty; };
            TblPatientNextOfKeenGrid.prototype.getLocalTextPrefix = function () { return Regs.TblPatientNextOfKeenRow.localTextPrefix; };
            TblPatientNextOfKeenGrid.prototype.getService = function () { return Regs.TblPatientNextOfKeenService.baseUrl; };
            TblPatientNextOfKeenGrid = __decorate([
                Serenity.Decorators.filterable(),
                Serenity.Decorators.registerClass()
            ], TblPatientNextOfKeenGrid);
            return TblPatientNextOfKeenGrid;
        }(Serenity.EntityGrid));
        Regs.TblPatientNextOfKeenGrid = TblPatientNextOfKeenGrid;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
/// <reference path="../tbldischarge/tbldischargedialog.ts" />
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var AdmissionsDischargeDialog = /** @class */ (function (_super) {
            __extends(AdmissionsDischargeDialog, _super);
            function AdmissionsDischargeDialog() {
                return _super.call(this) || this;
            }
            AdmissionsDischargeDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.Mrid, true);
            };
            AdmissionsDischargeDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.maximizable(),
                Serenity.Decorators.registerClass()
            ], AdmissionsDischargeDialog);
            return AdmissionsDischargeDialog;
        }(Regs.TblDischargeDialog));
        Regs.AdmissionsDischargeDialog = AdmissionsDischargeDialog;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
/// <reference path="../tbldischarge/tbldischargegrid.ts" />
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var AdmissionsDischargeGrid = /** @class */ (function (_super) {
            __extends(AdmissionsDischargeGrid, _super);
            function AdmissionsDischargeGrid(container) {
                return _super.call(this, container) || this;
            }
            AdmissionsDischargeGrid.prototype.getDialogType = function () { return Regs.AdmissionsDischargeDialog; };
            AdmissionsDischargeGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            AdmissionsDischargeGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            AdmissionsDischargeGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            AdmissionsDischargeGrid.prototype.addButtonClick = function () {
                this.editItem({ Mrid: this.Mrid });
            };
            AdmissionsDischargeGrid.prototype.getInitialTitle = function () {
                return null;
            };
            AdmissionsDischargeGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.Mrid;
            };
            Object.defineProperty(AdmissionsDischargeGrid.prototype, "Mrid", {
                get: function () {
                    return this.__Mrid;
                },
                set: function (value) {
                    if (this.__Mrid !== value) {
                        this.__Mrid = value;
                        this.setEquality('Mrid', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            AdmissionsDischargeGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AdmissionsDischargeGrid);
            return AdmissionsDischargeGrid;
        }(Regs.TblDischargeGrid));
        Regs.AdmissionsDischargeGrid = AdmissionsDischargeGrid;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblPatientsAdmissionsDischargeDialog = /** @class */ (function (_super) {
            __extends(TblPatientsAdmissionsDischargeDialog, _super);
            function TblPatientsAdmissionsDischargeDialog() {
                return _super.call(this) || this;
            }
            TblPatientsAdmissionsDischargeDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.Mrid, true);
            };
            TblPatientsAdmissionsDischargeDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblPatientsAdmissionsDischargeDialog);
            return TblPatientsAdmissionsDischargeDialog;
        }(Regs.TblAdmissionsDischargeDialog));
        Regs.TblPatientsAdmissionsDischargeDialog = TblPatientsAdmissionsDischargeDialog;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblPatientsAdmissionsDischargeDialog = /** @class */ (function (_super) {
            __extends(TblPatientsAdmissionsDischargeDialog, _super);
            function TblPatientsAdmissionsDischargeDialog() {
                return _super.call(this) || this;
            }
            TblPatientsAdmissionsDischargeDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.Mrid, true);
            };
            TblPatientsAdmissionsDischargeDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblPatientsAdmissionsDischargeDialog);
            return TblPatientsAdmissionsDischargeDialog;
        }(Regs.TblAdmissionsDischargeDialog));
        Regs.TblPatientsAdmissionsDischargeDialog = TblPatientsAdmissionsDischargeDialog;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
/// <reference path="../tbladmissionsdischarge/tbladmissionsdischargegrid.ts" />
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblPatientsAdmissionsDischargeGrid = /** @class */ (function (_super) {
            __extends(TblPatientsAdmissionsDischargeGrid, _super);
            function TblPatientsAdmissionsDischargeGrid(container) {
                return _super.call(this, container) || this;
            }
            TblPatientsAdmissionsDischargeGrid.prototype.getDialogType = function () { return Regs.TblPatientsAdmissionsDischargeDialog; };
            TblPatientsAdmissionsDischargeGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            TblPatientsAdmissionsDischargeGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            TblPatientsAdmissionsDischargeGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            TblPatientsAdmissionsDischargeGrid.prototype.addButtonClick = function () {
                this.editItem({ Mrid: this.Mrid });
            };
            TblPatientsAdmissionsDischargeGrid.prototype.getInitialTitle = function () {
                return null;
            };
            TblPatientsAdmissionsDischargeGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.Mrid;
            };
            Object.defineProperty(TblPatientsAdmissionsDischargeGrid.prototype, "Mrid", {
                get: function () {
                    return this._Mrid;
                },
                set: function (value) {
                    if (this._Mrid !== value) {
                        this._Mrid = value;
                        this.setEquality('Mrid', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            TblPatientsAdmissionsDischargeGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TblPatientsAdmissionsDischargeGrid);
            return TblPatientsAdmissionsDischargeGrid;
        }(Regs.TblAdmissionsDischargeGrid));
        Regs.TblPatientsAdmissionsDischargeGrid = TblPatientsAdmissionsDischargeGrid;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblPatientsDialog = /** @class */ (function (_super) {
            __extends(TblPatientsDialog, _super);
            function TblPatientsDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Regs.TblPatientsForm(_this.idPrefix);
                _this.form.FacilityId.changeSelect2(function (e) {
                    var facilityId = _this.form.FacilityId.value;
                    if (facilityId == null || facilityId == undefined) {
                        _this.setMRN({});
                        return;
                    }
                    var id = Serenity.EditorUtils.getValue(_this.form.FacilityId);
                    EMR.Locations.FacilityInfoService.Retrieve({
                        EntityId: id
                    }, function (response) {
                        _this.setMRN(response.Entity);
                    });
                });
                _this.PatDetailsGrid = new Regs.TblPatientsPatDetailsGrid(_this.byId('TblPatDetailsGrid'));
                _this.PatDetailsGrid.openDialogsAsPanel = false;
                _this.PatAdmissionDischarge = new Regs.TblPatientsAdmissionsDischargeGrid(_this.byId('TblAdmissionsDischargeGrid'));
                _this.PatAdmissionDischarge.openDialogsAsPanel = false;
                _this.PatientsNextOfKeen = new Regs.TblPatientsNextOfKeenGrid(_this.byId('TblPatientNextOfKeenGrid'));
                _this.PatientsNextOfKeen.openDialogsAsPanel = false;
                //this.byId('NoteList').closest('.field').hide().end().appendTo(this.byId('TabNotes'));
                EMR.DialogUtils.pendingChangesConfirmation(_this.element, function () { return _this.getSaveState() != _this.loadedState; });
                return _this;
            }
            TblPatientsDialog.prototype.getFormKey = function () { return Regs.TblPatientsForm.formKey; };
            TblPatientsDialog.prototype.getIdProperty = function () { return Regs.TblPatientsRow.idProperty; };
            TblPatientsDialog.prototype.getLocalTextPrefix = function () { return Regs.TblPatientsRow.localTextPrefix; };
            TblPatientsDialog.prototype.getNameProperty = function () { return Regs.TblPatientsRow.nameProperty; };
            TblPatientsDialog.prototype.getService = function () { return Regs.TblPatientsService.baseUrl; };
            TblPatientsDialog.prototype.getSaveState = function () {
                try {
                    return $.toJSON(this.getSaveEntity());
                }
                catch (e) {
                    return null;
                }
            };
            TblPatientsDialog.prototype.loadResponse = function (data) {
                _super.prototype.loadResponse.call(this, data);
                this.loadedState = this.getSaveState();
            };
            TblPatientsDialog.prototype.loadEntity = function (entity) {
                _super.prototype.loadEntity.call(this, entity);
                Serenity.TabsExtensions.setDisabled(this.tabs, 'TblPatDetails', this.isNewOrDeleted());
                Serenity.TabsExtensions.setDisabled(this.tabs, 'TblPatientNextOfKeen', this.isNewOrDeleted());
                Serenity.TabsExtensions.setDisabled(this.tabs, 'TblAdmissionsDischarge', this.isNewOrDeleted());
                this.PatDetailsGrid.Mrid = entity.Mrid;
                this.PatientsNextOfKeen.Mrid = entity.Mrid;
                this.PatAdmissionDischarge.Mrid = entity.Mrid;
            };
            TblPatientsDialog.prototype.setMRN = function (details) {
                var facilityPart;
                var facilityIdPart;
                var MNRPart;
                var MNRIdPart;
                facilityPart = 1000000;
                MNRPart = 100000000;
                facilityIdPart = (facilityPart + details.FacilityId);
                MNRIdPart = (MNRPart + details.NoOfPatients + 1);
                this.form.MRN.value = details.ProvinAbbrv + '-' + facilityIdPart.toString().substring(1) + '-';
                //TblPatientsService.UpdateHealthFacilities(
                //    {
                //        FacilityId: details.FacilityId
                //    },
                //    response => { });
            };
            TblPatientsDialog.prototype.onSaveSuccess = function (response) {
                Q.serviceRequest(Regs.TblPatientsService.baseUrl + '/UpdateHealthFacilities');
            };
            TblPatientsDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive(),
                Serenity.Decorators.panel()
            ], TblPatientsDialog);
            return TblPatientsDialog;
        }(Serenity.EntityDialog));
        Regs.TblPatientsDialog = TblPatientsDialog;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblPatientsGrid = /** @class */ (function (_super) {
            __extends(TblPatientsGrid, _super);
            function TblPatientsGrid(container) {
                return _super.call(this, container) || this;
            }
            TblPatientsGrid.prototype.getColumnsKey = function () { return 'Regs.TblPatients'; };
            TblPatientsGrid.prototype.getDialogType = function () { return Regs.TblPatientsDialog; };
            TblPatientsGrid.prototype.getIdProperty = function () { return Regs.TblPatientsRow.idProperty; };
            TblPatientsGrid.prototype.getLocalTextPrefix = function () { return Regs.TblPatientsRow.localTextPrefix; };
            TblPatientsGrid.prototype.getService = function () { return Regs.TblPatientsService.baseUrl; };
            TblPatientsGrid = __decorate([
                Serenity.Decorators.filterable(),
                Serenity.Decorators.registerClass()
            ], TblPatientsGrid);
            return TblPatientsGrid;
        }(Serenity.EntityGrid));
        Regs.TblPatientsGrid = TblPatientsGrid;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
/// <reference path="../tblpatientnextofkeen/tblpatientnextofkeendialog.ts" />
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblPatientsNextOfKeenDialog = /** @class */ (function (_super) {
            __extends(TblPatientsNextOfKeenDialog, _super);
            function TblPatientsNextOfKeenDialog() {
                return _super.call(this) || this;
            }
            TblPatientsNextOfKeenDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.Mrid, true);
            };
            TblPatientsNextOfKeenDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblPatientsNextOfKeenDialog);
            return TblPatientsNextOfKeenDialog;
        }(Regs.TblPatientNextOfKeenDialog));
        Regs.TblPatientsNextOfKeenDialog = TblPatientsNextOfKeenDialog;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
/// <reference path="../tblpatientnextofkeen/tblpatientnextofkeengrid.ts" />
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblPatientsNextOfKeenGrid = /** @class */ (function (_super) {
            __extends(TblPatientsNextOfKeenGrid, _super);
            function TblPatientsNextOfKeenGrid(container) {
                return _super.call(this, container) || this;
            }
            TblPatientsNextOfKeenGrid.prototype.getDialogType = function () { return Regs.TblPatientsNextOfKeenDialog; };
            TblPatientsNextOfKeenGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            TblPatientsNextOfKeenGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            TblPatientsNextOfKeenGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            TblPatientsNextOfKeenGrid.prototype.addButtonClick = function () {
                this.editItem({ Mrid: this.Mrid });
            };
            TblPatientsNextOfKeenGrid.prototype.getInitialTitle = function () {
                return null;
            };
            TblPatientsNextOfKeenGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.Mrid;
            };
            Object.defineProperty(TblPatientsNextOfKeenGrid.prototype, "Mrid", {
                get: function () {
                    return this._Mrid;
                },
                set: function (value) {
                    if (this._Mrid !== value) {
                        this._Mrid = value;
                        this.setEquality('Mrid', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            TblPatientsNextOfKeenGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TblPatientsNextOfKeenGrid);
            return TblPatientsNextOfKeenGrid;
        }(Regs.TblPatientNextOfKeenGrid));
        Regs.TblPatientsNextOfKeenGrid = TblPatientsNextOfKeenGrid;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
/// <reference path="../tblpatdetails/tblpatdetailsdialog.ts" />
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblPatientsPatDetailsDialog = /** @class */ (function (_super) {
            __extends(TblPatientsPatDetailsDialog, _super);
            function TblPatientsPatDetailsDialog() {
                return _super.call(this) || this;
            }
            TblPatientsPatDetailsDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.Mrid, true);
            };
            TblPatientsPatDetailsDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblPatientsPatDetailsDialog);
            return TblPatientsPatDetailsDialog;
        }(Regs.TblPatDetailsDialog));
        Regs.TblPatientsPatDetailsDialog = TblPatientsPatDetailsDialog;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
/// <reference path="../tblpatdetails/tblpatdetailsgrid.ts" />
var EMR;
(function (EMR) {
    var Regs;
    (function (Regs) {
        var TblPatientsPatDetailsGrid = /** @class */ (function (_super) {
            __extends(TblPatientsPatDetailsGrid, _super);
            function TblPatientsPatDetailsGrid(container) {
                return _super.call(this, container) || this;
            }
            TblPatientsPatDetailsGrid.prototype.getDialogType = function () { return Regs.TblPatientsPatDetailsDialog; };
            TblPatientsPatDetailsGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            TblPatientsPatDetailsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            TblPatientsPatDetailsGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            TblPatientsPatDetailsGrid.prototype.addButtonClick = function () {
                this.editItem({ Mrid: this.Mrid });
            };
            TblPatientsPatDetailsGrid.prototype.getInitialTitle = function () {
                return null;
            };
            TblPatientsPatDetailsGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.Mrid;
            };
            Object.defineProperty(TblPatientsPatDetailsGrid.prototype, "Mrid", {
                get: function () {
                    return this._Mrid;
                },
                set: function (value) {
                    if (this._Mrid !== value) {
                        this._Mrid = value;
                        this.setEquality('Mrid', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            TblPatientsPatDetailsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TblPatientsPatDetailsGrid);
            return TblPatientsPatDetailsGrid;
        }(Regs.TblPatDetailsGrid));
        Regs.TblPatientsPatDetailsGrid = TblPatientsPatDetailsGrid;
    })(Regs = EMR.Regs || (EMR.Regs = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Structure;
    (function (Structure) {
        var BedReportDetailsDialog = /** @class */ (function (_super) {
            __extends(BedReportDetailsDialog, _super);
            function BedReportDetailsDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Structure.BedReportDetailsForm(_this.idPrefix);
                return _this;
            }
            BedReportDetailsDialog.prototype.getFormKey = function () { return Structure.BedReportDetailsForm.formKey; };
            BedReportDetailsDialog.prototype.getIdProperty = function () { return Structure.BedReportDetailsRow.idProperty; };
            BedReportDetailsDialog.prototype.getLocalTextPrefix = function () { return Structure.BedReportDetailsRow.localTextPrefix; };
            BedReportDetailsDialog.prototype.getNameProperty = function () { return Structure.BedReportDetailsRow.nameProperty; };
            BedReportDetailsDialog.prototype.getService = function () { return Structure.BedReportDetailsService.baseUrl; };
            BedReportDetailsDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], BedReportDetailsDialog);
            return BedReportDetailsDialog;
        }(Serenity.EntityDialog));
        Structure.BedReportDetailsDialog = BedReportDetailsDialog;
    })(Structure = EMR.Structure || (EMR.Structure = {}));
})(EMR || (EMR = {}));
/// <reference path="../../Common/Helpers/GridEditorBase.ts" />
var EMR;
(function (EMR) {
    var Structure;
    (function (Structure) {
        var BedReportDetailsEditor = /** @class */ (function (_super) {
            __extends(BedReportDetailsEditor, _super);
            function BedReportDetailsEditor(container) {
                return _super.call(this, container) || this;
            }
            BedReportDetailsEditor.prototype.getColumnsKey = function () { return 'Structure.BedReportDetails'; };
            BedReportDetailsEditor.prototype.getDialogType = function () { return Structure.BedReportDetailsEditorDialog; };
            BedReportDetailsEditor.prototype.getLocalTextPrefix = function () { return Structure.BedReportDetailsRow.localTextPrefix; };
            // Cluster picker
            BedReportDetailsEditor.prototype.getButtons = function () {
                var _this = this;
                var buttons = _super.prototype.getButtons.call(this);
                buttons.push({
                    title: "Select Beds",
                    cssClass: "add-button",
                    onClick: function () {
                        var dlg = new EMR.Configs.TblWardPickerDialog();
                        dlg.onSuccess = function (selected) {
                            // filter already existing products
                            selected = selected.filter(function (x) { return !Q.any(_this.view.getItems(), function (y) { return y.WardId == x.WardId; }); });
                            for (var _i = 0, selected_1 = selected; _i < selected_1.length; _i++) {
                                var sel = selected_1[_i];
                                var item = {
                                    WardId: sel.WardId,
                                };
                                var id = _this.getNextId();
                                item[_this.getIdProperty()] = id;
                                _this.view.addItem(item);
                            }
                            return true;
                        };
                        dlg.dialogOpen();
                    }
                });
                return buttons;
            };
            BedReportDetailsEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], BedReportDetailsEditor);
            return BedReportDetailsEditor;
        }(EMR.Common.GridEditorBase));
        Structure.BedReportDetailsEditor = BedReportDetailsEditor;
    })(Structure = EMR.Structure || (EMR.Structure = {}));
})(EMR || (EMR = {}));
/// <reference path="../../Common/Helpers/GridEditorDialog.ts" />
var EMR;
(function (EMR) {
    var Structure;
    (function (Structure) {
        var BedReportDetailsEditorDialog = /** @class */ (function (_super) {
            __extends(BedReportDetailsEditorDialog, _super);
            function BedReportDetailsEditorDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Structure.BedReportDetailsForm(_this.idPrefix);
                return _this;
            }
            BedReportDetailsEditorDialog.prototype.getFormKey = function () { return Structure.BedReportDetailsForm.formKey; };
            BedReportDetailsEditorDialog.prototype.getLocalTextPrefix = function () { return Structure.BedReportDetailsRow.localTextPrefix; };
            BedReportDetailsEditorDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], BedReportDetailsEditorDialog);
            return BedReportDetailsEditorDialog;
        }(EMR.Common.GridEditorDialog));
        Structure.BedReportDetailsEditorDialog = BedReportDetailsEditorDialog;
    })(Structure = EMR.Structure || (EMR.Structure = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Structure;
    (function (Structure) {
        var BedReportDetailsGrid = /** @class */ (function (_super) {
            __extends(BedReportDetailsGrid, _super);
            function BedReportDetailsGrid(container) {
                return _super.call(this, container) || this;
            }
            BedReportDetailsGrid.prototype.getColumnsKey = function () { return 'Structure.BedReportDetails'; };
            BedReportDetailsGrid.prototype.getDialogType = function () { return Structure.BedReportDetailsDialog; };
            BedReportDetailsGrid.prototype.getIdProperty = function () { return Structure.BedReportDetailsRow.idProperty; };
            BedReportDetailsGrid.prototype.getLocalTextPrefix = function () { return Structure.BedReportDetailsRow.localTextPrefix; };
            BedReportDetailsGrid.prototype.getService = function () { return Structure.BedReportDetailsService.baseUrl; };
            BedReportDetailsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], BedReportDetailsGrid);
            return BedReportDetailsGrid;
        }(Serenity.EntityGrid));
        Structure.BedReportDetailsGrid = BedReportDetailsGrid;
    })(Structure = EMR.Structure || (EMR.Structure = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Structure;
    (function (Structure) {
        var BedReportsDialog = /** @class */ (function (_super) {
            __extends(BedReportsDialog, _super);
            function BedReportsDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Structure.BedReportsForm(_this.idPrefix);
                return _this;
            }
            BedReportsDialog.prototype.getFormKey = function () { return Structure.BedReportsForm.formKey; };
            BedReportsDialog.prototype.getIdProperty = function () { return Structure.BedReportsRow.idProperty; };
            BedReportsDialog.prototype.getLocalTextPrefix = function () { return Structure.BedReportsRow.localTextPrefix; };
            BedReportsDialog.prototype.getNameProperty = function () { return Structure.BedReportsRow.nameProperty; };
            BedReportsDialog.prototype.getService = function () { return Structure.BedReportsService.baseUrl; };
            BedReportsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], BedReportsDialog);
            return BedReportsDialog;
        }(Serenity.EntityDialog));
        Structure.BedReportsDialog = BedReportsDialog;
    })(Structure = EMR.Structure || (EMR.Structure = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Structure;
    (function (Structure) {
        var BedReportsGrid = /** @class */ (function (_super) {
            __extends(BedReportsGrid, _super);
            function BedReportsGrid(container) {
                return _super.call(this, container) || this;
            }
            BedReportsGrid.prototype.getColumnsKey = function () { return 'Structure.BedReports'; };
            BedReportsGrid.prototype.getDialogType = function () { return Structure.BedReportsDialog; };
            BedReportsGrid.prototype.getIdProperty = function () { return Structure.BedReportsRow.idProperty; };
            BedReportsGrid.prototype.getLocalTextPrefix = function () { return Structure.BedReportsRow.localTextPrefix; };
            BedReportsGrid.prototype.getService = function () { return Structure.BedReportsService.baseUrl; };
            BedReportsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], BedReportsGrid);
            return BedReportsGrid;
        }(Serenity.EntityGrid));
        Structure.BedReportsGrid = BedReportsGrid;
    })(Structure = EMR.Structure || (EMR.Structure = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Structure;
    (function (Structure) {
        var TblDutyDialog = /** @class */ (function (_super) {
            __extends(TblDutyDialog, _super);
            function TblDutyDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Structure.TblDutyForm(_this.idPrefix);
                return _this;
            }
            TblDutyDialog.prototype.getFormKey = function () { return Structure.TblDutyForm.formKey; };
            TblDutyDialog.prototype.getIdProperty = function () { return Structure.TblDutyRow.idProperty; };
            TblDutyDialog.prototype.getLocalTextPrefix = function () { return Structure.TblDutyRow.localTextPrefix; };
            TblDutyDialog.prototype.getNameProperty = function () { return Structure.TblDutyRow.nameProperty; };
            TblDutyDialog.prototype.getService = function () { return Structure.TblDutyService.baseUrl; };
            TblDutyDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblDutyDialog);
            return TblDutyDialog;
        }(Serenity.EntityDialog));
        Structure.TblDutyDialog = TblDutyDialog;
    })(Structure = EMR.Structure || (EMR.Structure = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Structure;
    (function (Structure) {
        var TblDutyGrid = /** @class */ (function (_super) {
            __extends(TblDutyGrid, _super);
            function TblDutyGrid(container) {
                return _super.call(this, container) || this;
            }
            TblDutyGrid.prototype.getColumnsKey = function () { return 'Structure.TblDuty'; };
            TblDutyGrid.prototype.getDialogType = function () { return Structure.TblDutyDialog; };
            TblDutyGrid.prototype.getIdProperty = function () { return Structure.TblDutyRow.idProperty; };
            TblDutyGrid.prototype.getLocalTextPrefix = function () { return Structure.TblDutyRow.localTextPrefix; };
            TblDutyGrid.prototype.getService = function () { return Structure.TblDutyService.baseUrl; };
            TblDutyGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TblDutyGrid);
            return TblDutyGrid;
        }(Serenity.EntityGrid));
        Structure.TblDutyGrid = TblDutyGrid;
    })(Structure = EMR.Structure || (EMR.Structure = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Structure;
    (function (Structure) {
        var TblEmpDialog = /** @class */ (function (_super) {
            __extends(TblEmpDialog, _super);
            function TblEmpDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Structure.TblEmpForm(_this.idPrefix);
                return _this;
            }
            TblEmpDialog.prototype.getFormKey = function () { return Structure.TblEmpForm.formKey; };
            TblEmpDialog.prototype.getIdProperty = function () { return Structure.TblEmpRow.idProperty; };
            TblEmpDialog.prototype.getLocalTextPrefix = function () { return Structure.TblEmpRow.localTextPrefix; };
            TblEmpDialog.prototype.getNameProperty = function () { return Structure.TblEmpRow.nameProperty; };
            TblEmpDialog.prototype.getService = function () { return Structure.TblEmpService.baseUrl; };
            TblEmpDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], TblEmpDialog);
            return TblEmpDialog;
        }(Serenity.EntityDialog));
        Structure.TblEmpDialog = TblEmpDialog;
    })(Structure = EMR.Structure || (EMR.Structure = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Structure;
    (function (Structure) {
        var TblEmpGrid = /** @class */ (function (_super) {
            __extends(TblEmpGrid, _super);
            function TblEmpGrid(container) {
                return _super.call(this, container) || this;
            }
            TblEmpGrid.prototype.getColumnsKey = function () { return 'Structure.TblEmp'; };
            TblEmpGrid.prototype.getDialogType = function () { return Structure.TblEmpDialog; };
            TblEmpGrid.prototype.getIdProperty = function () { return Structure.TblEmpRow.idProperty; };
            TblEmpGrid.prototype.getLocalTextPrefix = function () { return Structure.TblEmpRow.localTextPrefix; };
            TblEmpGrid.prototype.getService = function () { return Structure.TblEmpService.baseUrl; };
            TblEmpGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TblEmpGrid);
            return TblEmpGrid;
        }(Serenity.EntityGrid));
        Structure.TblEmpGrid = TblEmpGrid;
    })(Structure = EMR.Structure || (EMR.Structure = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CbloodtransfusionsDialog = /** @class */ (function (_super) {
            __extends(CbloodtransfusionsDialog, _super);
            function CbloodtransfusionsDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Verifications.CbloodtransfusionsForm(_this.idPrefix);
                return _this;
            }
            CbloodtransfusionsDialog.prototype.getFormKey = function () { return Verifications.CbloodtransfusionsForm.formKey; };
            CbloodtransfusionsDialog.prototype.getIdProperty = function () { return Verifications.CbloodtransfusionsRow.idProperty; };
            CbloodtransfusionsDialog.prototype.getLocalTextPrefix = function () { return Verifications.CbloodtransfusionsRow.localTextPrefix; };
            CbloodtransfusionsDialog.prototype.getNameProperty = function () { return Verifications.CbloodtransfusionsRow.nameProperty; };
            CbloodtransfusionsDialog.prototype.getService = function () { return Verifications.CbloodtransfusionsService.baseUrl; };
            CbloodtransfusionsDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                return buttons;
            };
            CbloodtransfusionsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], CbloodtransfusionsDialog);
            return CbloodtransfusionsDialog;
        }(Serenity.EntityDialog));
        Verifications.CbloodtransfusionsDialog = CbloodtransfusionsDialog;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CbloodtransfusionsGrid = /** @class */ (function (_super) {
            __extends(CbloodtransfusionsGrid, _super);
            function CbloodtransfusionsGrid(container) {
                return _super.call(this, container) || this;
            }
            CbloodtransfusionsGrid.prototype.getColumnsKey = function () { return 'Verifications.Cbloodtransfusions'; };
            CbloodtransfusionsGrid.prototype.getDialogType = function () { return Verifications.CbloodtransfusionsDialog; };
            CbloodtransfusionsGrid.prototype.getIdProperty = function () { return Verifications.CbloodtransfusionsRow.idProperty; };
            CbloodtransfusionsGrid.prototype.getLocalTextPrefix = function () { return Verifications.CbloodtransfusionsRow.localTextPrefix; };
            CbloodtransfusionsGrid.prototype.getService = function () { return Verifications.CbloodtransfusionsService.baseUrl; };
            CbloodtransfusionsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "refresh-button"; }), 1);
                return buttons;
            };
            CbloodtransfusionsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CbloodtransfusionsGrid);
            return CbloodtransfusionsGrid;
        }(Serenity.EntityGrid));
        Verifications.CbloodtransfusionsGrid = CbloodtransfusionsGrid;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CdiagnosisDialog = /** @class */ (function (_super) {
            __extends(CdiagnosisDialog, _super);
            function CdiagnosisDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Verifications.CdiagnosisForm(_this.idPrefix);
                return _this;
            }
            CdiagnosisDialog.prototype.getFormKey = function () { return Verifications.CdiagnosisForm.formKey; };
            CdiagnosisDialog.prototype.getIdProperty = function () { return Verifications.CdiagnosisRow.idProperty; };
            CdiagnosisDialog.prototype.getLocalTextPrefix = function () { return Verifications.CdiagnosisRow.localTextPrefix; };
            CdiagnosisDialog.prototype.getNameProperty = function () { return Verifications.CdiagnosisRow.nameProperty; };
            CdiagnosisDialog.prototype.getService = function () { return Verifications.CdiagnosisService.baseUrl; };
            CdiagnosisDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                return buttons;
            };
            CdiagnosisDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], CdiagnosisDialog);
            return CdiagnosisDialog;
        }(Serenity.EntityDialog));
        Verifications.CdiagnosisDialog = CdiagnosisDialog;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CdiagnosisGrid = /** @class */ (function (_super) {
            __extends(CdiagnosisGrid, _super);
            function CdiagnosisGrid(container) {
                return _super.call(this, container) || this;
            }
            CdiagnosisGrid.prototype.getColumnsKey = function () { return 'Verifications.Cdiagnosis'; };
            CdiagnosisGrid.prototype.getDialogType = function () { return Verifications.CdiagnosisDialog; };
            CdiagnosisGrid.prototype.getIdProperty = function () { return Verifications.CdiagnosisRow.idProperty; };
            CdiagnosisGrid.prototype.getLocalTextPrefix = function () { return Verifications.CdiagnosisRow.localTextPrefix; };
            CdiagnosisGrid.prototype.getService = function () { return Verifications.CdiagnosisService.baseUrl; };
            CdiagnosisGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "refresh-button"; }), 1);
                return buttons;
            };
            CdiagnosisGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CdiagnosisGrid);
            return CdiagnosisGrid;
        }(Serenity.EntityGrid));
        Verifications.CdiagnosisGrid = CdiagnosisGrid;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CimagingsDialog = /** @class */ (function (_super) {
            __extends(CimagingsDialog, _super);
            function CimagingsDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Verifications.CimagingsForm(_this.idPrefix);
                return _this;
            }
            CimagingsDialog.prototype.getFormKey = function () { return Verifications.CimagingsForm.formKey; };
            CimagingsDialog.prototype.getIdProperty = function () { return Verifications.CimagingsRow.idProperty; };
            CimagingsDialog.prototype.getLocalTextPrefix = function () { return Verifications.CimagingsRow.localTextPrefix; };
            CimagingsDialog.prototype.getNameProperty = function () { return Verifications.CimagingsRow.nameProperty; };
            CimagingsDialog.prototype.getService = function () { return Verifications.CimagingsService.baseUrl; };
            CimagingsDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                return buttons;
            };
            CimagingsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], CimagingsDialog);
            return CimagingsDialog;
        }(Serenity.EntityDialog));
        Verifications.CimagingsDialog = CimagingsDialog;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CimagingsGrid = /** @class */ (function (_super) {
            __extends(CimagingsGrid, _super);
            function CimagingsGrid(container) {
                return _super.call(this, container) || this;
            }
            CimagingsGrid.prototype.getColumnsKey = function () { return 'Verifications.Cimagings'; };
            CimagingsGrid.prototype.getDialogType = function () { return Verifications.CimagingsDialog; };
            CimagingsGrid.prototype.getIdProperty = function () { return Verifications.CimagingsRow.idProperty; };
            CimagingsGrid.prototype.getLocalTextPrefix = function () { return Verifications.CimagingsRow.localTextPrefix; };
            CimagingsGrid.prototype.getService = function () { return Verifications.CimagingsService.baseUrl; };
            CimagingsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "refresh-button"; }), 1);
                return buttons;
            };
            CimagingsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CimagingsGrid);
            return CimagingsGrid;
        }(Serenity.EntityGrid));
        Verifications.CimagingsGrid = CimagingsGrid;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var ClabtestsDialog = /** @class */ (function (_super) {
            __extends(ClabtestsDialog, _super);
            function ClabtestsDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Verifications.ClabtestsForm(_this.idPrefix);
                return _this;
            }
            ClabtestsDialog.prototype.getFormKey = function () { return Verifications.ClabtestsForm.formKey; };
            ClabtestsDialog.prototype.getIdProperty = function () { return Verifications.ClabtestsRow.idProperty; };
            ClabtestsDialog.prototype.getLocalTextPrefix = function () { return Verifications.ClabtestsRow.localTextPrefix; };
            ClabtestsDialog.prototype.getNameProperty = function () { return Verifications.ClabtestsRow.nameProperty; };
            ClabtestsDialog.prototype.getService = function () { return Verifications.ClabtestsService.baseUrl; };
            ClabtestsDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }), 1);
                // We could also remove delete button here, but for demonstration 
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                return buttons;
            };
            ClabtestsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], ClabtestsDialog);
            return ClabtestsDialog;
        }(Serenity.EntityDialog));
        Verifications.ClabtestsDialog = ClabtestsDialog;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var ClabtestsGrid = /** @class */ (function (_super) {
            __extends(ClabtestsGrid, _super);
            function ClabtestsGrid(container) {
                return _super.call(this, container) || this;
            }
            ClabtestsGrid.prototype.getColumnsKey = function () { return 'Verifications.Clabtests'; };
            ClabtestsGrid.prototype.getDialogType = function () { return Verifications.ClabtestsDialog; };
            ClabtestsGrid.prototype.getIdProperty = function () { return Verifications.ClabtestsRow.idProperty; };
            ClabtestsGrid.prototype.getLocalTextPrefix = function () { return Verifications.ClabtestsRow.localTextPrefix; };
            ClabtestsGrid.prototype.getService = function () { return Verifications.ClabtestsService.baseUrl; };
            ClabtestsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "refresh-button"; }), 1);
                return buttons;
            };
            ClabtestsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ClabtestsGrid);
            return ClabtestsGrid;
        }(Serenity.EntityGrid));
        Verifications.ClabtestsGrid = ClabtestsGrid;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CmedadministrationDialog = /** @class */ (function (_super) {
            __extends(CmedadministrationDialog, _super);
            function CmedadministrationDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Verifications.CmedadministrationForm(_this.idPrefix);
                return _this;
            }
            CmedadministrationDialog.prototype.getFormKey = function () { return Verifications.CmedadministrationForm.formKey; };
            CmedadministrationDialog.prototype.getIdProperty = function () { return Verifications.CmedadministrationRow.idProperty; };
            CmedadministrationDialog.prototype.getLocalTextPrefix = function () { return Verifications.CmedadministrationRow.localTextPrefix; };
            CmedadministrationDialog.prototype.getNameProperty = function () { return Verifications.CmedadministrationRow.nameProperty; };
            CmedadministrationDialog.prototype.getService = function () { return Verifications.CmedadministrationService.baseUrl; };
            CmedadministrationDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                return buttons;
            };
            CmedadministrationDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], CmedadministrationDialog);
            return CmedadministrationDialog;
        }(Serenity.EntityDialog));
        Verifications.CmedadministrationDialog = CmedadministrationDialog;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CmedadministrationGrid = /** @class */ (function (_super) {
            __extends(CmedadministrationGrid, _super);
            function CmedadministrationGrid(container) {
                return _super.call(this, container) || this;
            }
            CmedadministrationGrid.prototype.getColumnsKey = function () { return 'Verifications.Cmedadministration'; };
            CmedadministrationGrid.prototype.getDialogType = function () { return Verifications.CmedadministrationDialog; };
            CmedadministrationGrid.prototype.getIdProperty = function () { return Verifications.CmedadministrationRow.idProperty; };
            CmedadministrationGrid.prototype.getLocalTextPrefix = function () { return Verifications.CmedadministrationRow.localTextPrefix; };
            CmedadministrationGrid.prototype.getService = function () { return Verifications.CmedadministrationService.baseUrl; };
            CmedadministrationGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "refresh-button"; }), 1);
                return buttons;
            };
            CmedadministrationGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CmedadministrationGrid);
            return CmedadministrationGrid;
        }(Serenity.EntityGrid));
        Verifications.CmedadministrationGrid = CmedadministrationGrid;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
/// <reference path="../cmedadministration/cmedadministrationdialog.ts" />
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CcmedadministrationTabDialog = /** @class */ (function (_super) {
            __extends(CcmedadministrationTabDialog, _super);
            function CcmedadministrationTabDialog() {
                return _super.call(this) || this;
            }
            CcmedadministrationTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.OrderId, true);
            };
            CcmedadministrationTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], CcmedadministrationTabDialog);
            return CcmedadministrationTabDialog;
        }(Verifications.CmedadministrationDialog));
        Verifications.CcmedadministrationTabDialog = CcmedadministrationTabDialog;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
/// <reference path="../cmedadministration/cmedadministrationgrid.ts" />
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CcmedadministrationTabGrid = /** @class */ (function (_super) {
            __extends(CcmedadministrationTabGrid, _super);
            function CcmedadministrationTabGrid(container) {
                return _super.call(this, container) || this;
            }
            CcmedadministrationTabGrid.prototype.getDialogType = function () { return Verifications.CmedadministrationTabDialog; };
            CcmedadministrationTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            CcmedadministrationTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            CcmedadministrationTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            CcmedadministrationTabGrid.prototype.addButtonClick = function () {
                this.editItem({ OrderId: this.OrderId });
            };
            CcmedadministrationTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            CcmedadministrationTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.OrderId;
            };
            Object.defineProperty(CcmedadministrationTabGrid.prototype, "OrderId", {
                get: function () {
                    return this._OrderId;
                },
                set: function (value) {
                    if (this._OrderId !== value) {
                        this._OrderId = value;
                        this.setEquality('OrderId', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            CcmedadministrationTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CcmedadministrationTabGrid);
            return CcmedadministrationTabGrid;
        }(Verifications.CmedadministrationGrid));
        Verifications.CcmedadministrationTabGrid = CcmedadministrationTabGrid;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CmedprescriptionsDialog = /** @class */ (function (_super) {
            __extends(CmedprescriptionsDialog, _super);
            function CmedprescriptionsDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Verifications.CmedprescriptionsForm(_this.idPrefix);
                _this.cmedadministrationTabGrid = new Verifications.CcmedadministrationTabGrid(_this.byId('CmedadministrationGrid'));
                _this.cmedadministrationTabGrid.openDialogsAsPanel = true;
                EMR.DialogUtils.pendingChangesConfirmation(_this.element, function () { return _this.getSaveState() != _this.loadedState; });
                return _this;
            }
            CmedprescriptionsDialog.prototype.getFormKey = function () { return Verifications.CmedprescriptionsForm.formKey; };
            CmedprescriptionsDialog.prototype.getIdProperty = function () { return Verifications.CmedprescriptionsRow.idProperty; };
            CmedprescriptionsDialog.prototype.getLocalTextPrefix = function () { return Verifications.CmedprescriptionsRow.localTextPrefix; };
            CmedprescriptionsDialog.prototype.getNameProperty = function () { return Verifications.CmedprescriptionsRow.nameProperty; };
            CmedprescriptionsDialog.prototype.getService = function () { return Verifications.CmedprescriptionsService.baseUrl; };
            CmedprescriptionsDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                return buttons;
            };
            CmedprescriptionsDialog.prototype.getSaveState = function () {
                try {
                    return $.toJSON(this.getSaveEntity());
                }
                catch (e) {
                    return null;
                }
            };
            CmedprescriptionsDialog.prototype.loadResponse = function (data) {
                _super.prototype.loadResponse.call(this, data);
                this.loadedState = this.getSaveState();
            };
            CmedprescriptionsDialog.prototype.loadEntity = function (entity) {
                _super.prototype.loadEntity.call(this, entity);
                Serenity.TabsExtensions.setDisabled(this.tabs, 'Cmedadministration', this.isNewOrDeleted());
                this.cmedadministrationTabGrid.OrderId = entity.OrderId == null ? null : entity.OrderId;
            };
            CmedprescriptionsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], CmedprescriptionsDialog);
            return CmedprescriptionsDialog;
        }(Serenity.EntityDialog));
        Verifications.CmedprescriptionsDialog = CmedprescriptionsDialog;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CmedprescriptionsGrid = /** @class */ (function (_super) {
            __extends(CmedprescriptionsGrid, _super);
            function CmedprescriptionsGrid(container) {
                return _super.call(this, container) || this;
            }
            CmedprescriptionsGrid.prototype.getColumnsKey = function () { return 'Verifications.Cmedprescriptions'; };
            CmedprescriptionsGrid.prototype.getDialogType = function () { return Verifications.CmedprescriptionsDialog; };
            CmedprescriptionsGrid.prototype.getIdProperty = function () { return Verifications.CmedprescriptionsRow.idProperty; };
            CmedprescriptionsGrid.prototype.getLocalTextPrefix = function () { return Verifications.CmedprescriptionsRow.localTextPrefix; };
            CmedprescriptionsGrid.prototype.getService = function () { return Verifications.CmedprescriptionsService.baseUrl; };
            CmedprescriptionsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "refresh-button"; }), 1);
                return buttons;
            };
            CmedprescriptionsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CmedprescriptionsGrid);
            return CmedprescriptionsGrid;
        }(Serenity.EntityGrid));
        Verifications.CmedprescriptionsGrid = CmedprescriptionsGrid;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CpatienthistoryDialog = /** @class */ (function (_super) {
            __extends(CpatienthistoryDialog, _super);
            function CpatienthistoryDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Verifications.CpatienthistoryForm(_this.idPrefix);
                return _this;
            }
            CpatienthistoryDialog.prototype.getFormKey = function () { return Verifications.CpatienthistoryForm.formKey; };
            CpatienthistoryDialog.prototype.getIdProperty = function () { return Verifications.CpatienthistoryRow.idProperty; };
            CpatienthistoryDialog.prototype.getLocalTextPrefix = function () { return Verifications.CpatienthistoryRow.localTextPrefix; };
            CpatienthistoryDialog.prototype.getNameProperty = function () { return Verifications.CpatienthistoryRow.nameProperty; };
            CpatienthistoryDialog.prototype.getService = function () { return Verifications.CpatienthistoryService.baseUrl; };
            CpatienthistoryDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                return buttons;
            };
            CpatienthistoryDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], CpatienthistoryDialog);
            return CpatienthistoryDialog;
        }(Serenity.EntityDialog));
        Verifications.CpatienthistoryDialog = CpatienthistoryDialog;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CpatienthistoryGrid = /** @class */ (function (_super) {
            __extends(CpatienthistoryGrid, _super);
            function CpatienthistoryGrid(container) {
                return _super.call(this, container) || this;
            }
            CpatienthistoryGrid.prototype.getColumnsKey = function () { return 'Verifications.Cpatienthistory'; };
            CpatienthistoryGrid.prototype.getDialogType = function () { return Verifications.CpatienthistoryDialog; };
            CpatienthistoryGrid.prototype.getIdProperty = function () { return Verifications.CpatienthistoryRow.idProperty; };
            CpatienthistoryGrid.prototype.getLocalTextPrefix = function () { return Verifications.CpatienthistoryRow.localTextPrefix; };
            CpatienthistoryGrid.prototype.getService = function () { return Verifications.CpatienthistoryService.baseUrl; };
            CpatienthistoryGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "refresh-button"; }), 1);
                return buttons;
            };
            CpatienthistoryGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CpatienthistoryGrid);
            return CpatienthistoryGrid;
        }(Serenity.EntityGrid));
        Verifications.CpatienthistoryGrid = CpatienthistoryGrid;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
/// <reference path="../cbloodtransfusions/cbloodtransfusionsdialog.ts" />
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CbloodtransfusionsTabDialog = /** @class */ (function (_super) {
            __extends(CbloodtransfusionsTabDialog, _super);
            function CbloodtransfusionsTabDialog() {
                return _super.call(this) || this;
            }
            CbloodtransfusionsTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.Mrid, true);
            };
            CbloodtransfusionsTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], CbloodtransfusionsTabDialog);
            return CbloodtransfusionsTabDialog;
        }(Verifications.CbloodtransfusionsDialog));
        Verifications.CbloodtransfusionsTabDialog = CbloodtransfusionsTabDialog;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
/// <reference path="../cbloodtransfusions/cbloodtransfusionsdialog.ts" />
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CbloodtransfusionsTabGrid = /** @class */ (function (_super) {
            __extends(CbloodtransfusionsTabGrid, _super);
            function CbloodtransfusionsTabGrid(container) {
                return _super.call(this, container) || this;
            }
            CbloodtransfusionsTabGrid.prototype.getDialogType = function () { return Verifications.CbloodtransfusionsTabDialog; };
            CbloodtransfusionsTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            CbloodtransfusionsTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            CbloodtransfusionsTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            CbloodtransfusionsTabGrid.prototype.addButtonClick = function () {
                this.editItem({ MrId: this.MrId });
            };
            CbloodtransfusionsTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            CbloodtransfusionsTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.MrId;
            };
            Object.defineProperty(CbloodtransfusionsTabGrid.prototype, "MrId", {
                get: function () {
                    return this._MrId;
                },
                set: function (value) {
                    if (this._MrId !== value) {
                        this._MrId = value;
                        this.setEquality('Mrid', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            CbloodtransfusionsTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CbloodtransfusionsTabGrid);
            return CbloodtransfusionsTabGrid;
        }(Verifications.CbloodtransfusionsGrid));
        Verifications.CbloodtransfusionsTabGrid = CbloodtransfusionsTabGrid;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
/// <reference path="../cdiagnosis/cdiagnosisdialog.ts" />
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CdiagnosisTabDialog = /** @class */ (function (_super) {
            __extends(CdiagnosisTabDialog, _super);
            function CdiagnosisTabDialog() {
                return _super.call(this) || this;
            }
            CdiagnosisTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.Mrid, true);
            };
            CdiagnosisTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], CdiagnosisTabDialog);
            return CdiagnosisTabDialog;
        }(Verifications.CdiagnosisDialog));
        Verifications.CdiagnosisTabDialog = CdiagnosisTabDialog;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
/// <reference path="../cdiagnosis/cdiagnosisgrid.ts" />
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CdiagnosisTabGrid = /** @class */ (function (_super) {
            __extends(CdiagnosisTabGrid, _super);
            function CdiagnosisTabGrid(container) {
                return _super.call(this, container) || this;
            }
            CdiagnosisTabGrid.prototype.getDialogType = function () { return Verifications.CdiagnosisTabDialog; };
            CdiagnosisTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            CdiagnosisTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            CdiagnosisTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            CdiagnosisTabGrid.prototype.addButtonClick = function () {
                this.editItem({ MrId: this.MrId });
            };
            CdiagnosisTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            CdiagnosisTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.MrId;
            };
            Object.defineProperty(CdiagnosisTabGrid.prototype, "MrId", {
                get: function () {
                    return this._MrId;
                },
                set: function (value) {
                    if (this._MrId !== value) {
                        this._MrId = value;
                        this.setEquality('Mrid', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            CdiagnosisTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CdiagnosisTabGrid);
            return CdiagnosisTabGrid;
        }(Verifications.CdiagnosisGrid));
        Verifications.CdiagnosisTabGrid = CdiagnosisTabGrid;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
/// <reference path="../cimagings/cimagingsdialog.ts" />
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CimagingsTabDialog = /** @class */ (function (_super) {
            __extends(CimagingsTabDialog, _super);
            function CimagingsTabDialog() {
                return _super.call(this) || this;
            }
            CimagingsTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.Mrid, true);
            };
            CimagingsTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], CimagingsTabDialog);
            return CimagingsTabDialog;
        }(Verifications.CimagingsDialog));
        Verifications.CimagingsTabDialog = CimagingsTabDialog;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
/// <reference path="../cimagings/cimagingsgrid.ts" />
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CimagingsTabGrid = /** @class */ (function (_super) {
            __extends(CimagingsTabGrid, _super);
            function CimagingsTabGrid(container) {
                return _super.call(this, container) || this;
            }
            CimagingsTabGrid.prototype.getDialogType = function () { return Verifications.CimagingsTabDialog; };
            CimagingsTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            CimagingsTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            CimagingsTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            CimagingsTabGrid.prototype.addButtonClick = function () {
                this.editItem({ MrId: this.MrId });
            };
            CimagingsTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            CimagingsTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.MrId;
            };
            Object.defineProperty(CimagingsTabGrid.prototype, "MrId", {
                get: function () {
                    return this._MrId;
                },
                set: function (value) {
                    if (this._MrId !== value) {
                        this._MrId = value;
                        this.setEquality('Mrid', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            CimagingsTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CimagingsTabGrid);
            return CimagingsTabGrid;
        }(Verifications.CimagingsGrid));
        Verifications.CimagingsTabGrid = CimagingsTabGrid;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
/// <reference path="../clabtests/clabtestsdialog.ts" />
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var ClabtestsTabDialog = /** @class */ (function (_super) {
            __extends(ClabtestsTabDialog, _super);
            function ClabtestsTabDialog() {
                return _super.call(this) || this;
            }
            ClabtestsTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.Mrid, true);
            };
            ClabtestsTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], ClabtestsTabDialog);
            return ClabtestsTabDialog;
        }(Verifications.ClabtestsDialog));
        Verifications.ClabtestsTabDialog = ClabtestsTabDialog;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
/// <reference path="../../opd/labtest/labtestgrid.ts" />
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var ClabtestsTabGrid = /** @class */ (function (_super) {
            __extends(ClabtestsTabGrid, _super);
            function ClabtestsTabGrid(container) {
                return _super.call(this, container) || this;
            }
            ClabtestsTabGrid.prototype.getDialogType = function () { return Verifications.ClabtestsTabDialog; };
            ClabtestsTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            ClabtestsTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            ClabtestsTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            ClabtestsTabGrid.prototype.addButtonClick = function () {
                this.editItem({ MrId: this.MrId });
            };
            ClabtestsTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            ClabtestsTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.MrId;
            };
            Object.defineProperty(ClabtestsTabGrid.prototype, "MrId", {
                get: function () {
                    return this._MrId;
                },
                set: function (value) {
                    if (this._MrId !== value) {
                        this._MrId = value;
                        this.setEquality('Mrid', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            ClabtestsTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ClabtestsTabGrid);
            return ClabtestsTabGrid;
        }(Verifications.ClabtestsGrid));
        Verifications.ClabtestsTabGrid = ClabtestsTabGrid;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
/// <reference path="../cmedadministration/cmedadministrationgrid.ts" />
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CmedadministrationTabDialog = /** @class */ (function (_super) {
            __extends(CmedadministrationTabDialog, _super);
            function CmedadministrationTabDialog() {
                return _super.call(this) || this;
            }
            CmedadministrationTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.OrderId, true);
            };
            CmedadministrationTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], CmedadministrationTabDialog);
            return CmedadministrationTabDialog;
        }(Verifications.CmedadministrationDialog));
        Verifications.CmedadministrationTabDialog = CmedadministrationTabDialog;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
/// <reference path="../cmedadministration/cmedadministrationgrid.ts" />
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CmedadministrationTabGrid = /** @class */ (function (_super) {
            __extends(CmedadministrationTabGrid, _super);
            function CmedadministrationTabGrid(container) {
                return _super.call(this, container) || this;
            }
            CmedadministrationTabGrid.prototype.getDialogType = function () { return Verifications.CmedadministrationTabDialog; };
            CmedadministrationTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            CmedadministrationTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            CmedadministrationTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            CmedadministrationTabGrid.prototype.addButtonClick = function () {
                this.editItem({ MrId: this.MrId });
            };
            CmedadministrationTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            CmedadministrationTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.MrId;
            };
            Object.defineProperty(CmedadministrationTabGrid.prototype, "MrId", {
                get: function () {
                    return this._MrId;
                },
                set: function (value) {
                    if (this._MrId !== value) {
                        this._MrId = value;
                        this.setEquality('Mrid', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            CmedadministrationTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CmedadministrationTabGrid);
            return CmedadministrationTabGrid;
        }(Verifications.CmedadministrationGrid));
        Verifications.CmedadministrationTabGrid = CmedadministrationTabGrid;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
/// <reference path="../cmedprescriptions/cmedprescriptionsdialog.ts" />
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CmedprescriptionsTabDialog = /** @class */ (function (_super) {
            __extends(CmedprescriptionsTabDialog, _super);
            function CmedprescriptionsTabDialog() {
                return _super.call(this) || this;
            }
            CmedprescriptionsTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.Mrid, true);
            };
            CmedprescriptionsTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], CmedprescriptionsTabDialog);
            return CmedprescriptionsTabDialog;
        }(Verifications.CmedprescriptionsDialog));
        Verifications.CmedprescriptionsTabDialog = CmedprescriptionsTabDialog;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
/// <reference path="../cmedprescriptions/cmedprescriptionsgrid.ts" />
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CmedprescriptionsTabGrid = /** @class */ (function (_super) {
            __extends(CmedprescriptionsTabGrid, _super);
            function CmedprescriptionsTabGrid(container) {
                return _super.call(this, container) || this;
            }
            CmedprescriptionsTabGrid.prototype.getDialogType = function () { return Verifications.CmedprescriptionsTabDialog; };
            CmedprescriptionsTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            CmedprescriptionsTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            CmedprescriptionsTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            CmedprescriptionsTabGrid.prototype.addButtonClick = function () {
                this.editItem({ MrId: this.MrId });
            };
            CmedprescriptionsTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            CmedprescriptionsTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.MrId;
            };
            Object.defineProperty(CmedprescriptionsTabGrid.prototype, "MrId", {
                get: function () {
                    return this._MrId;
                },
                set: function (value) {
                    if (this._MrId !== value) {
                        this._MrId = value;
                        this.setEquality('Mrid', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            CmedprescriptionsTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CmedprescriptionsTabGrid);
            return CmedprescriptionsTabGrid;
        }(Verifications.CmedprescriptionsGrid));
        Verifications.CmedprescriptionsTabGrid = CmedprescriptionsTabGrid;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
/// <reference path="../cpatienthistory/cpatienthistorydialog.ts" />
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CpatienthistoryTabDialog = /** @class */ (function (_super) {
            __extends(CpatienthistoryTabDialog, _super);
            function CpatienthistoryTabDialog() {
                return _super.call(this) || this;
            }
            CpatienthistoryTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.Mrid, true);
            };
            CpatienthistoryTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], CpatienthistoryTabDialog);
            return CpatienthistoryTabDialog;
        }(Verifications.CpatienthistoryDialog));
        Verifications.CpatienthistoryTabDialog = CpatienthistoryTabDialog;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
/// <reference path="../cpatienthistory/cpatienthistorygrid.ts" />
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CpatienthistoryTabGrid = /** @class */ (function (_super) {
            __extends(CpatienthistoryTabGrid, _super);
            function CpatienthistoryTabGrid(container) {
                return _super.call(this, container) || this;
            }
            CpatienthistoryTabGrid.prototype.getDialogType = function () { return Verifications.CpatienthistoryTabDialog; };
            CpatienthistoryTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            CpatienthistoryTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            CpatienthistoryTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            CpatienthistoryTabGrid.prototype.addButtonClick = function () {
                this.editItem({ MrId: this.MrId });
            };
            CpatienthistoryTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            CpatienthistoryTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.MrId;
            };
            Object.defineProperty(CpatienthistoryTabGrid.prototype, "MrId", {
                get: function () {
                    return this._MrId;
                },
                set: function (value) {
                    if (this._MrId !== value) {
                        this._MrId = value;
                        this.setEquality('Mrid', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            CpatienthistoryTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CpatienthistoryTabGrid);
            return CpatienthistoryTabGrid;
        }(Verifications.CpatienthistoryGrid));
        Verifications.CpatienthistoryTabGrid = CpatienthistoryTabGrid;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CpatientsDialog = /** @class */ (function (_super) {
            __extends(CpatientsDialog, _super);
            function CpatientsDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Verifications.CpatientsForm(_this.idPrefix);
                _this.cvisitsTabGrid = new Verifications.CvisitsTabGrid(_this.byId('CvisitsGrid'));
                _this.cvisitsTabGrid.openDialogsAsPanel = true;
                _this.cvitalsignsGrid = new Verifications.CvitalsignsTabGrid(_this.byId('CvitalsignsGrid'));
                _this.cvitalsignsGrid.openDialogsAsPanel = true;
                _this.cpatienthistoryGrid = new Verifications.CpatienthistoryTabGrid(_this.byId('CpatienthistoryGrid'));
                _this.cpatienthistoryGrid.openDialogsAsPanel = true;
                _this.cphysicalexaminationGrid = new Verifications.CphysicalexaminationTabGrid(_this.byId('CphysicalexaminationGrid'));
                _this.cphysicalexaminationGrid.openDialogsAsPanel = true;
                _this.clabtestsGrid = new Verifications.ClabtestsTabGrid(_this.byId('ClabtestsGrid'));
                _this.clabtestsGrid.openDialogsAsPanel = true;
                _this.cimagingsGrid = new Verifications.CimagingsTabGrid(_this.byId('CimagingsGrid'));
                _this.cimagingsGrid.openDialogsAsPanel = true;
                _this.cdiagnosisGrid = new Verifications.CdiagnosisTabGrid(_this.byId('CdiagnosisGrid'));
                _this.cdiagnosisGrid.openDialogsAsPanel = true;
                _this.cmedprescriptionsGrid = new Verifications.CmedprescriptionsTabGrid(_this.byId('CmedprescriptionsGrid'));
                _this.cmedprescriptionsGrid.openDialogsAsPanel = true;
                _this.crecommendationsGrid = new Verifications.CrecommendationsTabGrid(_this.byId('CrecommendationsGrid'));
                _this.crecommendationsGrid.openDialogsAsPanel = true;
                _this.cbloodtransfusionsGrid = new Verifications.CbloodtransfusionsTabGrid(_this.byId('CbloodtransfusionsGrid'));
                _this.cbloodtransfusionsGrid.openDialogsAsPanel = true;
                //this.cmedadministrationGrid = new CmedadministrationTabGrid(this.byId('CmedadministrationGrid'));
                //this.cmedadministrationGrid.openDialogsAsPanel = true;
                EMR.DialogUtils.pendingChangesConfirmation(_this.element, function () { return _this.getSaveState() != _this.loadedState; });
                return _this;
            }
            CpatientsDialog.prototype.getFormKey = function () { return Verifications.CpatientsForm.formKey; };
            CpatientsDialog.prototype.getIdProperty = function () { return Verifications.CpatientsRow.idProperty; };
            CpatientsDialog.prototype.getLocalTextPrefix = function () { return Verifications.CpatientsRow.localTextPrefix; };
            CpatientsDialog.prototype.getNameProperty = function () { return Verifications.CpatientsRow.nameProperty; };
            CpatientsDialog.prototype.getService = function () { return Verifications.CpatientsService.baseUrl; };
            CpatientsDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }), 1);
                // We could also remove delete button here, but for demonstration 
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                return buttons;
            };
            CpatientsDialog.prototype.getSaveState = function () {
                try {
                    return $.toJSON(this.getSaveEntity());
                }
                catch (e) {
                    return null;
                }
            };
            CpatientsDialog.prototype.loadResponse = function (data) {
                _super.prototype.loadResponse.call(this, data);
                this.loadedState = this.getSaveState();
            };
            CpatientsDialog.prototype.loadEntity = function (entity) {
                _super.prototype.loadEntity.call(this, entity);
                Serenity.TabsExtensions.setDisabled(this.tabs, 'Cvisits', this.isNewOrDeleted());
                Serenity.TabsExtensions.setDisabled(this.tabs, 'Cvitalsigns', this.isNewOrDeleted());
                Serenity.TabsExtensions.setDisabled(this.tabs, 'Cpatienthistory', this.isNewOrDeleted());
                Serenity.TabsExtensions.setDisabled(this.tabs, 'Cphysicalexamination', this.isNewOrDeleted());
                Serenity.TabsExtensions.setDisabled(this.tabs, 'Clabtests', this.isNewOrDeleted());
                Serenity.TabsExtensions.setDisabled(this.tabs, 'Cimagings', this.isNewOrDeleted());
                Serenity.TabsExtensions.setDisabled(this.tabs, 'Cdiagnosis', this.isNewOrDeleted());
                Serenity.TabsExtensions.setDisabled(this.tabs, 'Cmedprescriptions', this.isNewOrDeleted());
                Serenity.TabsExtensions.setDisabled(this.tabs, 'Crecommendations', this.isNewOrDeleted());
                Serenity.TabsExtensions.setDisabled(this.tabs, 'Cbloodtransfusions', this.isNewOrDeleted());
                //Serenity.TabsExtensions.setDisabled(this.tabs, 'Cmedadministration', this.isNewOrDeleted());
                this.cvisitsTabGrid.MrId = entity.Mrid;
                this.cvitalsignsGrid.MrId = entity.Mrid;
                this.cpatienthistoryGrid.MrId = entity.Mrid;
                this.cphysicalexaminationGrid.MrId = entity.Mrid;
                this.clabtestsGrid.MrId = entity.Mrid;
                this.cimagingsGrid.MrId = entity.Mrid;
                this.cdiagnosisGrid.MrId = entity.Mrid;
                this.cmedprescriptionsGrid.MrId = entity.Mrid;
                this.crecommendationsGrid.MrId = entity.Mrid;
                this.cbloodtransfusionsGrid.MrId = entity.Mrid;
                //this.cmedadministrationGrid.MrId = entity.Mrid;
            };
            CpatientsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], CpatientsDialog);
            return CpatientsDialog;
        }(Serenity.EntityDialog));
        Verifications.CpatientsDialog = CpatientsDialog;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CpatientsGrid = /** @class */ (function (_super) {
            __extends(CpatientsGrid, _super);
            function CpatientsGrid(container) {
                return _super.call(this, container) || this;
            }
            CpatientsGrid.prototype.getColumnsKey = function () { return 'Verifications.Cpatients'; };
            CpatientsGrid.prototype.getDialogType = function () { return Verifications.CpatientsDialog; };
            CpatientsGrid.prototype.getIdProperty = function () { return Verifications.CpatientsRow.idProperty; };
            CpatientsGrid.prototype.getLocalTextPrefix = function () { return Verifications.CpatientsRow.localTextPrefix; };
            CpatientsGrid.prototype.getService = function () { return Verifications.CpatientsService.baseUrl; };
            CpatientsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "refresh-button"; }), 1);
                return buttons;
            };
            CpatientsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CpatientsGrid);
            return CpatientsGrid;
        }(Serenity.EntityGrid));
        Verifications.CpatientsGrid = CpatientsGrid;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CphysicalexaminationDialog = /** @class */ (function (_super) {
            __extends(CphysicalexaminationDialog, _super);
            function CphysicalexaminationDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Verifications.CphysicalexaminationForm(_this.idPrefix);
                return _this;
            }
            CphysicalexaminationDialog.prototype.getFormKey = function () { return Verifications.CphysicalexaminationForm.formKey; };
            CphysicalexaminationDialog.prototype.getIdProperty = function () { return Verifications.CphysicalexaminationRow.idProperty; };
            CphysicalexaminationDialog.prototype.getLocalTextPrefix = function () { return Verifications.CphysicalexaminationRow.localTextPrefix; };
            CphysicalexaminationDialog.prototype.getNameProperty = function () { return Verifications.CphysicalexaminationRow.nameProperty; };
            CphysicalexaminationDialog.prototype.getService = function () { return Verifications.CphysicalexaminationService.baseUrl; };
            CphysicalexaminationDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }), 1);
                // We could also remove delete button here, but for demonstration 
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                return buttons;
            };
            CphysicalexaminationDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], CphysicalexaminationDialog);
            return CphysicalexaminationDialog;
        }(Serenity.EntityDialog));
        Verifications.CphysicalexaminationDialog = CphysicalexaminationDialog;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
/// <reference path="../cphysicalexamination/cphysicalexaminationdialog.ts" />
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CphysicalexaminationTabDialog = /** @class */ (function (_super) {
            __extends(CphysicalexaminationTabDialog, _super);
            function CphysicalexaminationTabDialog() {
                return _super.call(this) || this;
            }
            CphysicalexaminationTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.Mrid, true);
            };
            CphysicalexaminationTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], CphysicalexaminationTabDialog);
            return CphysicalexaminationTabDialog;
        }(Verifications.CphysicalexaminationDialog));
        Verifications.CphysicalexaminationTabDialog = CphysicalexaminationTabDialog;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CphysicalexaminationGrid = /** @class */ (function (_super) {
            __extends(CphysicalexaminationGrid, _super);
            function CphysicalexaminationGrid(container) {
                return _super.call(this, container) || this;
            }
            CphysicalexaminationGrid.prototype.getColumnsKey = function () { return 'Verifications.Cphysicalexamination'; };
            CphysicalexaminationGrid.prototype.getDialogType = function () { return Verifications.CphysicalexaminationDialog; };
            CphysicalexaminationGrid.prototype.getIdProperty = function () { return Verifications.CphysicalexaminationRow.idProperty; };
            CphysicalexaminationGrid.prototype.getLocalTextPrefix = function () { return Verifications.CphysicalexaminationRow.localTextPrefix; };
            CphysicalexaminationGrid.prototype.getService = function () { return Verifications.CphysicalexaminationService.baseUrl; };
            CphysicalexaminationGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "refresh-button"; }), 1);
                return buttons;
            };
            CphysicalexaminationGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CphysicalexaminationGrid);
            return CphysicalexaminationGrid;
        }(Serenity.EntityGrid));
        Verifications.CphysicalexaminationGrid = CphysicalexaminationGrid;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
/// <reference path="../cphysicalexamination/cphysicalexaminationgrid.ts" />
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CphysicalexaminationTabGrid = /** @class */ (function (_super) {
            __extends(CphysicalexaminationTabGrid, _super);
            function CphysicalexaminationTabGrid(container) {
                return _super.call(this, container) || this;
            }
            CphysicalexaminationTabGrid.prototype.getDialogType = function () { return Verifications.CphysicalexaminationTabDialog; };
            CphysicalexaminationTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            CphysicalexaminationTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            CphysicalexaminationTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            CphysicalexaminationTabGrid.prototype.addButtonClick = function () {
                this.editItem({ MrId: this.MrId });
            };
            CphysicalexaminationTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            CphysicalexaminationTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.MrId;
            };
            Object.defineProperty(CphysicalexaminationTabGrid.prototype, "MrId", {
                get: function () {
                    return this._MrId;
                },
                set: function (value) {
                    if (this._MrId !== value) {
                        this._MrId = value;
                        this.setEquality('Mrid', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            CphysicalexaminationTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CphysicalexaminationTabGrid);
            return CphysicalexaminationTabGrid;
        }(Verifications.CphysicalexaminationGrid));
        Verifications.CphysicalexaminationTabGrid = CphysicalexaminationTabGrid;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CrecommendationsDialog = /** @class */ (function (_super) {
            __extends(CrecommendationsDialog, _super);
            function CrecommendationsDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Verifications.CrecommendationsForm(_this.idPrefix);
                return _this;
            }
            CrecommendationsDialog.prototype.getFormKey = function () { return Verifications.CrecommendationsForm.formKey; };
            CrecommendationsDialog.prototype.getIdProperty = function () { return Verifications.CrecommendationsRow.idProperty; };
            CrecommendationsDialog.prototype.getLocalTextPrefix = function () { return Verifications.CrecommendationsRow.localTextPrefix; };
            CrecommendationsDialog.prototype.getNameProperty = function () { return Verifications.CrecommendationsRow.nameProperty; };
            CrecommendationsDialog.prototype.getService = function () { return Verifications.CrecommendationsService.baseUrl; };
            CrecommendationsDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                return buttons;
            };
            CrecommendationsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], CrecommendationsDialog);
            return CrecommendationsDialog;
        }(Serenity.EntityDialog));
        Verifications.CrecommendationsDialog = CrecommendationsDialog;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
/// <reference path="../crecommendations/crecommendationsdialog.ts" />
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CrecommendationsTabDialog = /** @class */ (function (_super) {
            __extends(CrecommendationsTabDialog, _super);
            function CrecommendationsTabDialog() {
                return _super.call(this) || this;
            }
            CrecommendationsTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.Mrid, true);
            };
            CrecommendationsTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], CrecommendationsTabDialog);
            return CrecommendationsTabDialog;
        }(Verifications.CrecommendationsDialog));
        Verifications.CrecommendationsTabDialog = CrecommendationsTabDialog;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CrecommendationsGrid = /** @class */ (function (_super) {
            __extends(CrecommendationsGrid, _super);
            function CrecommendationsGrid(container) {
                return _super.call(this, container) || this;
            }
            CrecommendationsGrid.prototype.getColumnsKey = function () { return 'Verifications.Crecommendations'; };
            CrecommendationsGrid.prototype.getDialogType = function () { return Verifications.CrecommendationsDialog; };
            CrecommendationsGrid.prototype.getIdProperty = function () { return Verifications.CrecommendationsRow.idProperty; };
            CrecommendationsGrid.prototype.getLocalTextPrefix = function () { return Verifications.CrecommendationsRow.localTextPrefix; };
            CrecommendationsGrid.prototype.getService = function () { return Verifications.CrecommendationsService.baseUrl; };
            CrecommendationsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "refresh-button"; }), 1);
                return buttons;
            };
            CrecommendationsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CrecommendationsGrid);
            return CrecommendationsGrid;
        }(Serenity.EntityGrid));
        Verifications.CrecommendationsGrid = CrecommendationsGrid;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
/// <reference path="../crecommendations/crecommendationsgrid.ts" />
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CrecommendationsTabGrid = /** @class */ (function (_super) {
            __extends(CrecommendationsTabGrid, _super);
            function CrecommendationsTabGrid(container) {
                return _super.call(this, container) || this;
            }
            CrecommendationsTabGrid.prototype.getDialogType = function () { return Verifications.CrecommendationsTabDialog; };
            CrecommendationsTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            CrecommendationsTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            CrecommendationsTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            CrecommendationsTabGrid.prototype.addButtonClick = function () {
                this.editItem({ MrId: this.MrId });
            };
            CrecommendationsTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            CrecommendationsTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.MrId;
            };
            Object.defineProperty(CrecommendationsTabGrid.prototype, "MrId", {
                get: function () {
                    return this._MrId;
                },
                set: function (value) {
                    if (this._MrId !== value) {
                        this._MrId = value;
                        this.setEquality('Mrid', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            CrecommendationsTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CrecommendationsTabGrid);
            return CrecommendationsTabGrid;
        }(Verifications.CrecommendationsGrid));
        Verifications.CrecommendationsTabGrid = CrecommendationsTabGrid;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CvisitsDialog = /** @class */ (function (_super) {
            __extends(CvisitsDialog, _super);
            function CvisitsDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Verifications.CvisitsForm(_this.idPrefix);
                return _this;
            }
            CvisitsDialog.prototype.getFormKey = function () { return Verifications.CvisitsForm.formKey; };
            CvisitsDialog.prototype.getIdProperty = function () { return Verifications.CvisitsRow.idProperty; };
            CvisitsDialog.prototype.getLocalTextPrefix = function () { return Verifications.CvisitsRow.localTextPrefix; };
            CvisitsDialog.prototype.getNameProperty = function () { return Verifications.CvisitsRow.nameProperty; };
            CvisitsDialog.prototype.getService = function () { return Verifications.CvisitsService.baseUrl; };
            CvisitsDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }), 1);
                // We could also remove delete button here, but for demonstration 
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                return buttons;
            };
            CvisitsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], CvisitsDialog);
            return CvisitsDialog;
        }(Serenity.EntityDialog));
        Verifications.CvisitsDialog = CvisitsDialog;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
/// <reference path="../cvisits/cvisitsdialog.ts" />
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CvisitsTabDialog = /** @class */ (function (_super) {
            __extends(CvisitsTabDialog, _super);
            function CvisitsTabDialog() {
                return _super.call(this) || this;
            }
            CvisitsTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.Mrid, true);
            };
            CvisitsTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], CvisitsTabDialog);
            return CvisitsTabDialog;
        }(Verifications.CvisitsDialog));
        Verifications.CvisitsTabDialog = CvisitsTabDialog;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CvisitsGrid = /** @class */ (function (_super) {
            __extends(CvisitsGrid, _super);
            function CvisitsGrid(container) {
                return _super.call(this, container) || this;
            }
            CvisitsGrid.prototype.getColumnsKey = function () { return 'Verifications.Cvisits'; };
            CvisitsGrid.prototype.getDialogType = function () { return Verifications.CvisitsDialog; };
            CvisitsGrid.prototype.getIdProperty = function () { return Verifications.CvisitsRow.idProperty; };
            CvisitsGrid.prototype.getLocalTextPrefix = function () { return Verifications.CvisitsRow.localTextPrefix; };
            CvisitsGrid.prototype.getService = function () { return Verifications.CvisitsService.baseUrl; };
            CvisitsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "refresh-button"; }), 1);
                return buttons;
            };
            CvisitsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CvisitsGrid);
            return CvisitsGrid;
        }(Serenity.EntityGrid));
        Verifications.CvisitsGrid = CvisitsGrid;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
/// <reference path="../cvisits/cvisitsgrid.ts" />
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CvisitsTabGrid = /** @class */ (function (_super) {
            __extends(CvisitsTabGrid, _super);
            function CvisitsTabGrid(container) {
                return _super.call(this, container) || this;
            }
            CvisitsTabGrid.prototype.getDialogType = function () { return Verifications.CvisitsTabDialog; };
            CvisitsTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            CvisitsTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            CvisitsTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            CvisitsTabGrid.prototype.addButtonClick = function () {
                this.editItem({ MrId: this.MrId });
            };
            CvisitsTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            CvisitsTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.MrId;
            };
            Object.defineProperty(CvisitsTabGrid.prototype, "MrId", {
                get: function () {
                    return this._MrId;
                },
                set: function (value) {
                    if (this._MrId !== value) {
                        this._MrId = value;
                        this.setEquality('Mrid', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            CvisitsTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CvisitsTabGrid);
            return CvisitsTabGrid;
        }(Verifications.CvisitsGrid));
        Verifications.CvisitsTabGrid = CvisitsTabGrid;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CvitalsignsDialog = /** @class */ (function (_super) {
            __extends(CvitalsignsDialog, _super);
            function CvitalsignsDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Verifications.CvitalsignsForm(_this.idPrefix);
                return _this;
            }
            CvitalsignsDialog.prototype.getFormKey = function () { return Verifications.CvitalsignsForm.formKey; };
            CvitalsignsDialog.prototype.getIdProperty = function () { return Verifications.CvitalsignsRow.idProperty; };
            CvitalsignsDialog.prototype.getLocalTextPrefix = function () { return Verifications.CvitalsignsRow.localTextPrefix; };
            CvitalsignsDialog.prototype.getNameProperty = function () { return Verifications.CvitalsignsRow.nameProperty; };
            CvitalsignsDialog.prototype.getService = function () { return Verifications.CvitalsignsService.baseUrl; };
            CvitalsignsDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }), 1);
                // We could also remove delete button here, but for demonstration 
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                return buttons;
            };
            CvitalsignsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], CvitalsignsDialog);
            return CvitalsignsDialog;
        }(Serenity.EntityDialog));
        Verifications.CvitalsignsDialog = CvitalsignsDialog;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
/// <reference path="../cvitalsigns/cvitalsignsdialog.ts" />
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CvitalsignsTabDialog = /** @class */ (function (_super) {
            __extends(CvitalsignsTabDialog, _super);
            function CvitalsignsTabDialog() {
                return _super.call(this) || this;
            }
            CvitalsignsTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.Mrid, true);
            };
            CvitalsignsTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], CvitalsignsTabDialog);
            return CvitalsignsTabDialog;
        }(Verifications.CvitalsignsDialog));
        Verifications.CvitalsignsTabDialog = CvitalsignsTabDialog;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CvitalsignsGrid = /** @class */ (function (_super) {
            __extends(CvitalsignsGrid, _super);
            function CvitalsignsGrid(container) {
                return _super.call(this, container) || this;
            }
            CvitalsignsGrid.prototype.getColumnsKey = function () { return 'Verifications.Cvitalsigns'; };
            CvitalsignsGrid.prototype.getDialogType = function () { return Verifications.CvitalsignsDialog; };
            CvitalsignsGrid.prototype.getIdProperty = function () { return Verifications.CvitalsignsRow.idProperty; };
            CvitalsignsGrid.prototype.getLocalTextPrefix = function () { return Verifications.CvitalsignsRow.localTextPrefix; };
            CvitalsignsGrid.prototype.getService = function () { return Verifications.CvitalsignsService.baseUrl; };
            CvitalsignsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "refresh-button"; }), 1);
                return buttons;
            };
            CvitalsignsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CvitalsignsGrid);
            return CvitalsignsGrid;
        }(Serenity.EntityGrid));
        Verifications.CvitalsignsGrid = CvitalsignsGrid;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
/// <reference path="../cvitalsigns/cvitalsignsgrid.ts" />
var EMR;
(function (EMR) {
    var Verifications;
    (function (Verifications) {
        var CvitalsignsTabGrid = /** @class */ (function (_super) {
            __extends(CvitalsignsTabGrid, _super);
            function CvitalsignsTabGrid(container) {
                return _super.call(this, container) || this;
            }
            CvitalsignsTabGrid.prototype.getDialogType = function () { return Verifications.CvitalsignsTabDialog; };
            CvitalsignsTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            CvitalsignsTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            CvitalsignsTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            CvitalsignsTabGrid.prototype.addButtonClick = function () {
                this.editItem({ MrId: this.MrId });
            };
            CvitalsignsTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            CvitalsignsTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.MrId;
            };
            Object.defineProperty(CvitalsignsTabGrid.prototype, "MrId", {
                get: function () {
                    return this._MrId;
                },
                set: function (value) {
                    if (this._MrId !== value) {
                        this._MrId = value;
                        this.setEquality('Mrid', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            CvitalsignsTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CvitalsignsTabGrid);
            return CvitalsignsTabGrid;
        }(Verifications.CvitalsignsGrid));
        Verifications.CvitalsignsTabGrid = CvitalsignsTabGrid;
    })(Verifications = EMR.Verifications || (EMR.Verifications = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var VitalSigns;
    (function (VitalSigns) {
        var CyclevisitsDialog = /** @class */ (function (_super) {
            __extends(CyclevisitsDialog, _super);
            function CyclevisitsDialog() {
                var _this = _super.call(this) || this;
                _this.form = new VitalSigns.CyclevisitsForm(_this.idPrefix);
                _this.form.ActualDate.change(function (e) {
                    _this.form.SActualDate.value = convertToShamsi(_this.form.ActualDate.valueAsDate);
                });
                _this.form.SActualDate.change(function (e) {
                    _this.form.ActualDate.valueAsDate = convertToGregorian(_this.form.SActualDate.value.toString());
                });
                return _this;
            }
            CyclevisitsDialog.prototype.getFormKey = function () { return VitalSigns.CyclevisitsForm.formKey; };
            CyclevisitsDialog.prototype.getIdProperty = function () { return VitalSigns.CyclevisitsRow.idProperty; };
            CyclevisitsDialog.prototype.getLocalTextPrefix = function () { return VitalSigns.CyclevisitsRow.localTextPrefix; };
            CyclevisitsDialog.prototype.getNameProperty = function () { return VitalSigns.CyclevisitsRow.nameProperty; };
            CyclevisitsDialog.prototype.getService = function () { return VitalSigns.CyclevisitsService.baseUrl; };
            CyclevisitsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], CyclevisitsDialog);
            return CyclevisitsDialog;
        }(Serenity.EntityDialog));
        VitalSigns.CyclevisitsDialog = CyclevisitsDialog;
    })(VitalSigns = EMR.VitalSigns || (EMR.VitalSigns = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var VitalSigns;
    (function (VitalSigns) {
        var CyclevisitsGrid = /** @class */ (function (_super) {
            __extends(CyclevisitsGrid, _super);
            function CyclevisitsGrid(container) {
                return _super.call(this, container) || this;
            }
            CyclevisitsGrid.prototype.getColumnsKey = function () { return 'VitalSigns.Cyclevisits'; };
            CyclevisitsGrid.prototype.getDialogType = function () { return VitalSigns.CyclevisitsDialog; };
            CyclevisitsGrid.prototype.getIdProperty = function () { return VitalSigns.CyclevisitsRow.idProperty; };
            CyclevisitsGrid.prototype.getLocalTextPrefix = function () { return VitalSigns.CyclevisitsRow.localTextPrefix; };
            CyclevisitsGrid.prototype.getService = function () { return VitalSigns.CyclevisitsService.baseUrl; };
            CyclevisitsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CyclevisitsGrid);
            return CyclevisitsGrid;
        }(Serenity.EntityGrid));
        VitalSigns.CyclevisitsGrid = CyclevisitsGrid;
    })(VitalSigns = EMR.VitalSigns || (EMR.VitalSigns = {}));
})(EMR || (EMR = {}));
/// <reference path="../cyclevisits/cyclevisitsdialog.ts" />
var EMR;
(function (EMR) {
    var VitalSigns;
    (function (VitalSigns) {
        var CyclevisitsTabDialog = /** @class */ (function (_super) {
            __extends(CyclevisitsTabDialog, _super);
            function CyclevisitsTabDialog() {
                return _super.call(this) || this;
            }
            CyclevisitsTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.ScheduleId, true);
            };
            CyclevisitsTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], CyclevisitsTabDialog);
            return CyclevisitsTabDialog;
        }(VitalSigns.CyclevisitsDialog));
        VitalSigns.CyclevisitsTabDialog = CyclevisitsTabDialog;
    })(VitalSigns = EMR.VitalSigns || (EMR.VitalSigns = {}));
})(EMR || (EMR = {}));
/// <reference path="../cyclevisits/cyclevisitsgrid.ts" />
var EMR;
(function (EMR) {
    var VitalSigns;
    (function (VitalSigns) {
        var CyclevisitsTabGrid = /** @class */ (function (_super) {
            __extends(CyclevisitsTabGrid, _super);
            function CyclevisitsTabGrid(container) {
                return _super.call(this, container) || this;
            }
            CyclevisitsTabGrid.prototype.getDialogType = function () { return VitalSigns.CyclevisitsTabDialog; };
            CyclevisitsTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            CyclevisitsTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            CyclevisitsTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            CyclevisitsTabGrid.prototype.addButtonClick = function () {
                this.editItem({ ScheduleId: this.ScheduleId });
            };
            CyclevisitsTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            CyclevisitsTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.ScheduleId;
            };
            Object.defineProperty(CyclevisitsTabGrid.prototype, "ScheduleId", {
                get: function () {
                    return this._ScheduleId;
                },
                set: function (value) {
                    if (this._ScheduleId !== value) {
                        this._ScheduleId = value;
                        this.setEquality('ScheduleId', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            CyclevisitsTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CyclevisitsTabGrid);
            return CyclevisitsTabGrid;
        }(VitalSigns.CyclevisitsGrid));
        VitalSigns.CyclevisitsTabGrid = CyclevisitsTabGrid;
    })(VitalSigns = EMR.VitalSigns || (EMR.VitalSigns = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var VitalSigns;
    (function (VitalSigns) {
        var SchedulingDialog = /** @class */ (function (_super) {
            __extends(SchedulingDialog, _super);
            function SchedulingDialog() {
                var _this = _super.call(this) || this;
                _this.form = new VitalSigns.SchedulingForm(_this.idPrefix);
                _this.cyclevisitsGrid = new VitalSigns.CyclevisitsTabGrid(_this.byId('CyclevisitsGrid'));
                _this.cyclevisitsGrid.openDialogsAsPanel = true;
                EMR.DialogUtils.pendingChangesConfirmation(_this.element, function () { return _this.getSaveState() != _this.loadedState; });
                _this.form.PlanDate.change(function (e) {
                    _this.form.SPlanDate.value = convertToShamsi(_this.form.PlanDate.valueAsDate);
                });
                _this.form.SPlanDate.change(function (e) {
                    _this.form.PlanDate.valueAsDate = convertToGregorian(_this.form.SPlanDate.value.toString());
                });
                return _this;
            }
            SchedulingDialog.prototype.getFormKey = function () { return VitalSigns.SchedulingForm.formKey; };
            SchedulingDialog.prototype.getIdProperty = function () { return VitalSigns.SchedulingRow.idProperty; };
            SchedulingDialog.prototype.getLocalTextPrefix = function () { return VitalSigns.SchedulingRow.localTextPrefix; };
            SchedulingDialog.prototype.getNameProperty = function () { return VitalSigns.SchedulingRow.nameProperty; };
            SchedulingDialog.prototype.getService = function () { return VitalSigns.SchedulingService.baseUrl; };
            SchedulingDialog.prototype.getSaveState = function () {
                try {
                    return $.toJSON(this.getSaveEntity());
                }
                catch (e) {
                    return null;
                }
            };
            SchedulingDialog.prototype.loadResponse = function (data) {
                _super.prototype.loadResponse.call(this, data);
                this.loadedState = this.getSaveState();
            };
            SchedulingDialog.prototype.loadEntity = function (entity) {
                _super.prototype.loadEntity.call(this, entity);
                Serenity.TabsExtensions.setDisabled(this.tabs, 'Cyclevisits', this.isNewOrDeleted());
                this.cyclevisitsGrid.ScheduleId = entity.ScheduleId == null ? null : entity.ScheduleId;
            };
            SchedulingDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], SchedulingDialog);
            return SchedulingDialog;
        }(Serenity.EntityDialog));
        VitalSigns.SchedulingDialog = SchedulingDialog;
    })(VitalSigns = EMR.VitalSigns || (EMR.VitalSigns = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var VitalSigns;
    (function (VitalSigns) {
        var SchedulingGrid = /** @class */ (function (_super) {
            __extends(SchedulingGrid, _super);
            function SchedulingGrid(container) {
                return _super.call(this, container) || this;
            }
            SchedulingGrid.prototype.getColumnsKey = function () { return 'VitalSigns.Scheduling'; };
            SchedulingGrid.prototype.getDialogType = function () { return VitalSigns.SchedulingDialog; };
            SchedulingGrid.prototype.getIdProperty = function () { return VitalSigns.SchedulingRow.idProperty; };
            SchedulingGrid.prototype.getLocalTextPrefix = function () { return VitalSigns.SchedulingRow.localTextPrefix; };
            SchedulingGrid.prototype.getService = function () { return VitalSigns.SchedulingService.baseUrl; };
            SchedulingGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], SchedulingGrid);
            return SchedulingGrid;
        }(Serenity.EntityGrid));
        VitalSigns.SchedulingGrid = SchedulingGrid;
    })(VitalSigns = EMR.VitalSigns || (EMR.VitalSigns = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var VitalSigns;
    (function (VitalSigns) {
        var VitalPatientsDialog = /** @class */ (function (_super) {
            __extends(VitalPatientsDialog, _super);
            function VitalPatientsDialog() {
                var _this = _super.call(this) || this;
                _this.form = new VitalSigns.VitalPatientsForm(_this.idPrefix);
                _this.vitalSignsGrid = new VitalSigns.VitalvisitsTabGrid(_this.byId('VitalvisitsGrid'));
                _this.vitalSignsGrid.openDialogsAsPanel = true;
                EMR.DialogUtils.pendingChangesConfirmation(_this.element, function () { return _this.getSaveState() != _this.loadedState; });
                return _this;
            }
            VitalPatientsDialog.prototype.getFormKey = function () { return VitalSigns.VitalPatientsForm.formKey; };
            VitalPatientsDialog.prototype.getIdProperty = function () { return VitalSigns.VitalPatientsRow.idProperty; };
            VitalPatientsDialog.prototype.getLocalTextPrefix = function () { return VitalSigns.VitalPatientsRow.localTextPrefix; };
            VitalPatientsDialog.prototype.getNameProperty = function () { return VitalSigns.VitalPatientsRow.nameProperty; };
            VitalPatientsDialog.prototype.getService = function () { return VitalSigns.VitalPatientsService.baseUrl; };
            VitalPatientsDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }), 1);
                // We could also remove delete button here, but for demonstration 
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                return buttons;
            };
            VitalPatientsDialog.prototype.getSaveState = function () {
                try {
                    return $.toJSON(this.getSaveEntity());
                }
                catch (e) {
                    return null;
                }
            };
            VitalPatientsDialog.prototype.loadResponse = function (data) {
                _super.prototype.loadResponse.call(this, data);
                this.loadedState = this.getSaveState();
            };
            VitalPatientsDialog.prototype.loadEntity = function (entity) {
                _super.prototype.loadEntity.call(this, entity);
                Serenity.TabsExtensions.setDisabled(this.tabs, 'Vitalvisits', this.isNewOrDeleted());
                this.vitalSignsGrid.MrId = entity.Mrid;
            };
            VitalPatientsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], VitalPatientsDialog);
            return VitalPatientsDialog;
        }(Serenity.EntityDialog));
        VitalSigns.VitalPatientsDialog = VitalPatientsDialog;
    })(VitalSigns = EMR.VitalSigns || (EMR.VitalSigns = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var VitalSigns;
    (function (VitalSigns) {
        var VitalPatientsGrid = /** @class */ (function (_super) {
            __extends(VitalPatientsGrid, _super);
            function VitalPatientsGrid(container) {
                return _super.call(this, container) || this;
            }
            VitalPatientsGrid.prototype.getColumnsKey = function () { return 'VitalSigns.VitalPatients'; };
            VitalPatientsGrid.prototype.getDialogType = function () { return VitalSigns.VitalPatientsDialog; };
            VitalPatientsGrid.prototype.getIdProperty = function () { return VitalSigns.VitalPatientsRow.idProperty; };
            VitalPatientsGrid.prototype.getLocalTextPrefix = function () { return VitalSigns.VitalPatientsRow.localTextPrefix; };
            VitalPatientsGrid.prototype.getService = function () { return VitalSigns.VitalPatientsService.baseUrl; };
            VitalPatientsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            VitalPatientsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], VitalPatientsGrid);
            return VitalPatientsGrid;
        }(Serenity.EntityGrid));
        VitalSigns.VitalPatientsGrid = VitalPatientsGrid;
    })(VitalSigns = EMR.VitalSigns || (EMR.VitalSigns = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var VitalSigns;
    (function (VitalSigns) {
        var VitalvisitsDialog = /** @class */ (function (_super) {
            __extends(VitalvisitsDialog, _super);
            function VitalvisitsDialog() {
                var _this = _super.call(this) || this;
                _this.form = new VitalSigns.VitalvisitsForm(_this.idPrefix);
                _this.vitalSignsGrid = new VitalSigns.VVitalSignsTabGrid(_this.byId('VVitalSignsGrid'));
                _this.vitalSignsGrid.openDialogsAsPanel = true;
                //this.schedulingGrid = new SchedulingTabGrid(this.byId('SchedulingGrid'));
                //this.schedulingGrid.openDialogsAsPanel = true;
                EMR.DialogUtils.pendingChangesConfirmation(_this.element, function () { return _this.getSaveState() != _this.loadedState; });
                return _this;
            }
            VitalvisitsDialog.prototype.getFormKey = function () { return VitalSigns.VitalvisitsForm.formKey; };
            VitalvisitsDialog.prototype.getIdProperty = function () { return VitalSigns.VitalvisitsRow.idProperty; };
            VitalvisitsDialog.prototype.getLocalTextPrefix = function () { return VitalSigns.VitalvisitsRow.localTextPrefix; };
            VitalvisitsDialog.prototype.getNameProperty = function () { return VitalSigns.VitalvisitsRow.nameProperty; };
            VitalvisitsDialog.prototype.getService = function () { return VitalSigns.VitalvisitsService.baseUrl; };
            VitalvisitsDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "apply-changes-button"; }), 1);
                // We could also remove delete button here, but for demonstration 
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "delete-button"; }), 1);
                return buttons;
            };
            VitalvisitsDialog.prototype.getSaveState = function () {
                try {
                    return $.toJSON(this.getSaveEntity());
                }
                catch (e) {
                    return null;
                }
            };
            VitalvisitsDialog.prototype.loadResponse = function (data) {
                _super.prototype.loadResponse.call(this, data);
                this.loadedState = this.getSaveState();
            };
            VitalvisitsDialog.prototype.loadEntity = function (entity) {
                _super.prototype.loadEntity.call(this, entity);
                Serenity.TabsExtensions.setDisabled(this.tabs, 'VVitalSigns', this.isNewOrDeleted());
                //Serenity.TabsExtensions.setDisabled(this.tabs, 'Scheduling', this.isNewOrDeleted());
                this.vitalSignsGrid.VisitId = entity.VisitId == null ? null : entity.VisitId;
                //this.schedulingGrid.VisitId = entity.VisitId == null ? null : entity.VisitId;
            };
            VitalvisitsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], VitalvisitsDialog);
            return VitalvisitsDialog;
        }(Serenity.EntityDialog));
        VitalSigns.VitalvisitsDialog = VitalvisitsDialog;
    })(VitalSigns = EMR.VitalSigns || (EMR.VitalSigns = {}));
})(EMR || (EMR = {}));
/// <reference path="../vitalvisits/vitalvisitsdialog.ts" />
var EMR;
(function (EMR) {
    var VitalSigns;
    (function (VitalSigns) {
        var VitalvisitsTabDialog = /** @class */ (function (_super) {
            __extends(VitalvisitsTabDialog, _super);
            function VitalvisitsTabDialog() {
                return _super.call(this) || this;
            }
            VitalvisitsTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.Mrid, true);
            };
            VitalvisitsTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], VitalvisitsTabDialog);
            return VitalvisitsTabDialog;
        }(VitalSigns.VitalvisitsDialog));
        VitalSigns.VitalvisitsTabDialog = VitalvisitsTabDialog;
    })(VitalSigns = EMR.VitalSigns || (EMR.VitalSigns = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var VitalSigns;
    (function (VitalSigns) {
        var VitalvisitsGrid = /** @class */ (function (_super) {
            __extends(VitalvisitsGrid, _super);
            function VitalvisitsGrid(container) {
                return _super.call(this, container) || this;
            }
            VitalvisitsGrid.prototype.getColumnsKey = function () { return 'VitalSigns.Vitalvisits'; };
            VitalvisitsGrid.prototype.getDialogType = function () { return VitalSigns.VitalvisitsDialog; };
            VitalvisitsGrid.prototype.getIdProperty = function () { return VitalSigns.VitalvisitsRow.idProperty; };
            VitalvisitsGrid.prototype.getLocalTextPrefix = function () { return VitalSigns.VitalvisitsRow.localTextPrefix; };
            VitalvisitsGrid.prototype.getService = function () { return VitalSigns.VitalvisitsService.baseUrl; };
            VitalvisitsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "refresh-button"; }), 1);
                return buttons;
            };
            VitalvisitsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], VitalvisitsGrid);
            return VitalvisitsGrid;
        }(Serenity.EntityGrid));
        VitalSigns.VitalvisitsGrid = VitalvisitsGrid;
    })(VitalSigns = EMR.VitalSigns || (EMR.VitalSigns = {}));
})(EMR || (EMR = {}));
/// <reference path="../vitalvisits/vitalvisitsgrid.ts" />
var EMR;
(function (EMR) {
    var VitalSigns;
    (function (VitalSigns) {
        var VitalvisitsTabGrid = /** @class */ (function (_super) {
            __extends(VitalvisitsTabGrid, _super);
            function VitalvisitsTabGrid(container) {
                return _super.call(this, container) || this;
            }
            VitalvisitsTabGrid.prototype.getDialogType = function () { return VitalSigns.VitalvisitsTabDialog; };
            VitalvisitsTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            VitalvisitsTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            VitalvisitsTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            VitalvisitsTabGrid.prototype.addButtonClick = function () {
                this.editItem({ MrId: this.MrId });
            };
            VitalvisitsTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            VitalvisitsTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.MrId;
            };
            Object.defineProperty(VitalvisitsTabGrid.prototype, "MrId", {
                get: function () {
                    return this._MrId;
                },
                set: function (value) {
                    if (this._MrId !== value) {
                        this._MrId = value;
                        this.setEquality('Mrid', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            VitalvisitsTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], VitalvisitsTabGrid);
            return VitalvisitsTabGrid;
        }(VitalSigns.VitalvisitsGrid));
        VitalSigns.VitalvisitsTabGrid = VitalvisitsTabGrid;
    })(VitalSigns = EMR.VitalSigns || (EMR.VitalSigns = {}));
})(EMR || (EMR = {}));
/// <reference path="../scheduling/schedulingdialog.ts" />
var EMR;
(function (EMR) {
    var VitalSigns;
    (function (VitalSigns) {
        var SchedulingTabDialog = /** @class */ (function (_super) {
            __extends(SchedulingTabDialog, _super);
            function SchedulingTabDialog() {
                return _super.call(this) || this;
            }
            SchedulingTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.VisitId, true);
            };
            SchedulingTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], SchedulingTabDialog);
            return SchedulingTabDialog;
        }(VitalSigns.SchedulingDialog));
        VitalSigns.SchedulingTabDialog = SchedulingTabDialog;
    })(VitalSigns = EMR.VitalSigns || (EMR.VitalSigns = {}));
})(EMR || (EMR = {}));
/// <reference path="../scheduling/schedulinggrid.ts" />
var EMR;
(function (EMR) {
    var VitalSigns;
    (function (VitalSigns) {
        var SchedulingTabGrid = /** @class */ (function (_super) {
            __extends(SchedulingTabGrid, _super);
            function SchedulingTabGrid(container) {
                return _super.call(this, container) || this;
            }
            SchedulingTabGrid.prototype.getDialogType = function () { return VitalSigns.SchedulingDialog; };
            SchedulingTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            SchedulingTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            SchedulingTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            SchedulingTabGrid.prototype.addButtonClick = function () {
                this.editItem({ VisitId: this.VisitId });
            };
            SchedulingTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            SchedulingTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.VisitId;
            };
            Object.defineProperty(SchedulingTabGrid.prototype, "VisitId", {
                get: function () {
                    return this._VisitId;
                },
                set: function (value) {
                    if (this._VisitId !== value) {
                        this._VisitId = value;
                        this.setEquality('VisitId', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            SchedulingTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], SchedulingTabGrid);
            return SchedulingTabGrid;
        }(VitalSigns.SchedulingGrid));
        VitalSigns.SchedulingTabGrid = SchedulingTabGrid;
    })(VitalSigns = EMR.VitalSigns || (EMR.VitalSigns = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var VitalSigns;
    (function (VitalSigns) {
        var VVitalSignsDialog = /** @class */ (function (_super) {
            __extends(VVitalSignsDialog, _super);
            function VVitalSignsDialog() {
                var _this = _super.call(this) || this;
                _this.form = new VitalSigns.VVitalSignsForm(_this.idPrefix);
                var getDate = new Date();
                var todyDate = getDate.getTime();
                _this.form.VitalDateTime.addValidationRule(_this.uniqueName, function (e) {
                    var newDate = _this.form.VitalDateTime.valueAsDate.getTime();
                    if (newDate > todyDate) {
                        return "Date cannot be bigger than today! Please correct it";
                    }
                    var oneday = 24 * 60 * 60 * 1000;
                    var diff = Math.abs(getDate.getTime() - _this.form.VitalDateTime.valueAsDate.getTime());
                    var diffdays = Math.ceil(diff / oneday);
                    if (diffdays > 5) {
                        return "The date is too early to enter. Pleae enter a valid date";
                    }
                });
                _this.form.VitalDateTime.change(function (e) {
                    _this.form.SVitalDate.value = convertToShamsi(_this.form.VitalDateTime.valueAsDate);
                });
                _this.form.SVitalDate.change(function (e) {
                    _this.form.VitalDateTime.valueAsDate = convertToGregorian(_this.form.SVitalDate.value.toString());
                });
                return _this;
            }
            VVitalSignsDialog.prototype.getFormKey = function () { return VitalSigns.VVitalSignsForm.formKey; };
            VVitalSignsDialog.prototype.getIdProperty = function () { return VitalSigns.VVitalSignsRow.idProperty; };
            VVitalSignsDialog.prototype.getLocalTextPrefix = function () { return VitalSigns.VVitalSignsRow.localTextPrefix; };
            VVitalSignsDialog.prototype.getNameProperty = function () { return VitalSigns.VVitalSignsRow.nameProperty; };
            VVitalSignsDialog.prototype.getService = function () { return VitalSigns.VVitalSignsService.baseUrl; };
            VVitalSignsDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], VVitalSignsDialog);
            return VVitalSignsDialog;
        }(Serenity.EntityDialog));
        VitalSigns.VVitalSignsDialog = VVitalSignsDialog;
    })(VitalSigns = EMR.VitalSigns || (EMR.VitalSigns = {}));
})(EMR || (EMR = {}));
/// <reference path="../vvitalsigns/vvitalsignsdialog.ts" />
var EMR;
(function (EMR) {
    var VitalSigns;
    (function (VitalSigns) {
        var VVitalSignsTabDialog = /** @class */ (function (_super) {
            __extends(VVitalSignsTabDialog, _super);
            function VVitalSignsTabDialog() {
                return _super.call(this) || this;
            }
            VVitalSignsTabDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadOnly(this.form.VisitId, true);
            };
            VVitalSignsTabDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], VVitalSignsTabDialog);
            return VVitalSignsTabDialog;
        }(VitalSigns.VVitalSignsDialog));
        VitalSigns.VVitalSignsTabDialog = VVitalSignsTabDialog;
    })(VitalSigns = EMR.VitalSigns || (EMR.VitalSigns = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var VitalSigns;
    (function (VitalSigns) {
        var VVitalSignsGrid = /** @class */ (function (_super) {
            __extends(VVitalSignsGrid, _super);
            function VVitalSignsGrid(container) {
                return _super.call(this, container) || this;
            }
            VVitalSignsGrid.prototype.getColumnsKey = function () { return 'VitalSigns.VVitalSigns'; };
            VVitalSignsGrid.prototype.getDialogType = function () { return VitalSigns.VVitalSignsDialog; };
            VVitalSignsGrid.prototype.getIdProperty = function () { return VitalSigns.VVitalSignsRow.idProperty; };
            VVitalSignsGrid.prototype.getLocalTextPrefix = function () { return VitalSigns.VVitalSignsRow.localTextPrefix; };
            VVitalSignsGrid.prototype.getService = function () { return VitalSigns.VVitalSignsService.baseUrl; };
            VVitalSignsGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            VVitalSignsGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], VVitalSignsGrid);
            return VVitalSignsGrid;
        }(Serenity.EntityGrid));
        VitalSigns.VVitalSignsGrid = VVitalSignsGrid;
    })(VitalSigns = EMR.VitalSigns || (EMR.VitalSigns = {}));
})(EMR || (EMR = {}));
/// <reference path="../vvitalsigns/vvitalsignsgrid.ts" />
var EMR;
(function (EMR) {
    var VitalSigns;
    (function (VitalSigns) {
        var VVitalSignsTabGrid = /** @class */ (function (_super) {
            __extends(VVitalSignsTabGrid, _super);
            function VVitalSignsTabGrid(container) {
                return _super.call(this, container) || this;
            }
            VVitalSignsTabGrid.prototype.getDialogType = function () { return VitalSigns.VVitalSignsTabDialog; };
            VVitalSignsTabGrid.prototype.getColumns = function () {
                return _super.prototype.getColumns.call(this) /*.filter(x => x.field !== fld.CoaMappingId)*/;
            };
            VVitalSignsTabGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "column-picker-button"; }), 1);
                return buttons;
            };
            VVitalSignsTabGrid.prototype.initEntityDialog = function (itemType, dialog) {
                _super.prototype.initEntityDialog.call(this, itemType, dialog);
                Serenity.SubDialogHelper.cascade(dialog, this.element.closest('.ui-dialog'));
            };
            VVitalSignsTabGrid.prototype.addButtonClick = function () {
                this.editItem({ VisitId: this.VisitId });
            };
            VVitalSignsTabGrid.prototype.getInitialTitle = function () {
                return null;
            };
            VVitalSignsTabGrid.prototype.getGridCanLoad = function () {
                return _super.prototype.getGridCanLoad.call(this) && !!this.VisitId;
            };
            Object.defineProperty(VVitalSignsTabGrid.prototype, "VisitId", {
                get: function () {
                    return this._VisitId;
                },
                set: function (value) {
                    if (this._VisitId !== value) {
                        this._VisitId = value;
                        this.setEquality('VisitId', value);
                        this.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });
            VVitalSignsTabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], VVitalSignsTabGrid);
            return VVitalSignsTabGrid;
        }(VitalSigns.VVitalSignsGrid));
        VitalSigns.VVitalSignsTabGrid = VVitalSignsTabGrid;
    })(VitalSigns = EMR.VitalSigns || (EMR.VitalSigns = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Authorization;
    (function (Authorization) {
        Object.defineProperty(Authorization, 'userDefinition', {
            get: function () {
                return Q.getRemoteData('UserData');
            }
        });
        function hasPermission(permissionKey) {
            var ud = Authorization.userDefinition;
            return ud.Username === 'admin' || !!ud.Permissions[permissionKey];
        }
        Authorization.hasPermission = hasPermission;
    })(Authorization = EMR.Authorization || (EMR.Authorization = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Membership;
    (function (Membership) {
        var ChangePasswordPanel = /** @class */ (function (_super) {
            __extends(ChangePasswordPanel, _super);
            function ChangePasswordPanel(container) {
                var _this = _super.call(this, container) || this;
                _this.form = new Membership.ChangePasswordForm(_this.idPrefix);
                _this.form.NewPassword.addValidationRule(_this.uniqueName, function (e) {
                    if (_this.form.w('ConfirmPassword', Serenity.PasswordEditor).value.length < 7) {
                        return Q.format(Q.text('Validation.MinRequiredPasswordLength'), 7);
                    }
                });
                _this.form.ConfirmPassword.addValidationRule(_this.uniqueName, function (e) {
                    if (_this.form.ConfirmPassword.value !== _this.form.NewPassword.value) {
                        return Q.text('Validation.PasswordConfirm');
                    }
                });
                _this.byId('SubmitButton').click(function (e) {
                    e.preventDefault();
                    if (!_this.validateForm()) {
                        return;
                    }
                    var request = _this.getSaveEntity();
                    Q.serviceCall({
                        url: Q.resolveUrl('~/Account/ChangePassword'),
                        request: request,
                        onSuccess: function (response) {
                            Q.information(Q.text('Forms.Membership.ChangePassword.Success'), function () {
                                window.location.href = Q.resolveUrl('~/');
                            });
                        }
                    });
                });
                return _this;
            }
            ChangePasswordPanel.prototype.getFormKey = function () { return Membership.ChangePasswordForm.formKey; };
            ChangePasswordPanel = __decorate([
                Serenity.Decorators.registerClass()
            ], ChangePasswordPanel);
            return ChangePasswordPanel;
        }(Serenity.PropertyPanel));
        Membership.ChangePasswordPanel = ChangePasswordPanel;
    })(Membership = EMR.Membership || (EMR.Membership = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Membership;
    (function (Membership) {
        var ForgotPasswordPanel = /** @class */ (function (_super) {
            __extends(ForgotPasswordPanel, _super);
            function ForgotPasswordPanel(container) {
                var _this = _super.call(this, container) || this;
                _this.form = new Membership.ForgotPasswordForm(_this.idPrefix);
                _this.byId('SubmitButton').click(function (e) {
                    e.preventDefault();
                    if (!_this.validateForm()) {
                        return;
                    }
                    var request = _this.getSaveEntity();
                    Q.serviceCall({
                        url: Q.resolveUrl('~/Account/ForgotPassword'),
                        request: request,
                        onSuccess: function (response) {
                            Q.information(Q.text('Forms.Membership.ForgotPassword.Success'), function () {
                                window.location.href = Q.resolveUrl('~/');
                            });
                        }
                    });
                });
                return _this;
            }
            ForgotPasswordPanel.prototype.getFormKey = function () { return Membership.ForgotPasswordForm.formKey; };
            ForgotPasswordPanel = __decorate([
                Serenity.Decorators.registerClass()
            ], ForgotPasswordPanel);
            return ForgotPasswordPanel;
        }(Serenity.PropertyPanel));
        Membership.ForgotPasswordPanel = ForgotPasswordPanel;
    })(Membership = EMR.Membership || (EMR.Membership = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Membership;
    (function (Membership) {
        var ResetPasswordPanel = /** @class */ (function (_super) {
            __extends(ResetPasswordPanel, _super);
            function ResetPasswordPanel(container) {
                var _this = _super.call(this, container) || this;
                _this.form = new Membership.ResetPasswordForm(_this.idPrefix);
                _this.form.NewPassword.addValidationRule(_this.uniqueName, function (e) {
                    if (_this.form.ConfirmPassword.value.length < 7) {
                        return Q.format(Q.text('Validation.MinRequiredPasswordLength'), 7);
                    }
                });
                _this.form.ConfirmPassword.addValidationRule(_this.uniqueName, function (e) {
                    if (_this.form.ConfirmPassword.value !== _this.form.NewPassword.value) {
                        return Q.text('Validation.PasswordConfirm');
                    }
                });
                _this.byId('SubmitButton').click(function (e) {
                    e.preventDefault();
                    if (!_this.validateForm()) {
                        return;
                    }
                    var request = _this.getSaveEntity();
                    request.Token = _this.byId('Token').val();
                    Q.serviceCall({
                        url: Q.resolveUrl('~/Account/ResetPassword'),
                        request: request,
                        onSuccess: function (response) {
                            Q.information(Q.text('Forms.Membership.ResetPassword.Success'), function () {
                                window.location.href = Q.resolveUrl('~/Account/Login');
                            });
                        }
                    });
                });
                return _this;
            }
            ResetPasswordPanel.prototype.getFormKey = function () { return Membership.ResetPasswordForm.formKey; };
            ResetPasswordPanel = __decorate([
                Serenity.Decorators.registerClass()
            ], ResetPasswordPanel);
            return ResetPasswordPanel;
        }(Serenity.PropertyPanel));
        Membership.ResetPasswordPanel = ResetPasswordPanel;
    })(Membership = EMR.Membership || (EMR.Membership = {}));
})(EMR || (EMR = {}));
var EMR;
(function (EMR) {
    var Membership;
    (function (Membership) {
        var SignUpPanel = /** @class */ (function (_super) {
            __extends(SignUpPanel, _super);
            function SignUpPanel(container) {
                var _this = _super.call(this, container) || this;
                _this.form = new Membership.SignUpForm(_this.idPrefix);
                _this.form.ConfirmEmail.addValidationRule(_this.uniqueName, function (e) {
                    if (_this.form.ConfirmEmail.value !== _this.form.Email.value) {
                        return Q.text('Validation.EmailConfirm');
                    }
                });
                _this.form.ConfirmPassword.addValidationRule(_this.uniqueName, function (e) {
                    if (_this.form.ConfirmPassword.value !== _this.form.Password.value) {
                        return Q.text('Validation.PasswordConfirm');
                    }
                });
                _this.byId('SubmitButton').click(function (e) {
                    e.preventDefault();
                    if (!_this.validateForm()) {
                        return;
                    }
                    Q.serviceCall({
                        url: Q.resolveUrl('~/Account/SignUp'),
                        request: {
                            DisplayName: _this.form.DisplayName.value,
                            Email: _this.form.Email.value,
                            Password: _this.form.Password.value
                        },
                        onSuccess: function (response) {
                            Q.information(Q.text('Forms.Membership.SignUp.Success'), function () {
                                window.location.href = Q.resolveUrl('~/');
                            });
                        }
                    });
                });
                return _this;
            }
            SignUpPanel.prototype.getFormKey = function () { return Membership.SignUpForm.formKey; };
            SignUpPanel = __decorate([
                Serenity.Decorators.registerClass()
            ], SignUpPanel);
            return SignUpPanel;
        }(Serenity.PropertyPanel));
        Membership.SignUpPanel = SignUpPanel;
    })(Membership = EMR.Membership || (EMR.Membership = {}));
})(EMR || (EMR = {}));
//# sourceMappingURL=EMR.Web.js.map